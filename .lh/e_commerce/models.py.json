{
    "sourceFile": "e_commerce/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 129,
            "patches": [
                {
                    "date": 1738841975084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738841984532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,5 +12,6 @@\n from io import BytesIO\r\n from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n from django.dispatch import receiver\r\n from django.utils.translation import gettext_lazy as _\r\n- \n\\ No newline at end of file\n+\r\n+\r\n"
                },
                {
                    "date": 1738842000639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,4 +14,15 @@\n from django.dispatch import receiver\r\n from django.utils.translation import gettext_lazy as _\r\n \r\n \r\n+\r\n+\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                 '/medias/'))\r\n+class Pays(SafeDeleteModel,LifecycleModel):\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    nom = models.CharField(max_length=50)\r\n+    \r\n+    def __str__(self):\r\n+        return self.nom\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738842346911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,38 @@\n+from django.db import models\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.files.storage import FileSystemStorage\r\n+from django.conf import settings\r\n+import os.path\r\n+import os\r\n+import uuid\r\n+from django.utils import timezone\r\n+import random\r\n+from django_lifecycle import LifecycleModel\r\n+from io import BytesIO\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+from django.dispatch import receiver\r\n+from django.utils.translation import gettext_lazy as _\r\n+\r\n+\r\n+\r\n+\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                 '/medias/'))\r\n+class Pays(SafeDeleteModel,LifecycleModel):\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    nom = models.CharField(max_length=50)\r\n+    \r\n+    def __str__(self):\r\n+        return self.nom\r\n+\r\n+class Ville(SafeDeleteModel,LifecycleModel):\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    nom = models.CharField(max_length=50)\r\n+    pays = models.ForeignKey(Pays, on_delete=models.CASCADE)\r\n+    \r\n+    def __str__(self):\r\n+        return self.nom\r\n+\r\n"
                },
                {
                    "date": 1738842428556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,4 +35,6 @@\n     \r\n     def __str__(self):\r\n         return self.nom\r\n \r\n+\r\n+\r\n"
                },
                {
                    "date": 1738842565920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,23 +18,23 @@\n \r\n \r\n imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n                                                  '/medias/'))\r\n-class Pays(SafeDeleteModel,LifecycleModel):\r\n+class Conrty(SafeDeleteModel,LifecycleModel):\r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    nom = models.CharField(max_length=50)\r\n+    name = models.CharField(max_length=50)\r\n     \r\n     def __str__(self):\r\n-        return self.nom\r\n+        return self.name\r\n \r\n-class Ville(SafeDeleteModel,LifecycleModel):\r\n+class City(SafeDeleteModel,LifecycleModel):\r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    nom = models.CharField(max_length=50)\r\n-    pays = models.ForeignKey(Pays, on_delete=models.CASCADE)\r\n+    name = models.CharField(max_length=50)\r\n+    cpntry = models.ForeignKey(Conrty, on_delete=models.CASCADE)\r\n     \r\n     def __str__(self):\r\n-        return self.nom\r\n+        return self.name\r\n \r\n \r\n-\r\n+class \r\n"
                },
                {
                    "date": 1738842692717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,33 +36,6 @@\n     def __str__(self):\r\n         return self.name\r\n \r\n \r\n-class \r\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n-\r\n-\r\n-\r\n-\r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                 '/medias/'))\r\n-class Pays(SafeDeleteModel,LifecycleModel):\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    nom = models.CharField(max_length=50)\r\n+class Users(AbstractUserModel,SafeDeleteModel):\r\n     \r\n-    def __str__(self):\r\n\\ No newline at end of file\n-        return self.nom\n"
                },
                {
                    "date": 1738842704523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,6 +36,8 @@\n     def __str__(self):\r\n         return self.name\r\n \r\n \r\n-class Users(AbstractUserModel,SafeDeleteModel):\r\n+class Users(AbstractUser,SafeDeleteModel):\r\n     \r\n+    -sa\r\n+    \r\n"
                },
                {
                    "date": 1738842763577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,26 +18,33 @@\n \r\n \r\n imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n                                                  '/medias/'))\r\n-class Conrty(SafeDeleteModel,LifecycleModel):\r\n+class Contry(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     name = models.CharField(max_length=50)\r\n     \r\n     def __str__(self):\r\n         return self.name\r\n \r\n class City(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     name = models.CharField(max_length=50)\r\n-    cpntry = models.ForeignKey(Conrty, on_delete=models.CASCADE)\r\n+    cpntry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n     \r\n     def __str__(self):\r\n         return self.name\r\n \r\n \r\n class Users(AbstractUser,SafeDeleteModel):\r\n     \r\n-    -sa\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n+    \r\n+\r\n+   \r\n"
                },
                {
                    "date": 1738842958518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,21 +12,22 @@\n from io import BytesIO\r\n from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n from django.dispatch import receiver\r\n from django.utils.translation import gettext_lazy as _\r\n+ \r\n \r\n \r\n \r\n-\r\n imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n                                                  '/medias/'))\r\n class Contry(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     name = models.CharField(max_length=50)\r\n-    \r\n+    history = HistoricalRecords(table_name='contry_history',\r\n+\r\n     def __str__(self):\r\n         return self.name\r\n \r\n class City(SafeDeleteModel,LifecycleModel):\r\n"
                },
                {
                    "date": 1738843261293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     name = models.CharField(max_length=50)\r\n-    history = HistoricalRecords(table_name='contry_history',\r\n+    history = HistoricalRecords(table_name='image_history',\r\n+                                history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n \r\n@@ -35,9 +36,9 @@\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     name = models.CharField(max_length=50)\r\n-    cpntry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n     \r\n     def __str__(self):\r\n         return self.name\r\n \r\n"
                },
                {
                    "date": 1738843283158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+from django.db import models\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.files.storage import FileSystemStorage\r\n+from django.conf import settings\r\n+import os.path\r\n+import os\r\n+import uuid\r\n+from django.utils import timezone\r\n+import random\r\n+from django_lifecycle import LifecycleModel\r\n+from io import BytesIO\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+from django.dispatch import receiver\r\n+from django.utils.translation import gettext_lazy as _\r\n+from simple_history.models import HistoricalRecords\r\n+\r\n+\r\n+\r\n+\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                 '/medias/'))\r\n+class Contry(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50)\r\n+    history = HistoricalRecords(table_name='image_history',\r\n+                                history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+class City(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    \r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+\r\n+class Users(AbstractUser,SafeDeleteModel):\r\n+    \r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    \r\n+\r\n+   \r\n"
                },
                {
                    "date": 1738843537343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,12 @@\n from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n from django.dispatch import receiver\r\n from django.utils.translation import gettext_lazy as _\r\n from simple_history.models import HistoricalRecords\r\n+from django.core.exceptions import ValidationError\r\n \r\n \r\n \r\n-\r\n imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n                                                  '/medias/'))\r\n class Contry(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n@@ -50,56 +50,4 @@\n     \r\n     \r\n \r\n    \r\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n- \r\n-\r\n-\r\n-\r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                 '/medias/'))\r\n-class Contry(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n-    history = HistoricalRecords(table_name='image_history',\r\n-                                history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-class City(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    \r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-\r\n-class Users(AbstractUser,SafeDeleteModel):\r\n-    \r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    \r\n-\r\n-   \r\n"
                },
                {
                    "date": 1738843571795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n from simple_history.models import HistoricalRecords\r\n from django.core.exceptions import ValidationError\r\n \r\n \r\n-\r\n imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n                                                  '/medias/'))\r\n class Contry(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n"
                },
                {
                    "date": 1738843596196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n from django.core.exceptions import ValidationError\r\n \r\n \r\n imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                 '/medias/'))\r\n+                                                '/medias/'))\r\n+\r\n class Contry(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n"
                },
                {
                    "date": 1738843632303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,6 +48,7 @@\n     \r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     \r\n+    \r\n \r\n    \r\n"
                },
                {
                    "date": 1738843661968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     def __str__(self):\r\n         return self.name\r\n \r\n \r\n-class Users(AbstractUser,SafeDeleteModel):\r\n+class CustUsers(AbstractUser,SafeDeleteModel):\r\n     \r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     \r\n"
                },
                {
                    "date": 1738843806231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,15 @@\n     def __str__(self):\r\n         return self.name\r\n \r\n \r\n-class CustUsers(AbstractUser,SafeDeleteModel):\r\n+class CustomUsers(AbstractUser,SafeDeleteModel):\r\n     \r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     \r\n     \r\n+    \r\n+    \r\n \r\n    \r\n"
                },
                {
                    "date": 1738843841204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,6 +52,7 @@\n     \r\n     \r\n     \r\n     \r\n+    \r\n \r\n    \r\n"
                },
                {
                    "date": 1738843893992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,59 @@\n+from django.db import models\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.files.storage import FileSystemStorage\r\n+from django.conf import settings\r\n+import os.path\r\n+import os\r\n+import uuid\r\n+from django.utils import timezone\r\n+import random\r\n+from django_lifecycle import LifecycleModel\r\n+from io import BytesIO\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+from django.dispatch import receiver\r\n+from django.utils.translation import gettext_lazy as _\r\n+from simple_history.models import HistoricalRecords\r\n+from django.core.exceptions import ValidationError\r\n+\r\n+\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                '/medias/'))\r\n+\r\n+class Contry(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50)\r\n+    history = HistoricalRecords(table_name='image_history',\r\n+                                history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+class City(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    \r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+\r\n+class CustomUsers(AbstractUser,SafeDeleteModel):\r\n+    \r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    contact = models.CharField(max_length=10)\r\n+    \r\n+    \r\n+    \r\n+    \r\n+    \r\n+\r\n+   \r\n"
                },
                {
                    "date": 1738843905702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,69 +49,12 @@\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     contact = models.CharField(max_length=10)\r\n-    \r\n-    \r\n-    \r\n-    \r\n-    \r\n+    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\r\n \r\n-   \r\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n-from simple_history.models import HistoricalRecords\r\n-from django.core.exceptions import ValidationError\r\n-\r\n-\r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                '/medias/'))\r\n-\r\n-class Contry(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n-    history = HistoricalRecords(table_name='image_history',\r\n-                                history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-class City(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n     \r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-\r\n-class CustomUsers(AbstractUser,SafeDeleteModel):\r\n     \r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     \r\n-    \r\n-    \r\n-    \r\n-    \r\n \r\n    \r\n"
                },
                {
                    "date": 1738843986420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,10 @@\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     contact = models.CharField(max_length=10)\r\n-    Date_ajout = models.DateTimeField(default=timezone.now, editable=False)\r\n-\r\n+    account_creation_date = models.DateTimeField(default=timezone.now, editable=False)\r\n+    is_online = models.BooleanField(default=False)\r\n     \r\n     \r\n     \r\n     \r\n"
                },
                {
                    "date": 1738844076138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,10 @@\n     \r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    contry = models.ForeignKey(Contry, on_delete=models)\r\n+    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n     contact = models.CharField(max_length=10)\r\n     account_creation_date = models.DateTimeField(default=timezone.now, editable=False)\r\n     is_online = models.BooleanField(default=False)\r\n     \r\n"
                },
                {
                    "date": 1738844093991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,42 @@\n     account_creation_date = models.DateTimeField(default=timezone.now, editable=False)\r\n     is_online = models.BooleanField(default=False)\r\n     \r\n     \r\n+     # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n     \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n     \r\n+    \r\n+    \r\n+    \r\n \r\n    \r\n"
                },
                {
                    "date": 1738844250615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,17 @@\n         user.is_online = False\r\n         user.save()\r\n     \r\n     \r\n-    \r\n-    \r\n \r\n+# Modele de verificacion\r\n+class VerificationCode(models.Model):\r\n+    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n+    code = models.CharField(max_length=6)\r\n+    created_at = models.DateTimeField(auto_now_add=True)\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.user.username} - {self.code}\"\r\n+\r\n+\r\n+\r\n    \r\n"
                },
                {
                    "date": 1738844444586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,32 +19,34 @@\n \r\n imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n                                                 '/medias/'))\r\n \r\n+####     models contry ########\r\n class Contry(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     name = models.CharField(max_length=50)\r\n-    history = HistoricalRecords(table_name='image_history',\r\n-                                history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n \r\n+##     models city ########\r\n class City(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     name = models.CharField(max_length=50)\r\n     contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    \r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n     def __str__(self):\r\n         return self.name\r\n \r\n-\r\n+####     models CustomUsers ########\r\n class CustomUsers(AbstractUser,SafeDeleteModel):\r\n     \r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n@@ -90,9 +92,9 @@\n         user.save()\r\n     \r\n     \r\n \r\n-# Modele de verificacion\r\n+####     models Verificade Code ########\r\n class VerificationCode(models.Model):\r\n     user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n     code = models.CharField(max_length=6)\r\n     created_at = models.DateTimeField(auto_now_add=True)\r\n@@ -102,4 +104,5 @@\n \r\n \r\n \r\n    \r\n+Cla\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738844656891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,15 @@\n \r\n     def __str__(self):\r\n         return f\"{self.user.username} - {self.code}\"\r\n \r\n+##### models Category ########\r\n+class Category (SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n\\ No newline at end of file\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50)\r\n+    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-   \r\n-Cla\n+    def __str__(self):\r\n+        return self.name\r\n+    \r\n"
                },
                {
                    "date": 1738844683417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,5 +111,6 @@\n     history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n-    \n\\ No newline at end of file\n+    \r\n+##\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738844700360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+from django.db import models\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.files.storage import FileSystemStorage\r\n+from django.conf import settings\r\n+import os.path\r\n+import os\r\n+import uuid\r\n+from django.utils import timezone\r\n+import random\r\n+from django_lifecycle import LifecycleModel\r\n+from io import BytesIO\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+from django.dispatch import receiver\r\n+from django.utils.translation import gettext_lazy as _\r\n+from simple_history.models import HistoricalRecords\r\n+from django.core.exceptions import ValidationError\r\n+\r\n+\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                '/medias/'))\r\n+\r\n+####     models contry ########\r\n+class Contry(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50)\r\n+    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+##     models city ########\r\n+class City(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+####     models CustomUsers ########\r\n+class CustomUsers(AbstractUser,SafeDeleteModel):\r\n+    \r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    contry = models.ForeignKey(Contry, on_delete=models)\r\n+    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n+    contact = models.CharField(max_length=10)\r\n+    account_creation_date = models.DateTimeField(default=timezone.now, editable=False)\r\n+    is_online = models.BooleanField(default=False)\r\n+    \r\n+    \r\n+     # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n+\r\n+####     models Verificade Code ########\r\n+class VerificationCode(models.Model):\r\n+    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n+    code = models.CharField(max_length=6)\r\n+    created_at = models.DateTimeField(auto_now_add=True)\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.user.username} - {self.code}\"\r\n+\r\n+##### models Category ########\r\n+class Category (SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50)\r\n+    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+    \r\n+##### models Products ########\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738844724816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,5 +112,5 @@\n \r\n     def __str__(self):\r\n         return self.name\r\n     \r\n-##### models Products ########\n\\ No newline at end of file\n+##### models product ########\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738845239843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,8 @@\n         return self.name\r\n \r\n ####     models CustomUsers ########\r\n class CustomUsers(AbstractUser,SafeDeleteModel):\r\n-    \r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     contry = models.ForeignKey(Contry, on_delete=models)\r\n@@ -94,8 +93,10 @@\n     \r\n \r\n ####     models Verificade Code ########\r\n class VerificationCode(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n     user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n     code = models.CharField(max_length=6)\r\n     created_at = models.DateTimeField(auto_now_add=True)\r\n \r\n@@ -112,5 +113,12 @@\n \r\n     def __str__(self):\r\n         return self.name\r\n     \r\n-##### models product ########\n\\ No newline at end of file\n+##### models product ########\r\n+class Product(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50)\r\n+    description = models.TextField()\r\n+    price = models.FloatField()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738845495619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,121 +120,6 @@\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     name = models.CharField(max_length=50)\r\n     description = models.TextField()\r\n-    price = models.FloatField()\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n-from simple_history.models import HistoricalRecords\r\n-from django.core.exceptions import ValidationError\r\n-\r\n-\r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                '/medias/'))\r\n-\r\n-####     models contry ########\r\n-class Contry(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n-    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-##     models city ########\r\n-class City(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-####     models CustomUsers ########\r\n-class CustomUsers(AbstractUser,SafeDeleteModel):\r\n-    \r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    contry = models.ForeignKey(Contry, on_delete=models)\r\n-    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n-    contact = models.CharField(max_length=10)\r\n-    account_creation_date = models.DateTimeField(default=timezone.now, editable=False)\r\n-    is_online = models.BooleanField(default=False)\r\n-    \r\n-    \r\n-     # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-\r\n-####     models Verificade Code ########\r\n-class VerificationCode(models.Model):\r\n-    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n-    code = models.CharField(max_length=6)\r\n-    created_at = models.DateTimeField(auto_now_add=True)\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.user.username} - {self.code}\"\r\n-\r\n-##### models Category ########\r\n-class Category (SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50)\r\n-    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-    \r\n-##\n\\ No newline at end of file\n+    price = models.FloatField(max_length=5)\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738845620006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n+    name = models.CharField(max_length=50, unique=True, null=True)\r\n     history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n@@ -107,9 +107,9 @@\n class Category (SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50)\r\n+    name = models.CharField(max_length=50, unique=True,)\r\n     history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n"
                },
                {
                    "date": 1738845774493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50, unique=True, null=True)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='name ')\r\n     history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n@@ -37,9 +37,9 @@\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False)\r\n     contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n     history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n@@ -107,9 +107,9 @@\n class Category (SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50, unique=True,)\r\n+    name = models.CharField(max_length=50, unique=True, blank=False)\r\n     history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n@@ -118,8 +118,8 @@\n class Product(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False)\r\n     description = models.TextField()\r\n-    price = models.FloatField(max_length=5)\r\n+    price = models.FloatField(max_length=5,unique=True, blank=False)\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738845912050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='name ')\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n     history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n@@ -36,10 +36,9 @@\n class City(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50,unique=True, blank=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n     contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n     history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n@@ -107,9 +106,9 @@\n class Category (SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50, unique=True, blank=False)\r\n+    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n     history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n@@ -118,8 +117,9 @@\n class Product(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False)\r\n-    description = models.TextField()\r\n-    price = models.FloatField(max_length=5,unique=True, blank=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n+    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n+    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n+    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738845923082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,5 +121,6 @@\n     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n     description = models.TextField(verbose_name=\"description\",max_length=200)\r\n     price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n+    \r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738845943056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,6 +121,6 @@\n     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n     description = models.TextField(verbose_name=\"description\",max_length=200)\r\n     price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-    \r\n+    date_add = models.DateTimeField(auto_now_add=True)\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738845959325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,6 +121,6 @@\n     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n     description = models.TextField(verbose_name=\"description\",max_length=200)\r\n     price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-    date_add = models.DateTimeField(auto_now_add=True)\r\n+    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product')\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738846154442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     contry = models.ForeignKey(Contry, on_delete=models)\r\n     city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n     contact = models.CharField(max_length=10)\r\n-    account_creation_date = models.DateTimeField(default=timezone.now, editable=False)\r\n+    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n     is_online = models.BooleanField(default=False)\r\n     \r\n     \r\n      # Ajout de related_name pour éviter les conflits\r\n@@ -121,6 +121,6 @@\n     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n     description = models.TextField(verbose_name=\"description\",max_length=200)\r\n     price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product')\r\n+    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738851018036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,5 +122,7 @@\n     description = models.TextField(verbose_name=\"description\",max_length=200)\r\n     price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n+    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n+    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738852682868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,11 @@\n     city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n     contact = models.CharField(max_length=10)\r\n     account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n     is_online = models.BooleanField(default=False)\r\n+    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n     \r\n-    \r\n      # Ajout de related_name pour éviter les conflits\r\n     groups = models.ManyToManyField(\r\n         'auth.Group',\r\n         related_name='customuser_set',\r\n@@ -124,5 +125,5 @@\n     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n     quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n     image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n-    \n\\ No newline at end of file\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n"
                },
                {
                    "date": 1738852938637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n class CustomUsers(AbstractUser,SafeDeleteModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    contry = models.ForeignKey(Contry, on_delete=models)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n     city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n     contact = models.CharField(max_length=10)\r\n     account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n     is_online = models.BooleanField(default=False)\r\n"
                },
                {
                    "date": 1738854367470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,4 +126,5 @@\n     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n     quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n     image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738854902102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,5 +126,5 @@\n     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n     quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n     image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \n\\ No newline at end of file\n+    on_sale = models.BooleanField(default=False, verbose_name='Is product on sale?')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738855096052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,5 +126,6 @@\n     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n     quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n     image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    on_sale = models.BooleanField(default=False, verbose_name='Is product on sale?')\n\\ No newline at end of file\n+    on_sale = models.BooleanField(default=False, verbose_name='Is product on sale?')\r\n+    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True, verbose_name='Discount percentage')\r\n"
                },
                {
                    "date": 1738855312029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+from django.db import models\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.files.storage import FileSystemStorage\r\n+from django.conf import settings\r\n+import os.path\r\n+import os\r\n+import uuid\r\n+from django.utils import timezone\r\n+import random\r\n+from django_lifecycle import LifecycleModel\r\n+from io import BytesIO\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+from django.dispatch import receiver\r\n+from django.utils.translation import gettext_lazy as _\r\n+from simple_history.models import HistoricalRecords\r\n+from django.core.exceptions import ValidationError\r\n+\r\n+\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                '/medias/'))\r\n+\r\n+####     models contry ########\r\n+class Contry(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n+    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+##     models city ########\r\n+class City(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+####     models CustomUsers ########\r\n+class CustomUsers(AbstractUser,SafeDeleteModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n+    contact = models.CharField(max_length=10)\r\n+    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n+    is_online = models.BooleanField(default=False)\r\n+    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    \r\n+     # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n+\r\n+####     models Verificade Code ########\r\n+class VerificationCode(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n+    code = models.CharField(max_length=6)\r\n+    created_at = models.DateTimeField(auto_now_add=True)\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.user.username} - {self.code}\"\r\n+\r\n+##### models Category ########\r\n+class Category (SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n+    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+    \r\n+##### models product ########\r\n+class Product(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n+    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n+    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n+    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n+    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n+    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n+    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    # Dropdown list to check if the product is on sale\r\n+    SALE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    on_sale = models.CharField(\r\n+        max_length=3,\r\n+        choices=SALE_CHOICES,\r\n+        default='No',  # By default, the product is not on sale\r\n+        verbose_name='Is the product on sale?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n+    \r\n+    # Optional: field to track the discount percentage\r\n+    discount_percentage = models.DecimalField(\r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        null=True, \r\n+        blank=True, \r\n+        verbose_name='Discount percentage % '\r\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738855404050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,143 +166,12 @@\n         default='No',  # By default, the product is not recommended\r\n         verbose_name='Is the product recommended?'\r\n     )\r\n     \r\n-    # Optional: field to track the discount percentage\r\n+    #field to track the discount percentage\r\n     discount_percentage = models.DecimalField(\r\n         max_digits=5, \r\n         decimal_places=2, \r\n         null=True, \r\n         blank=True, \r\n         verbose_name='Discount percentage % '\r\n-    )\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n-from simple_history.models import HistoricalRecords\r\n-from django.core.exceptions import ValidationError\r\n-\r\n-\r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                '/medias/'))\r\n-\r\n-####     models contry ########\r\n-class Contry(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n-    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-##     models city ########\r\n-class City(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-####     models CustomUsers ########\r\n-class CustomUsers(AbstractUser,SafeDeleteModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n-    contact = models.CharField(max_length=10)\r\n-    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n-    is_online = models.BooleanField(default=False)\r\n-    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    \r\n-     # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-\r\n-####     models Verificade Code ########\r\n-class VerificationCode(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n-    code = models.CharField(max_length=6)\r\n-    created_at = models.DateTimeField(auto_now_add=True)\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.user.username} - {self.code}\"\r\n-\r\n-##### models Category ########\r\n-class Category (SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n-    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-    \r\n-##### models product ########\r\n-class Product(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n-    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n-    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n-    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n-    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n-    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    on_sale = models.BooleanField(default=False, verbose_name='Is product on sale?')\r\n\\ No newline at end of file\n-    discount_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True, verbose_name='Discount percentage')\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738855486644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,5 +173,18 @@\n         decimal_places=2, \r\n         null=True, \r\n         blank=True, \r\n         verbose_name='Discount percentage % '\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n     )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738856052976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,12 @@\n     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n     quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n     image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n+    date_modified = models.DateTimeField(\r\n+        auto_now=True,  # Automatically updates when the product is modified\r\n+        verbose_name='date modified',\r\n+        edit\r\n     # Dropdown list to check if the product is on sale\r\n     SALE_CHOICES = [\r\n         ('No', 'No'),\r\n         ('Yes', 'Yes'),\r\n@@ -186,5 +189,6 @@\n         max_length=3,\r\n         choices=FAVORITE_CHOICES,\r\n         default='No',  # By default, the product is not marked as a favorite\r\n         verbose_name='Is the product a favorite?'\r\n-    )\n\\ No newline at end of file\n+    )\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738856405928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+from django.db import models\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.files.storage import FileSystemStorage\r\n+from django.conf import settings\r\n+import os.path\r\n+import os\r\n+import uuid\r\n+from django.utils import timezone\r\n+import random\r\n+from django_lifecycle import LifecycleModel\r\n+from io import BytesIO\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+from django.dispatch import receiver\r\n+from django.utils.translation import gettext_lazy as _\r\n+from simple_history.models import HistoricalRecords\r\n+from django.core.exceptions import ValidationError\r\n+\r\n+\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                '/medias/'))\r\n+\r\n+####     models contry ########\r\n+class Contry(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n+    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+##     models city ########\r\n+class City(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+####     models CustomUsers ########\r\n+class CustomUsers(AbstractUser,SafeDeleteModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n+    contact = models.CharField(max_length=10)\r\n+    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n+    is_online = models.BooleanField(default=False)\r\n+    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    \r\n+     # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n+\r\n+####     models Verificade Code ########\r\n+class VerificationCode(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n+    code = models.CharField(max_length=6)\r\n+    created_at = models.DateTimeField(auto_now_add=True)\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.user.username} - {self.code}\"\r\n+\r\n+##### models Category ########\r\n+class Category (SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n+    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+    \r\n+##### models product ########\r\n+class Product(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n+    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n+    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n+    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n+    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n+    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n+    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    date_modified = models.DateTimeField(auto_now=True, verbose_name='date modified',editable=False)\r\n+    # Dropdown list to check if the product is on sale\r\n+    SALE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    on_sale = models.CharField(\r\n+        max_length=3,\r\n+        choices=SALE_CHOICES,\r\n+        default='No',  # By default, the product is not on sale\r\n+        verbose_name='Is the product on sale?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n+    \r\n+    #field to track the discount percentage\r\n+    discount_percentage = models.DecimalField(\r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        null=True, \r\n+        blank=True, \r\n+        verbose_name='Discount percentage % '\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return self.name\r\n+    \r\n+\r\n"
                },
                {
                    "date": 1738857118640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,8 +113,10 @@\n \r\n     def __str__(self):\r\n         return self.name\r\n     \r\n+    \r\n+    \r\n ##### models product ########\r\n class Product(SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n"
                },
                {
                    "date": 1738857283898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,10 @@\n     created_at = models.DateTimeField(auto_now_add=True)\r\n \r\n     def __str__(self):\r\n         return f\"{self.user.username} - {self.code}\"\r\n+    \r\n+####     models  ########\r\n \r\n ##### models Category ########\r\n class Category (SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n"
                },
                {
                    "date": 1738857406462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,10 +102,22 @@\n \r\n     def __str__(self):\r\n         return f\"{self.user.username} - {self.code}\"\r\n     \r\n-####     models  ########\r\n+####     models shopping cart ########\r\n \r\n+class ShoppingCart(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n+    total_price = models.FloatField(max_length=5, blank=False)\r\n+    created_at = models.DateTimeField(auto_now_add=True)\r\n+    updated_at = models.DateTimeField(auto_now=True)\r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"Shopping cart of {self.user.username}\"\r\n+\r\n ##### models Category ########\r\n class Category (SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n@@ -196,198 +208,4 @@\n     def __str__(self):\r\n         return self.name\r\n     \r\n \r\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n-from simple_history.models import HistoricalRecords\r\n-from django.core.exceptions import ValidationError\r\n-\r\n-\r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                '/medias/'))\r\n-\r\n-####     models contry ########\r\n-class Contry(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n-    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-##     models city ########\r\n-class City(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-####     models CustomUsers ########\r\n-class CustomUsers(AbstractUser,SafeDeleteModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n-    contact = models.CharField(max_length=10)\r\n-    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n-    is_online = models.BooleanField(default=False)\r\n-    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    \r\n-     # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-\r\n-####     models Verificade Code ########\r\n-class VerificationCode(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n-    code = models.CharField(max_length=6)\r\n-    created_at = models.DateTimeField(auto_now_add=True)\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.user.username} - {self.code}\"\r\n-\r\n-##### models Category ########\r\n-class Category (SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n-    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-    \r\n-##### models product ########\r\n-class Product(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n-    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n-    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n-    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n-    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n-    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    date_modified = models.DateTimeField(\r\n-        auto_now=True,  # Automatically updates when the product is modified\r\n-        verbose_name='date modified',\r\n-        edit\r\n-    # Dropdown list to check if the product is on sale\r\n-    SALE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    on_sale = models.CharField(\r\n-        max_length=3,\r\n-        choices=SALE_CHOICES,\r\n-        default='No',  # By default, the product is not on sale\r\n-        verbose_name='Is the product on sale?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a best seller\r\n-    BESTSELLER_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    bestseller = models.CharField(\r\n-        max_length=3,\r\n-        choices=BESTSELLER_CHOICES,\r\n-        default='No',  # By default, the product is not a best seller\r\n-        verbose_name='Is the product a best seller?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    recommended = models.CharField(\r\n-        max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n-    )\r\n-    \r\n-    #field to track the discount percentage\r\n-    discount_percentage = models.DecimalField(\r\n-        max_digits=5, \r\n-        decimal_places=2, \r\n-        null=True, \r\n-        blank=True, \r\n-        verbose_name='Discount percentage % '\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n-    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738857491807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,12 +108,12 @@\n class ShoppingCart(models.Model):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n-    total_price = models.FloatField(max_length=5, blank=False)\r\n-    created_at = models.DateTimeField(auto_now_add=True)\r\n-    updated_at = models.DateTimeField(auto_now=True)\r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n+    created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n+    updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n     \r\n     def __str__(self):\r\n         return f\"Shopping cart of {self.user.username}\"\r\n \r\n"
                },
                {
                    "date": 1738857526183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,9 @@\n \r\n class ShoppingCart(models.Model):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n     user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n     total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n     created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n     updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n"
                },
                {
                    "date": 1738857576687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,20 +104,8 @@\n         return f\"{self.user.username} - {self.code}\"\r\n     \r\n ####     models shopping cart ########\r\n \r\n-class ShoppingCart(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n-    total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n-    created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n-    updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n-    \r\n-    def __str__(self):\r\n-        return f\"Shopping cart of {self.user.username}\"\r\n \r\n ##### models Category ########\r\n class Category (SafeDeleteModel,LifecycleModel):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n@@ -209,4 +197,17 @@\n     def __str__(self):\r\n         return self.name\r\n     \r\n \r\n+class ShoppingCart(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n+    total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n+    product=models.ForeignKey(Product, on_delete=models.CASCADE)\r\n+    created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n+    updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n+    \r\n+    def __str__(self):\r\n+        return f\"Shopping cart of {self.user.username}\"\r\n"
                },
                {
                    "date": 1738857623616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,8 @@\n \r\n     def __str__(self):\r\n         return f\"{self.user.username} - {self.code}\"\r\n     \r\n-####     models shopping cart ########\r\n \r\n \r\n ##### models Category ########\r\n class Category (SafeDeleteModel,LifecycleModel):\r\n@@ -196,9 +195,9 @@\n     \r\n     def __str__(self):\r\n         return self.name\r\n     \r\n-\r\n+####     models shopping cart ########\r\n class ShoppingCart(models.Model):\r\n     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n"
                },
                {
                    "date": 1738857662632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,4 +209,7 @@\n     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n     \r\n     def __str__(self):\r\n         return f\"Shopping cart of {self.user.username}\"\r\n+\r\n+\r\n+##### class \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738858123528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,6 +210,43 @@\n     \r\n     def __str__(self):\r\n         return f\"Shopping cart of {self.user.username}\"\r\n \r\n+####     models order ########\r\n \r\n\\ No newline at end of file\n-##### class \n+class Order(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    ORDER_STATUS_CHOICES = [\r\n+        ('Pending', 'Pending'),\r\n+        ('Processing', 'Processing'),\r\n+        ('Shipped', 'Shipped'),\r\n+        ('Delivered', 'Delivered'),\r\n+        ('Canceled', 'Canceled'),\r\n+    ]\r\n+    \r\n+    \r\n+\r\n+    id = models.UUIDField(\"Order ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)  # Linking the order to a user\r\n+    products = models.ManyToManyField(Product, through='OrderProduct')  # Linking products to the order\r\n+    total_price = models.DecimalField(max_digits=10, decimal_places=2)  # Total price of the order\r\n+    status = models.CharField(max_length=10, choices=ORDER_STATUS_CHOICES, default='Pending')  # Order status\r\n+    shipping_address = models.TextField()  # Shipping address for the order\r\n+    created_at = models.DateTimeField(auto_now_add=True)  # Order creation date\r\n+    updated_at = models.DateTimeField(auto_now=True)  # Order last update date\r\n+    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return f\"Order {self.id} by {self.user.username}\"\r\n+\r\n+####     models OrderProduct ########\r\n+class OrderProduct(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    \r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n+    quantity = models.PositiveIntegerField()  # Quantity of the product in the order\r\n+    price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n+    history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    def __str__(self):\r\n+        return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n"
                },
                {
                    "date": 1738860047273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,252 +1,252 @@\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n-from simple_history.models import HistoricalRecords\r\n-from django.core.exceptions import ValidationError\r\n+# from django.db import models\r\n+# from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+# from django.contrib.auth.models import AbstractUser\r\n+# from django.core.files.storage import FileSystemStorage\r\n+# from django.conf import settings\r\n+# import os.path\r\n+# import os\r\n+# import uuid\r\n+# from django.utils import timezone\r\n+# import random\r\n+# from django_lifecycle import LifecycleModel\r\n+# from io import BytesIO\r\n+# from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+# from django.dispatch import receiver\r\n+# from django.utils.translation import gettext_lazy as _\r\n+# from simple_history.models import HistoricalRecords\r\n+# from django.core.exceptions import ValidationError\r\n \r\n \r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                '/medias/'))\r\n+# imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+#                                                 '/medias/'))\r\n \r\n-####     models contry ########\r\n-class Contry(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ####     models contry ########\r\n+# class Contry(SafeDeleteModel,LifecycleModel):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n-    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+#     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n+#     history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-    def __str__(self):\r\n-        return self.name\r\n+#     def __str__(self):\r\n+#         return self.name\r\n \r\n-##     models city ########\r\n-class City(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ##     models city ########\r\n+# class City(SafeDeleteModel,LifecycleModel):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n+#     contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+#     history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-    def __str__(self):\r\n-        return self.name\r\n+#     def __str__(self):\r\n+#         return self.name\r\n \r\n-####     models CustomUsers ########\r\n-class CustomUsers(AbstractUser,SafeDeleteModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ####     models CustomUsers ########\r\n+# class CustomUsers(AbstractUser,SafeDeleteModel):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n-    contact = models.CharField(max_length=10)\r\n-    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n-    is_online = models.BooleanField(default=False)\r\n-    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+#     city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n+#     contact = models.CharField(max_length=10)\r\n+#     account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n+#     is_online = models.BooleanField(default=False)\r\n+#     history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     \r\n-     # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n+#      # Ajout de related_name pour éviter les conflits\r\n+#     groups = models.ManyToManyField(\r\n+#         'auth.Group',\r\n+#         related_name='customuser_set',\r\n+#         related_query_name='customuser',\r\n+#         blank=True,\r\n+#         help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+#         verbose_name='groups',\r\n+#     )\r\n+#     user_permissions = models.ManyToManyField(\r\n+#         'auth.Permission',\r\n+#         related_name='customuser_set',\r\n+#         related_query_name='customuser',\r\n+#         blank=True,\r\n+#         help_text='Specific permissions for this user.',\r\n+#         verbose_name='user permissions',\r\n+#     )\r\n     \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n+#     def __str__(self):\r\n+#         return f\"{self.username}\"\r\n \r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n+#     # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+#     @receiver(user_logged_in)\r\n+#     def user_logged_in_handler(sender, request, user, **kwargs):\r\n+#         user.is_online = True\r\n+#         user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+#         user.save()\r\n \r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n+#     @receiver(user_logged_out)\r\n+#     def user_logged_out_handler(sender, request, user, **kwargs):\r\n+#         user.is_online = False\r\n+#         user.save()\r\n     \r\n     \r\n \r\n-####     models Verificade Code ########\r\n-class VerificationCode(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ####     models Verificade Code ########\r\n+# class VerificationCode(models.Model):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n-    code = models.CharField(max_length=6)\r\n-    created_at = models.DateTimeField(auto_now_add=True)\r\n+#     user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n+#     code = models.CharField(max_length=6)\r\n+#     created_at = models.DateTimeField(auto_now_add=True)\r\n \r\n-    def __str__(self):\r\n-        return f\"{self.user.username} - {self.code}\"\r\n+#     def __str__(self):\r\n+#         return f\"{self.user.username} - {self.code}\"\r\n     \r\n \r\n \r\n-##### models Category ########\r\n-class Category (SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ##### models Category ########\r\n+# class Category (SafeDeleteModel,LifecycleModel):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n-    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n+#     history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-    def __str__(self):\r\n-        return self.name\r\n+#     def __str__(self):\r\n+#         return self.name\r\n     \r\n     \r\n     \r\n-##### models product ########\r\n-class Product(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ##### models product ########\r\n+# class Product(SafeDeleteModel,LifecycleModel):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n-    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n-    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n-    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n-    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n-    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    date_modified = models.DateTimeField(auto_now=True, verbose_name='date modified',editable=False)\r\n-    # Dropdown list to check if the product is on sale\r\n-    SALE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n+#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n+#     description = models.TextField(verbose_name=\"description\",max_length=200)\r\n+#     price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n+#     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n+#     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n+#     quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n+#     image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n+#     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+#     date_modified = models.DateTimeField(auto_now=True, verbose_name='date modified',editable=False)\r\n+#     # Dropdown list to check if the product is on sale\r\n+#     SALE_CHOICES = [\r\n+#         ('No', 'No'),\r\n+#         ('Yes', 'Yes'),\r\n+#     ]\r\n     \r\n-    on_sale = models.CharField(\r\n-        max_length=3,\r\n\\ No newline at end of file\n-        choices=SALE_CHOICES,\r\n-        default='No',  # By default, the product is not on sale\r\n-        verbose_name='Is the product on sale?'\r\n-    )\r\n+#     on_sale = models.CharField(\r\n+#         max_length=3,\r\n+#         choices=SALE_CHOICES,\r\n+#         default='No',  # By default, the product is not on sale\r\n+#         verbose_name='Is the product on sale?'\r\n+#     )\r\n     \r\n-    # Dropdown list to check if the product is a best seller\r\n-    BESTSELLER_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n+#     # Dropdown list to check if the product is a best seller\r\n+#     BESTSELLER_CHOICES = [\r\n+#         ('No', 'No'),\r\n+#         ('Yes', 'Yes'),\r\n+#     ]\r\n     \r\n-    bestseller = models.CharField(\r\n-        max_length=3,\r\n-        choices=BESTSELLER_CHOICES,\r\n-        default='No',  # By default, the product is not a best seller\r\n-        verbose_name='Is the product a best seller?'\r\n-    )\r\n+#     bestseller = models.CharField(\r\n+#         max_length=3,\r\n+#         choices=BESTSELLER_CHOICES,\r\n+#         default='No',  # By default, the product is not a best seller\r\n+#         verbose_name='Is the product a best seller?'\r\n+#     )\r\n     \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n+#     # Dropdown list to check if the product is recommended\r\n+#     RECOMMENDED_CHOICES = [\r\n+#         ('No', 'No'),\r\n+#         ('Yes', 'Yes'),\r\n+#     ]\r\n     \r\n-    recommended = models.CharField(\r\n-        max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n-    )\r\n+#     recommended = models.CharField(\r\n+#         max_length=3,\r\n+#         choices=RECOMMENDED_CHOICES,\r\n+#         default='No',  # By default, the product is not recommended\r\n+#         verbose_name='Is the product recommended?'\r\n+#     )\r\n     \r\n-    #field to track the discount percentage\r\n-    discount_percentage = models.DecimalField(\r\n-        max_digits=5, \r\n-        decimal_places=2, \r\n-        null=True, \r\n-        blank=True, \r\n-        verbose_name='Discount percentage % '\r\n-    )\r\n+#     #field to track the discount percentage\r\n+#     discount_percentage = models.DecimalField(\r\n+#         max_digits=5, \r\n+#         decimal_places=2, \r\n+#         null=True, \r\n+#         blank=True, \r\n+#         verbose_name='Discount percentage % '\r\n+#     )\r\n     \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n+#     # Dropdown list to check if the product is a favorite\r\n+#     FAVORITE_CHOICES = [\r\n+#         ('No', 'No'),\r\n+#         ('Yes', 'Yes'),\r\n+#     ]\r\n     \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n+#     favorite = models.CharField(\r\n+#         max_length=3,\r\n+#         choices=FAVORITE_CHOICES,\r\n+#         default='No',  # By default, the product is not marked as a favorite\r\n+#         verbose_name='Is the product a favorite?'\r\n+#     )\r\n     \r\n-    def __str__(self):\r\n-        return self.name\r\n+#     def __str__(self):\r\n+#         return self.name\r\n     \r\n-####     models shopping cart ########\r\n-class ShoppingCart(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ####     models shopping cart ########\r\n+# class ShoppingCart(models.Model):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n-    total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n-    product=models.ForeignKey(Product, on_delete=models.CASCADE)\r\n-    created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n-    updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n+#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n+#     total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n+#     product=models.ForeignKey(Product, on_delete=models.CASCADE)\r\n+#     created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n+#     updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n+#     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n     \r\n-    def __str__(self):\r\n-        return f\"Shopping cart of {self.user.username}\"\r\n+#     def __str__(self):\r\n+#         return f\"Shopping cart of {self.user.username}\"\r\n \r\n-####     models order ########\r\n+# ####     models order ########\r\n \r\n-class Order(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    ORDER_STATUS_CHOICES = [\r\n-        ('Pending', 'Pending'),\r\n-        ('Processing', 'Processing'),\r\n-        ('Shipped', 'Shipped'),\r\n-        ('Delivered', 'Delivered'),\r\n-        ('Canceled', 'Canceled'),\r\n-    ]\r\n+# class Order(models.Model):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+#     ORDER_STATUS_CHOICES = [\r\n+#         ('Pending', 'Pending'),\r\n+#         ('Processing', 'Processing'),\r\n+#         ('Shipped', 'Shipped'),\r\n+#         ('Delivered', 'Delivered'),\r\n+#         ('Canceled', 'Canceled'),\r\n+#     ]\r\n     \r\n     \r\n \r\n-    id = models.UUIDField(\"Order ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)  # Linking the order to a user\r\n-    products = models.ManyToManyField(Product, through='OrderProduct')  # Linking products to the order\r\n-    total_price = models.DecimalField(max_digits=10, decimal_places=2)  # Total price of the order\r\n-    status = models.CharField(max_length=10, choices=ORDER_STATUS_CHOICES, default='Pending')  # Order status\r\n-    shipping_address = models.TextField()  # Shipping address for the order\r\n-    created_at = models.DateTimeField(auto_now_add=True)  # Order creation date\r\n-    updated_at = models.DateTimeField(auto_now=True)  # Order last update date\r\n-    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+#     id = models.UUIDField(\"Order ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)  # Linking the order to a user\r\n+#     products = models.ManyToManyField(Product, through='OrderProduct')  # Linking products to the order\r\n+#     total_price = models.DecimalField(max_digits=10, decimal_places=2)  # Total price of the order\r\n+#     status = models.CharField(max_length=10, choices=ORDER_STATUS_CHOICES, default='Pending')  # Order status\r\n+#     shipping_address = models.TextField()  # Shipping address for the order\r\n+#     created_at = models.DateTimeField(auto_now_add=True)  # Order creation date\r\n+#     updated_at = models.DateTimeField(auto_now=True)  # Order last update date\r\n+#     history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-    def __str__(self):\r\n-        return f\"Order {self.id} by {self.user.username}\"\r\n+#     def __str__(self):\r\n+#         return f\"Order {self.id} by {self.user.username}\"\r\n \r\n-####     models OrderProduct ########\r\n-class OrderProduct(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+# ####     models OrderProduct ########\r\n+# class OrderProduct(models.Model):\r\n+#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n-    product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n-    quantity = models.PositiveIntegerField()  # Quantity of the product in the order\r\n-    price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n-    history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    def __str__(self):\r\n-        return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\n+#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+#     order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n+#     product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n+#     quantity = models.PositiveIntegerField()  # Quantity of the product in the order\r\n+#     price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n+#     history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+#     def __str__(self):\r\n+#         return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n"
                },
                {
                    "date": 1738860070687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,252 +1,252 @@\n-# from django.db import models\r\n-# from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-# from django.contrib.auth.models import AbstractUser\r\n-# from django.core.files.storage import FileSystemStorage\r\n-# from django.conf import settings\r\n-# import os.path\r\n-# import os\r\n-# import uuid\r\n-# from django.utils import timezone\r\n-# import random\r\n-# from django_lifecycle import LifecycleModel\r\n-# from io import BytesIO\r\n-# from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-# from django.dispatch import receiver\r\n-# from django.utils.translation import gettext_lazy as _\r\n-# from simple_history.models import HistoricalRecords\r\n-# from django.core.exceptions import ValidationError\r\n+from django.db import models\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.files.storage import FileSystemStorage\r\n+from django.conf import settings\r\n+import os.path\r\n+import os\r\n+import uuid\r\n+from django.utils import timezone\r\n+import random\r\n+from django_lifecycle import LifecycleModel\r\n+from io import BytesIO\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+from django.dispatch import receiver\r\n+from django.utils.translation import gettext_lazy as _\r\n+from simple_history.models import HistoricalRecords\r\n+from django.core.exceptions import ValidationError\r\n \r\n \r\n-# imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-#                                                 '/medias/'))\r\n+imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n+                                                '/medias/'))\r\n \r\n-# ####     models contry ########\r\n-# class Contry(SafeDeleteModel,LifecycleModel):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+####     models contry ########\r\n+class Contry(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-#     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n-#     history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n+    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-#     def __str__(self):\r\n-#         return self.name\r\n+    def __str__(self):\r\n+        return self.name\r\n \r\n-# ##     models city ########\r\n-# class City(SafeDeleteModel,LifecycleModel):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+##     models city ########\r\n+class City(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n-#     contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-#     history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-#     def __str__(self):\r\n-#         return self.name\r\n+    def __str__(self):\r\n+        return self.name\r\n \r\n-# ####     models CustomUsers ########\r\n-# class CustomUsers(AbstractUser,SafeDeleteModel):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+####     models CustomUsers ########\r\n+class CustomUsers(AbstractUser,SafeDeleteModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-#     city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n-#     contact = models.CharField(max_length=10)\r\n-#     account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n-#     is_online = models.BooleanField(default=False)\r\n-#     history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n+    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n+    contact = models.CharField(max_length=10)\r\n+    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n+    is_online = models.BooleanField(default=False)\r\n+    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     \r\n-#      # Ajout de related_name pour éviter les conflits\r\n-#     groups = models.ManyToManyField(\r\n-#         'auth.Group',\r\n-#         related_name='customuser_set',\r\n-#         related_query_name='customuser',\r\n-#         blank=True,\r\n-#         help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-#         verbose_name='groups',\r\n-#     )\r\n-#     user_permissions = models.ManyToManyField(\r\n-#         'auth.Permission',\r\n-#         related_name='customuser_set',\r\n-#         related_query_name='customuser',\r\n-#         blank=True,\r\n-#         help_text='Specific permissions for this user.',\r\n-#         verbose_name='user permissions',\r\n-#     )\r\n+     # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n     \r\n-#     def __str__(self):\r\n-#         return f\"{self.username}\"\r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n \r\n-#     # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-#     @receiver(user_logged_in)\r\n-#     def user_logged_in_handler(sender, request, user, **kwargs):\r\n-#         user.is_online = True\r\n-#         user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-#         user.save()\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n \r\n-#     @receiver(user_logged_out)\r\n-#     def user_logged_out_handler(sender, request, user, **kwargs):\r\n-#         user.is_online = False\r\n-#         user.save()\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n     \r\n     \r\n \r\n-# ####     models Verificade Code ########\r\n-# class VerificationCode(models.Model):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+####     models Verificade Code ########\r\n+class VerificationCode(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-#     user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n-#     code = models.CharField(max_length=6)\r\n-#     created_at = models.DateTimeField(auto_now_add=True)\r\n+    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n+    code = models.CharField(max_length=6)\r\n+    created_at = models.DateTimeField(auto_now_add=True)\r\n \r\n-#     def __str__(self):\r\n-#         return f\"{self.user.username} - {self.code}\"\r\n+    def __str__(self):\r\n+        return f\"{self.user.username} - {self.code}\"\r\n     \r\n \r\n \r\n-# ##### models Category ########\r\n-# class Category (SafeDeleteModel,LifecycleModel):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+##### models Category ########\r\n+class Category (SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n \r\n-#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n-#     history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n+    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-#     def __str__(self):\r\n-#         return self.name\r\n+    def __str__(self):\r\n+        return self.name\r\n     \r\n     \r\n     \r\n-# ##### models product ########\r\n-# class Product(SafeDeleteModel,LifecycleModel):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+##### models product ########\r\n+class Product(SafeDeleteModel,LifecycleModel):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n-#     description = models.TextField(verbose_name=\"description\",max_length=200)\r\n-#     price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n-#     category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-#     date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n-#     quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n-#     image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n-#     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-#     date_modified = models.DateTimeField(auto_now=True, verbose_name='date modified',editable=False)\r\n-#     # Dropdown list to check if the product is on sale\r\n-#     SALE_CHOICES = [\r\n-#         ('No', 'No'),\r\n-#         ('Yes', 'Yes'),\r\n-#     ]\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n+    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n+    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n+    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n+    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n+    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n+    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    date_modified = models.DateTimeField(auto_now=True, verbose_name='date modified',editable=False)\r\n+    # Dropdown list to check if the product is on sale\r\n+    SALE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n     \r\n-#     on_sale = models.CharField(\r\n-#         max_length=3,\r\n-#         choices=SALE_CHOICES,\r\n-#         default='No',  # By default, the product is not on sale\r\n-#         verbose_name='Is the product on sale?'\r\n-#     )\r\n+    on_sale = models.CharField(\r\n+        max_length=3,\r\n+        choices=SALE_CHOICES,\r\n+        default='No',  # By default, the product is not on sale\r\n+        verbose_name='Is the product on sale?'\r\n+    )\r\n     \r\n-#     # Dropdown list to check if the product is a best seller\r\n-#     BESTSELLER_CHOICES = [\r\n-#         ('No', 'No'),\r\n-#         ('Yes', 'Yes'),\r\n-#     ]\r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n     \r\n-#     bestseller = models.CharField(\r\n-#         max_length=3,\r\n-#         choices=BESTSELLER_CHOICES,\r\n-#         default='No',  # By default, the product is not a best seller\r\n-#         verbose_name='Is the product a best seller?'\r\n-#     )\r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n     \r\n-#     # Dropdown list to check if the product is recommended\r\n-#     RECOMMENDED_CHOICES = [\r\n-#         ('No', 'No'),\r\n-#         ('Yes', 'Yes'),\r\n-#     ]\r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n     \r\n-#     recommended = models.CharField(\r\n-#         max_length=3,\r\n-#         choices=RECOMMENDED_CHOICES,\r\n-#         default='No',  # By default, the product is not recommended\r\n-#         verbose_name='Is the product recommended?'\r\n-#     )\r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n     \r\n-#     #field to track the discount percentage\r\n-#     discount_percentage = models.DecimalField(\r\n-#         max_digits=5, \r\n-#         decimal_places=2, \r\n-#         null=True, \r\n-#         blank=True, \r\n-#         verbose_name='Discount percentage % '\r\n-#     )\r\n+    #field to track the discount percentage\r\n+    discount_percentage = models.DecimalField(\r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        null=True, \r\n+        blank=True, \r\n+        verbose_name='Discount percentage % '\r\n+    )\r\n     \r\n-#     # Dropdown list to check if the product is a favorite\r\n-#     FAVORITE_CHOICES = [\r\n-#         ('No', 'No'),\r\n-#         ('Yes', 'Yes'),\r\n-#     ]\r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n     \r\n-#     favorite = models.CharField(\r\n-#         max_length=3,\r\n-#         choices=FAVORITE_CHOICES,\r\n-#         default='No',  # By default, the product is not marked as a favorite\r\n-#         verbose_name='Is the product a favorite?'\r\n-#     )\r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n+    )\r\n     \r\n-#     def __str__(self):\r\n-#         return self.name\r\n+    def __str__(self):\r\n+        return self.name\r\n     \r\n-# ####     models shopping cart ########\r\n-# class ShoppingCart(models.Model):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+####     models shopping cart ########\r\n+class ShoppingCart(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n-#     total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n-#     product=models.ForeignKey(Product, on_delete=models.CASCADE)\r\n-#     created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n-#     updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n-#     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n+    total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n+    product=models.ForeignKey(Product, on_delete=models.CASCADE)\r\n+    created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n+    updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n     \r\n-#     def __str__(self):\r\n-#         return f\"Shopping cart of {self.user.username}\"\r\n+    def __str__(self):\r\n+        return f\"Shopping cart of {self.user.username}\"\r\n \r\n-# ####     models order ########\r\n+####     models order ########\r\n \r\n-# class Order(models.Model):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n-#     ORDER_STATUS_CHOICES = [\r\n-#         ('Pending', 'Pending'),\r\n-#         ('Processing', 'Processing'),\r\n-#         ('Shipped', 'Shipped'),\r\n-#         ('Delivered', 'Delivered'),\r\n-#         ('Canceled', 'Canceled'),\r\n-#     ]\r\n+class Order(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+    ORDER_STATUS_CHOICES = [\r\n+        ('Pending', 'Pending'),\r\n+        ('Processing', 'Processing'),\r\n+        ('Shipped', 'Shipped'),\r\n+        ('Delivered', 'Delivered'),\r\n+        ('Canceled', 'Canceled'),\r\n+    ]\r\n     \r\n     \r\n \r\n-#     id = models.UUIDField(\"Order ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)  # Linking the order to a user\r\n-#     products = models.ManyToManyField(Product, through='OrderProduct')  # Linking products to the order\r\n-#     total_price = models.DecimalField(max_digits=10, decimal_places=2)  # Total price of the order\r\n-#     status = models.CharField(max_length=10, choices=ORDER_STATUS_CHOICES, default='Pending')  # Order status\r\n-#     shipping_address = models.TextField()  # Shipping address for the order\r\n-#     created_at = models.DateTimeField(auto_now_add=True)  # Order creation date\r\n-#     updated_at = models.DateTimeField(auto_now=True)  # Order last update date\r\n-#     history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    id = models.UUIDField(\"Order ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)  # Linking the order to a user\r\n+    products = models.ManyToManyField(Product, through='OrderProduct')  # Linking products to the order\r\n+    total_price = models.DecimalField(max_digits=10, decimal_places=2)  # Total price of the order\r\n+    status = models.CharField(max_length=10, choices=ORDER_STATUS_CHOICES, default='Pending')  # Order status\r\n+    shipping_address = models.TextField()  # Shipping address for the order\r\n+    created_at = models.DateTimeField(auto_now_add=True)  # Order creation date\r\n+    updated_at = models.DateTimeField(auto_now=True)  # Order last update date\r\n+    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-#     def __str__(self):\r\n-#         return f\"Order {self.id} by {self.user.username}\"\r\n+    def __str__(self):\r\n+        return f\"Order {self.id} by {self.user.username}\"\r\n \r\n-# ####     models OrderProduct ########\r\n-# class OrderProduct(models.Model):\r\n-#     _safedelete_policy = SOFT_DELETE_CASCADE\r\n+####     models OrderProduct ########\r\n+class OrderProduct(models.Model):\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n     \r\n-#     id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-#     order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n-#     product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n-#     quantity = models.PositiveIntegerField()  # Quantity of the product in the order\r\n-#     price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n-#     history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-#     def __str__(self):\r\n-#         return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n+    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n+    order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n+    quantity = models.PositiveIntegerField()  # Quantity of the product in the order\r\n+    price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n+    history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    def __str__(self):\r\n+        return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n"
                },
                {
                    "date": 1738860090128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,252 +0,0 @@\n-from django.db import models\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.files.storage import FileSystemStorage\r\n-from django.conf import settings\r\n-import os.path\r\n-import os\r\n-import uuid\r\n-from django.utils import timezone\r\n-import random\r\n-from django_lifecycle import LifecycleModel\r\n-from io import BytesIO\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-from django.dispatch import receiver\r\n-from django.utils.translation import gettext_lazy as _\r\n-from simple_history.models import HistoricalRecords\r\n-from django.core.exceptions import ValidationError\r\n-\r\n-\r\n-imageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n-                                                '/medias/'))\r\n-\r\n-####     models contry ########\r\n-class Contry(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n-    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-##     models city ########\r\n-class City(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-####     models CustomUsers ########\r\n-class CustomUsers(AbstractUser,SafeDeleteModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n-    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n-    contact = models.CharField(max_length=10)\r\n-    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n-    is_online = models.BooleanField(default=False)\r\n-    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    \r\n-     # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-\r\n-####     models Verificade Code ########\r\n-class VerificationCode(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n-    code = models.CharField(max_length=6)\r\n-    created_at = models.DateTimeField(auto_now_add=True)\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.user.username} - {self.code}\"\r\n-    \r\n-\r\n-\r\n-##### models Category ########\r\n-class Category (SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n-    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-    \r\n-    \r\n-    \r\n-##### models product ########\r\n-class Product(SafeDeleteModel,LifecycleModel):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n-    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n-    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n-    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n-    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n-    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n-    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    date_modified = models.DateTimeField(auto_now=True, verbose_name='date modified',editable=False)\r\n-    # Dropdown list to check if the product is on sale\r\n-    SALE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    on_sale = models.CharField(\r\n-        max_length=3,\r\n-        choices=SALE_CHOICES,\r\n-        default='No',  # By default, the product is not on sale\r\n-        verbose_name='Is the product on sale?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a best seller\r\n-    BESTSELLER_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    bestseller = models.CharField(\r\n-        max_length=3,\r\n-        choices=BESTSELLER_CHOICES,\r\n-        default='No',  # By default, the product is not a best seller\r\n-        verbose_name='Is the product a best seller?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    recommended = models.CharField(\r\n-        max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n-    )\r\n-    \r\n-    #field to track the discount percentage\r\n-    discount_percentage = models.DecimalField(\r\n-        max_digits=5, \r\n-        decimal_places=2, \r\n-        null=True, \r\n-        blank=True, \r\n-        verbose_name='Discount percentage % '\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return self.name\r\n-    \r\n-####     models shopping cart ########\r\n-class ShoppingCart(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n-    total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n-    product=models.ForeignKey(Product, on_delete=models.CASCADE)\r\n-    created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n-    updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n-    \r\n-    def __str__(self):\r\n-        return f\"Shopping cart of {self.user.username}\"\r\n-\r\n-####     models order ########\r\n-\r\n-class Order(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    ORDER_STATUS_CHOICES = [\r\n-        ('Pending', 'Pending'),\r\n-        ('Processing', 'Processing'),\r\n-        ('Shipped', 'Shipped'),\r\n-        ('Delivered', 'Delivered'),\r\n-        ('Canceled', 'Canceled'),\r\n-    ]\r\n-    \r\n-    \r\n-\r\n-    id = models.UUIDField(\"Order ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)  # Linking the order to a user\r\n-    products = models.ManyToManyField(Product, through='OrderProduct')  # Linking products to the order\r\n-    total_price = models.DecimalField(max_digits=10, decimal_places=2)  # Total price of the order\r\n-    status = models.CharField(max_length=10, choices=ORDER_STATUS_CHOICES, default='Pending')  # Order status\r\n-    shipping_address = models.TextField()  # Shipping address for the order\r\n-    created_at = models.DateTimeField(auto_now_add=True)  # Order creation date\r\n-    updated_at = models.DateTimeField(auto_now=True)  # Order last update date\r\n-    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return f\"Order {self.id} by {self.user.username}\"\r\n-\r\n-####     models OrderProduct ########\r\n-class OrderProduct(models.Model):\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-    \r\n-    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n-    order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n-    product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n-    quantity = models.PositiveIntegerField()  # Quantity of the product in the order\r\n-    price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n-    history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    def __str__(self):\r\n-        return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738860103469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1 @@\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738860117439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,260 @@\n- \n\\ No newline at end of file\n+from django.db import models\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.validators import MinValueValidator, MaxValueValidator\r\n+from django.utils import timezone\r\n+from django.utils.translation import gettext_lazy as _\r\n+from django.core.exceptions import ValidationError\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+import uuid\r\n+import os\r\n+\r\n+class BaseModel(SafeDeleteModel):\r\n+    id = models.UUIDField(\r\n+        _(\"Unique Identifier\"), \r\n+        primary_key=True, \r\n+        default=uuid.uuid4, \r\n+        editable=False\r\n+    )\r\n+    created_at = models.DateTimeField(\r\n+        _(\"Creation Timestamp\"), \r\n+        auto_now_add=True\r\n+    )\r\n+    updated_at = models.DateTimeField(\r\n+        _(\"Last Update Timestamp\"), \r\n+        auto_now=True\r\n+    )\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    class Meta:\r\n+        abstract = True\r\n+\r\n+class Country(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"Country Name\"), \r\n+        max_length=100, \r\n+        unique=True\r\n+    )\r\n+    code = models.CharField(\r\n+        _(\"Country Code\"), \r\n+        max_length=3, \r\n+        unique=True\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+class City(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"City Name\"), \r\n+        max_length=100\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='cities',\r\n+        verbose_name=_(\"Associated Country\")\r\n+    )\r\n+    \r\n+    class Meta:\r\n+        unique_together = ['name', 'country']\r\n+        verbose_name = _(\"City\")\r\n+        verbose_name_plural = _(\"Cities\")\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.name}, {self.country.name}\"\r\n+\r\n+class CustomUser(AbstractUser, BaseModel):\r\n+    GENDER_CHOICES = [\r\n+        ('M', _('Male')),\r\n+        ('F', _('Female')),\r\n+        ('O', _('Other'))\r\n+    ]\r\n+\r\n+    phone = models.CharField(\r\n+        _(\"Phone Number\"), \r\n+        max_length=15, \r\n+        blank=True\r\n+    )\r\n+    gender = models.CharField(\r\n+        _(\"Gender\"), \r\n+        max_length=1, \r\n+        choices=GENDER_CHOICES, \r\n+        blank=True\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User Country\")\r\n+    )\r\n+    city = models.ForeignKey(\r\n+        City, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User City\")\r\n+    )\r\n+    \r\n+    is_online = models.BooleanField(\r\n+        _(\"Online Status\"), \r\n+        default=False\r\n+    )\r\n+    last_activity = models.DateTimeField(\r\n+        _(\"Last Activity Timestamp\"), \r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+\r\n+class Category(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"Category Name\"), \r\n+        max_length=100, \r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Category Description\"), \r\n+        blank=True\r\n+    )\r\n+    parent = models.ForeignKey(\r\n+        'self', \r\n+        null=True, \r\n+        blank=True, \r\n+        on_delete=models.SET_NULL, \r\n+        related_name='subcategories',\r\n+        verbose_name=_(\"Parent Category\")\r\n+    )\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+class Product(BaseModel):\r\n+    STATUS_CHOICES = [\r\n+        ('available', _('Available')),\r\n+        ('out_of_stock', _('Out of Stock')),\r\n+        ('discontinued', _('Discontinued'))\r\n+    ]\r\n+\r\n+    name = models.CharField(\r\n+        _(\"Product Name\"), \r\n+        max_length=200, \r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Product Description\")\r\n+    )\r\n+    category = models.ForeignKey(\r\n+        Category, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='products',\r\n+        verbose_name=_(\"Product Category\")\r\n+    )\r\n+    \r\n+    price = models.DecimalField(\r\n+        _(\"Product Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0.01)]\r\n+    )\r\n+    discount_percentage = models.DecimalField(\r\n+        _(\"Discount Percentage\"), \r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    stock_quantity = models.PositiveIntegerField(\r\n+        _(\"Stock Quantity\"), \r\n+        default=0\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Product Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='available'\r\n+    )\r\n+    \r\n+    image = models.ImageField(\r\n+        _(\"Product Image\"), \r\n+        upload_to='products/', \r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+\r\n+class ShoppingCart(BaseModel):\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Cart Owner\")\r\n+    )\r\n+    is_active = models.BooleanField(\r\n+        _(\"Cart Active Status\"), \r\n+        default=True\r\n+    )\r\n+\r\n+class CartItem(BaseModel):\r\n+    cart = models.ForeignKey(\r\n+        ShoppingCart, \r\n+        related_name='cart_items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Shopping Cart\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\"), \r\n+        default=1\r\n+    )\r\n+\r\n+class Order(BaseModel):\r\n+    STATUS_CHOICES = [\r\n+        ('pending', _('Pending')),\r\n+        ('processing', _('Processing')),\r\n+        ('shipped', _('Shipped')),\r\n+        ('delivered', _('Delivered')),\r\n+        ('cancelled', _('Cancelled'))\r\n+    ]\r\n+\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Order Customer\")\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Order Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='pending'\r\n+    )\r\n+    total_price = models.DecimalField(\r\n+        _(\"Total Order Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    shipping_address = models.TextField(\r\n+        _(\"Shipping Address\")\r\n+    )\r\n+\r\n+class OrderItem(BaseModel):\r\n+    order = models.ForeignKey(\r\n+        Order, \r\n+        related_name='items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Associated Order\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Ordered Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\")\r\n+    )\r\n+    price_at_purchase = models.DecimalField(\r\n+        _(\"Product Price at Purchase\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738860322676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,8 +179,21 @@\n         upload_to='products/', \r\n         null=True, \r\n         blank=True\r\n     )\r\n+    \r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n+    )\r\n \r\n class ShoppingCart(BaseModel):\r\n     user = models.ForeignKey(\r\n         CustomUser, \r\n"
                },
                {
                    "date": 1738860381112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,8 +192,34 @@\n         choices=FAVORITE_CHOICES,\r\n         default='No',  # By default, the product is not marked as a favorite\r\n         verbose_name='Is the product a favorite?'\r\n     )\r\n+    \r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n \r\n class ShoppingCart(BaseModel):\r\n     user = models.ForeignKey(\r\n         CustomUser, \r\n"
                },
                {
                    "date": 1738860438520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n from django.core.exceptions import ValidationError\r\n from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n import uuid\r\n import os\r\n+from simple_history.models import HistoricalRecords\r\n \r\n+\r\n class BaseModel(SafeDeleteModel):\r\n     id = models.UUIDField(\r\n         _(\"Unique Identifier\"), \r\n         primary_key=True, \r\n@@ -39,8 +41,9 @@\n         max_length=3, \r\n         unique=True\r\n     )\r\n     \r\n+    \r\n     def __str__(self):\r\n         return self.name\r\n \r\n class City(BaseModel):\r\n"
                },
                {
                    "date": 1738860761178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import uuid\r\n import os\r\n from simple_history.models import HistoricalRecords\r\n \r\n-\r\n+##### models  base #####\r\n class BaseModel(SafeDeleteModel):\r\n     id = models.UUIDField(\r\n         _(\"Unique Identifier\"), \r\n         primary_key=True, \r\n@@ -29,8 +29,9 @@\n \r\n     class Meta:\r\n         abstract = True\r\n \r\n+##### models contry ####\r\n class Country(BaseModel):\r\n     name = models.CharField(\r\n         _(\"Country Name\"), \r\n         max_length=100, \r\n@@ -41,9 +42,13 @@\n         max_length=3, \r\n         unique=True\r\n     )\r\n     \r\n-    \r\n+    history = HistoricalRecords(\r\n+        table_name='Contry_history', \r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n     def __str__(self):\r\n         return self.name\r\n \r\n class City(BaseModel):\r\n@@ -62,8 +67,10 @@\n         unique_together = ['name', 'country']\r\n         verbose_name = _(\"City\")\r\n         verbose_name_plural = _(\"Cities\")\r\n     \r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n     def __str__(self):\r\n         return f\"{self.name}, {self.country.name}\"\r\n \r\n class CustomUser(AbstractUser, BaseModel):\r\n@@ -105,8 +112,10 @@\n         _(\"Last Activity Timestamp\"), \r\n         null=True, \r\n         blank=True\r\n     )\r\n+    \r\n+    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n class Category(BaseModel):\r\n     name = models.CharField(\r\n         _(\"Category Name\"), \r\n@@ -124,8 +133,10 @@\n         on_delete=models.SET_NULL, \r\n         related_name='subcategories',\r\n         verbose_name=_(\"Parent Category\")\r\n     )\r\n+    \r\n+    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n     def __str__(self):\r\n         return self.name\r\n \r\n@@ -221,8 +232,10 @@\n         choices=RECOMMENDED_CHOICES,\r\n         default='No',  # By default, the product is not recommended\r\n         verbose_name='Is the product recommended?'\r\n     )\r\n+    \r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n class ShoppingCart(BaseModel):\r\n     user = models.ForeignKey(\r\n         CustomUser, \r\n@@ -232,8 +245,10 @@\n     is_active = models.BooleanField(\r\n         _(\"Cart Active Status\"), \r\n         default=True\r\n     )\r\n+    \r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n class CartItem(BaseModel):\r\n     cart = models.ForeignKey(\r\n         ShoppingCart, \r\n@@ -250,8 +265,10 @@\n         _(\"Product Quantity\"), \r\n         default=1\r\n     )\r\n \r\n+    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n class Order(BaseModel):\r\n     STATUS_CHOICES = [\r\n         ('pending', _('Pending')),\r\n         ('processing', _('Processing')),\r\n@@ -278,8 +295,10 @@\n     )\r\n     shipping_address = models.TextField(\r\n         _(\"Shipping Address\")\r\n     )\r\n+    \r\n+    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n class OrderItem(BaseModel):\r\n     order = models.ForeignKey(\r\n         Order, \r\n@@ -298,5 +317,7 @@\n     price_at_purchase = models.DecimalField(\r\n         _(\"Product Price at Purchase\"), \r\n         max_digits=10, \r\n         decimal_places=2\r\n-    )\n\\ No newline at end of file\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738860889791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,5 +319,7 @@\n         max_digits=10, \r\n         decimal_places=2\r\n     )\r\n     \r\n-    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\n\\ No newline at end of file\n+    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738861436811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,5 +321,47 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n-    \n\\ No newline at end of file\n+    \r\n+    class Review(BaseModel):\r\n+        \r\n+        RATING_CHOICES = [\r\n+            (1, _('1 - Very Unsatisfied')),\r\n+            (2, _('2 - Unsatisfied')),\r\n+            (3, _('3 - Average')),\r\n+            (4, _('4 - Satisfied')),\r\n+            (5, _('5 - Excellent'))\r\n+        ]\r\n+\r\n+        product = models.ForeignKey(\r\n+            Product, \r\n+            on_delete=models.CASCADE,\r\n+            related_name='reviews',\r\n+            verbose_name=_(\"Associated Product\")\r\n+        )\r\n+        user = models.ForeignKey(\r\n+            'CustomUser', \r\n+            on_delete=models.CASCADE,\r\n+            verbose_name=_(\"User\")\r\n+        )\r\n+        rating = models.IntegerField(\r\n+            _(\"Rating\"), \r\n+            choices=RATING_CHOICES\r\n+        )\r\n+        comment = models.TextField(\r\n+            _(\"Comment\"),\r\n+            max_length=1000,\r\n+            blank=True\r\n+        )\r\n+        review_date = models.DateTimeField(\r\n+            _(\"Review Date\"),\r\n+            auto_now_add=True\r\n+        )\r\n+        recommended = models.BooleanField(\r\n+            _(\"Would Recommend\"),\r\n+            default=False\r\n+        )\r\n+    \r\n+        class Meta:\r\n+            unique_together = ['product', 'user']\r\n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738861463415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -360,8 +360,9 @@\n         recommended = models.BooleanField(\r\n             _(\"Would Recommend\"),\r\n             default=False\r\n         )\r\n-    \r\n+\r\n+        history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n         class Meta:\r\n             unique_together = ['product', 'user']\r\n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738862254069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,11 +356,19 @@\n         review_date = models.DateTimeField(\r\n             _(\"Review Date\"),\r\n             auto_now_add=True\r\n         )\r\n-        recommended = models.BooleanField(\r\n-            _(\"Would Recommend\"),\r\n-            default=False\r\n+        RECOMMENDATION_CHOICES = [\r\n+        ('not_recommended', _('Not Recommended')),\r\n+        ('neutral', _('Neutral')),\r\n+        ('recommended', _('Recommended'))\r\n+        ]\r\n+\r\n+        recommended = models.CharField(\r\n+            _(\"Recommendation Status\"),\r\n+            max_length=20,\r\n+            choices=RECOMMENDATION_CHOICES,\r\n+            default='neutral'\r\n         )\r\n \r\n         history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n         class Meta:\r\n"
                },
                {
                    "date": 1738862392626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,18 +103,42 @@\n         null=True,\r\n         verbose_name=_(\"User City\")\r\n     )\r\n     \r\n-    is_online = models.BooleanField(\r\n-        _(\"Online Status\"), \r\n-        default=False\r\n+    # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n     )\r\n-    last_activity = models.DateTimeField(\r\n-        _(\"Last Activity Timestamp\"), \r\n-        null=True, \r\n-        blank=True\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n     )\r\n     \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n     history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n class Category(BaseModel):\r\n     name = models.CharField(\r\n"
                },
                {
                    "date": 1738862438999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,16 @@\n from django.db import models\r\n from django.contrib.auth.models import AbstractUser\r\n from django.core.validators import MinValueValidator, MaxValueValidator\r\n+from django.dispatch import receiver\r\n from django.utils import timezone\r\n from django.utils.translation import gettext_lazy as _\r\n from django.core.exceptions import ValidationError\r\n from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n import uuid\r\n import os\r\n from simple_history.models import HistoricalRecords\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n \r\n ##### models  base #####\r\n class BaseModel(SafeDeleteModel):\r\n     id = models.UUIDField(\r\n@@ -290,9 +292,10 @@\n         default=1\r\n     )\r\n \r\n     history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n+\r\n+###### model oder   \r\n class Order(BaseModel):\r\n     STATUS_CHOICES = [\r\n         ('pending', _('Pending')),\r\n         ('processing', _('Processing')),\r\n"
                },
                {
                    "date": 1738862721747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,8 +274,9 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n+########## \r\n class CartItem(BaseModel):\r\n     cart = models.ForeignKey(\r\n         ShoppingCart, \r\n         related_name='cart_items', \r\n@@ -293,9 +294,9 @@\n     )\r\n \r\n     history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-###### model oder   \r\n+###### model oder   ######\r\n class Order(BaseModel):\r\n     STATUS_CHOICES = [\r\n         ('pending', _('Pending')),\r\n         ('processing', _('Processing')),\r\n"
                },
                {
                    "date": 1738863341156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,9 @@\n             related_name='reviews',\r\n             verbose_name=_(\"Associated Product\")\r\n         )\r\n         user = models.ForeignKey(\r\n-            'CustomUser', \r\n+            CustomUser, \r\n             on_delete=models.CASCADE,\r\n             verbose_name=_(\"User\")\r\n         )\r\n         rating = models.IntegerField(\r\n"
                },
                {
                    "date": 1738924737244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,55 +350,55 @@\n     \r\n     history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n     \r\n-    class Review(BaseModel):\r\n-        \r\n-        RATING_CHOICES = [\r\n-            (1, _('1 - Very Unsatisfied')),\r\n-            (2, _('2 - Unsatisfied')),\r\n-            (3, _('3 - Average')),\r\n-            (4, _('4 - Satisfied')),\r\n-            (5, _('5 - Excellent'))\r\n-        ]\r\n+class Review(BaseModel):\r\n+    \r\n+    RATING_CHOICES = [\r\n+        (1, _('1 - Very Unsatisfied')),\r\n+        (2, _('2 - Unsatisfied')),\r\n+        (3, _('3 - Average')),\r\n+        (4, _('4 - Satisfied')),\r\n+        (5, _('5 - Excellent'))\r\n+    ]\r\n \r\n-        product = models.ForeignKey(\r\n-            Product, \r\n-            on_delete=models.CASCADE,\r\n-            related_name='reviews',\r\n-            verbose_name=_(\"Associated Product\")\r\n-        )\r\n-        user = models.ForeignKey(\r\n-            CustomUser, \r\n-            on_delete=models.CASCADE,\r\n-            verbose_name=_(\"User\")\r\n-        )\r\n-        rating = models.IntegerField(\r\n-            _(\"Rating\"), \r\n-            choices=RATING_CHOICES\r\n-        )\r\n-        comment = models.TextField(\r\n-            _(\"Comment\"),\r\n-            max_length=1000,\r\n-            blank=True\r\n-        )\r\n-        review_date = models.DateTimeField(\r\n-            _(\"Review Date\"),\r\n-            auto_now_add=True\r\n-        )\r\n-        RECOMMENDATION_CHOICES = [\r\n-        ('not_recommended', _('Not Recommended')),\r\n-        ('neutral', _('Neutral')),\r\n-        ('recommended', _('Recommended'))\r\n-        ]\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n\\ No newline at end of file\n+        related_name='reviews',\r\n+        verbose_name=_(\"Associated Product\")\r\n+    )\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"User\")\r\n+    )\r\n+    rating = models.IntegerField(\r\n+        _(\"Rating\"), \r\n+        choices=RATING_CHOICES\r\n+    )\r\n+    comment = models.TextField(\r\n+        _(\"Comment\"),\r\n+        max_length=1000,\r\n+        blank=True\r\n+    )\r\n+    review_date = models.DateTimeField(\r\n+        _(\"Review Date\"),\r\n+        auto_now_add=True\r\n+    )\r\n+    RECOMMENDATION_CHOICES = [\r\n+    ('not_recommended', _('Not Recommended')),\r\n+    ('neutral', _('Neutral')),\r\n+    ('recommended', _('Recommended'))\r\n+    ]\r\n \r\n-        recommended = models.CharField(\r\n-            _(\"Recommendation Status\"),\r\n-            max_length=20,\r\n-            choices=RECOMMENDATION_CHOICES,\r\n-            default='neutral'\r\n-        )\r\n+    recommended = models.CharField(\r\n+        _(\"Recommendation Status\"),\r\n+        max_length=20,\r\n+        choices=RECOMMENDATION_CHOICES,\r\n+        default='neutral'\r\n+    )\r\n \r\n-        history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-        class Meta:\r\n-            unique_together = ['product', 'user']\r\n-        \n+    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    class Meta:\r\n+        unique_together = ['product', 'user']\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738926706610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,406 @@\n+from django.db import models\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.validators import MinValueValidator, MaxValueValidator\r\n+from django.dispatch import receiver\r\n+from django.utils import timezone\r\n+from django.utils.translation import gettext_lazy as _\r\n+from django.core.exceptions import ValidationError\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+import uuid\r\n+import os\r\n+from simple_history.models import HistoricalRecords\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+\r\n+##### models  base #####\r\n+class BaseModel(SafeDeleteModel):\r\n+    id = models.UUIDField(\r\n+        _(\"Unique Identifier\"), \r\n+        primary_key=True, \r\n+        default=uuid.uuid4, \r\n+        editable=False\r\n+    )\r\n+    created_at = models.DateTimeField(\r\n+        _(\"Creation Timestamp\"), \r\n+        auto_now_add=True\r\n+    )\r\n+    updated_at = models.DateTimeField(\r\n+        _(\"Last Update Timestamp\"), \r\n+        auto_now=True\r\n+    )\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    class Meta:\r\n+        abstract = True\r\n+\r\n+##### models contry ####\r\n+class Country(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"Country Name\"), \r\n+        max_length=100, \r\n+        unique=True\r\n+    )\r\n+    code = models.CharField(\r\n+        _(\"Country Code\"), \r\n+        max_length=3, \r\n+        unique=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(\r\n+        table_name='Contry_history', \r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+#### models City ########\r\n+class City(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"City Name\"), \r\n+        max_length=100\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='cities',\r\n+        verbose_name=_(\"Associated Country\")\r\n+    )\r\n+    \r\n+    class Meta:\r\n+        unique_together = ['name', 'country']\r\n+        verbose_name = _(\"City\")\r\n+        verbose_name_plural = _(\"Cities\")\r\n+    \r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.name}, {self.country.name}\"\r\n+\r\n+####\r\n+class CustomUser(AbstractUser, BaseModel):\r\n+    GENDER_CHOICES = [\r\n+        ('M', _('Male')),\r\n+        ('F', _('Female')),\r\n+        ('O', _('Other'))\r\n+    ]\r\n+\r\n+    phone = models.CharField(\r\n+        _(\"Phone Number\"), \r\n+        max_length=15, \r\n+        blank=True\r\n+    )\r\n+    gender = models.CharField(\r\n+        _(\"Gender\"), \r\n+        max_length=1, \r\n+        choices=GENDER_CHOICES, \r\n+        blank=True\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User Country\")\r\n+    )\r\n+    city = models.ForeignKey(\r\n+        City, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User City\")\r\n+    )\r\n+    \r\n+    # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n+    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+class Category(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"Category Name\"), \r\n+        max_length=100, \r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Category Description\"), \r\n+        blank=True\r\n+    )\r\n+    parent = models.ForeignKey(\r\n+        'self', \r\n+        null=True, \r\n+        blank=True, \r\n+        on_delete=models.SET_NULL, \r\n+        related_name='subcategories',\r\n+        verbose_name=_(\"Parent Category\")\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+class Product(BaseModel):\r\n+    STATUS_CHOICES = [\r\n+        ('available', _('Available')),\r\n+        ('out_of_stock', _('Out of Stock')),\r\n+        ('discontinued', _('Discontinued'))\r\n+    ]\r\n+\r\n+    name = models.CharField(\r\n+        _(\"Product Name\"), \r\n+        max_length=200, \r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Product Description\")\r\n+    )\r\n+    category = models.ForeignKey(\r\n+        Category, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='products',\r\n+        verbose_name=_(\"Product Category\")\r\n+    )\r\n+    \r\n+    price = models.DecimalField(\r\n+        _(\"Product Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0.01)]\r\n+    )\r\n+    discount_percentage = models.DecimalField(\r\n+        _(\"Discount Percentage\"), \r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    stock_quantity = models.PositiveIntegerField(\r\n+        _(\"Stock Quantity\"), \r\n+        default=0\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Product Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='available'\r\n+    )\r\n+    \r\n+    image = models.ImageField(\r\n+        _(\"Product Image\"), \r\n+        upload_to='products/', \r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+class ShoppingCart(BaseModel):\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Cart Owner\")\r\n+    )\r\n+    is_active = models.BooleanField(\r\n+        _(\"Cart Active Status\"), \r\n+        default=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+########## \r\n+class CartItem(BaseModel):\r\n+    cart = models.ForeignKey(\r\n+        ShoppingCart, \r\n+        related_name='cart_items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Shopping Cart\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\"), \r\n+        default=1\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+###### model oder   ######\r\n+class Order(BaseModel):\r\n+    STATUS_CHOICES = [\r\n+        ('pending', _('Pending')),\r\n+        ('processing', _('Processing')),\r\n+        ('shipped', _('Shipped')),\r\n+        ('delivered', _('Delivered')),\r\n+        ('cancelled', _('Cancelled'))\r\n+    ]\r\n+\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Order Customer\")\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Order Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='pending'\r\n+    )\r\n+    total_price = models.DecimalField(\r\n+        _(\"Total Order Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    shipping_address = models.TextField(\r\n+        _(\"Shipping Address\")\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+class OrderItem(BaseModel):\r\n+    order = models.ForeignKey(\r\n+        Order, \r\n+        related_name='items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Associated Order\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Ordered Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\")\r\n+    )\r\n+    price_at_purchase = models.DecimalField(\r\n+        _(\"Product Price at Purchase\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    \r\n+class Review(BaseModel):\r\n+    \r\n+    RATING_CHOICES = [\r\n+        (1, _('1 - Very Unsatisfied')),\r\n+        (2, _('2 - Unsatisfied')),\r\n+        (3, _('3 - Average')),\r\n+        (4, _('4 - Satisfied')),\r\n+        (5, _('5 - Excellent'))\r\n+    ]\r\n+\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        related_name='reviews',\r\n+        verbose_name=_(\"Associated Product\")\r\n+    )\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"User\")\r\n+    )\r\n+    rating = models.IntegerField(\r\n+        _(\"Rating\"), \r\n+        choices=RATING_CHOICES\r\n+    )\r\n+    comment = models.TextField(\r\n+        _(\"Comment\"),\r\n+        max_length=1000,\r\n+        blank=True\r\n+    )\r\n+    review_date = models.DateTimeField(\r\n+        _(\"Review Date\"),\r\n+        auto_now_add=True\r\n+    )\r\n+    RECOMMENDATION_CHOICES = [\r\n+    ('not_recommended', _('Not Recommended')),\r\n+    ('neutral', _('Neutral')),\r\n+    ('recommended', _('Recommended'))\r\n+    ]\r\n+\r\n+    recommended = models.CharField(\r\n+        _(\"Recommendation Status\"),\r\n+        max_length=20,\r\n+        choices=RECOMMENDATION_CHOICES,\r\n+        default='neutral'\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    class Meta:\r\n+        unique_together = ['product', 'user']\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738926756602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n \r\n     def __str__(self):\r\n         return f\"{self.name}, {self.country.name}\"\r\n \r\n-####\r\n+#### models User  personaliser ########\r\n class CustomUser(AbstractUser, BaseModel):\r\n     GENDER_CHOICES = [\r\n         ('M', _('Male')),\r\n         ('F', _('Female')),\r\n@@ -143,8 +143,9 @@\n     \r\n     \r\n     history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n+##### models Category ########\r\n class Category(BaseModel):\r\n     name = models.CharField(\r\n         _(\"Category Name\"), \r\n         max_length=100, \r\n@@ -167,8 +168,9 @@\n \r\n     def __str__(self):\r\n         return self.name\r\n \r\n+# models Product ########\r\n class Product(BaseModel):\r\n     STATUS_CHOICES = [\r\n         ('available', _('Available')),\r\n         ('out_of_stock', _('Out of Stock')),\r\n@@ -263,8 +265,9 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n+#\r\n class ShoppingCart(BaseModel):\r\n     user = models.ForeignKey(\r\n         CustomUser, \r\n         on_delete=models.CASCADE,\r\n"
                },
                {
                    "date": 1738926804850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-#\r\n+##### models Shopping Cart ########\r\n class ShoppingCart(BaseModel):\r\n     user = models.ForeignKey(\r\n         CustomUser, \r\n         on_delete=models.CASCADE,\r\n@@ -279,9 +279,9 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-########## \r\n+######### models cartItem #########\r\n class CartItem(BaseModel):\r\n     cart = models.ForeignKey(\r\n         ShoppingCart, \r\n         related_name='cart_items', \r\n@@ -331,8 +331,9 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n+###### model oderItem   ######\r\n class OrderItem(BaseModel):\r\n     order = models.ForeignKey(\r\n         Order, \r\n         related_name='items', \r\n@@ -354,9 +355,9 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n-    \r\n+###### model Reviews   ######   \r\n class Review(BaseModel):\r\n     \r\n     RATING_CHOICES = [\r\n         (1, _('1 - Very Unsatisfied')),\r\n@@ -405,409 +406,5 @@\n \r\n     history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     class Meta:\r\n         unique_together = ['product', 'user']\r\n-    \n-from django.db import models\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.validators import MinValueValidator, MaxValueValidator\r\n-from django.dispatch import receiver\r\n-from django.utils import timezone\r\n-from django.utils.translation import gettext_lazy as _\r\n-from django.core.exceptions import ValidationError\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-import uuid\r\n-import os\r\n-from simple_history.models import HistoricalRecords\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-\r\n-##### models  base #####\r\n-class BaseModel(SafeDeleteModel):\r\n-    id = models.UUIDField(\r\n-        _(\"Unique Identifier\"), \r\n-        primary_key=True, \r\n-        default=uuid.uuid4, \r\n-        editable=False\r\n-    )\r\n-    created_at = models.DateTimeField(\r\n-        _(\"Creation Timestamp\"), \r\n-        auto_now_add=True\r\n-    )\r\n-    updated_at = models.DateTimeField(\r\n-        _(\"Last Update Timestamp\"), \r\n-        auto_now=True\r\n-    )\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    class Meta:\r\n-        abstract = True\r\n-\r\n-##### models contry ####\r\n-class Country(BaseModel):\r\n-    name = models.CharField(\r\n-        _(\"Country Name\"), \r\n-        max_length=100, \r\n-        unique=True\r\n-    )\r\n-    code = models.CharField(\r\n-        _(\"Country Code\"), \r\n-        max_length=3, \r\n-        unique=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(\r\n-        table_name='Contry_history', \r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-class City(BaseModel):\r\n-    name = models.CharField(\r\n-        _(\"City Name\"), \r\n-        max_length=100\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='cities',\r\n-        verbose_name=_(\"Associated Country\")\r\n-    )\r\n-    \r\n-    class Meta:\r\n-        unique_together = ['name', 'country']\r\n-        verbose_name = _(\"City\")\r\n-        verbose_name_plural = _(\"Cities\")\r\n-    \r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.name}, {self.country.name}\"\r\n-\r\n-class CustomUser(AbstractUser, BaseModel):\r\n-    GENDER_CHOICES = [\r\n-        ('M', _('Male')),\r\n-        ('F', _('Female')),\r\n-        ('O', _('Other'))\r\n-    ]\r\n-\r\n-    phone = models.CharField(\r\n-        _(\"Phone Number\"), \r\n-        max_length=15, \r\n-        blank=True\r\n-    )\r\n-    gender = models.CharField(\r\n-        _(\"Gender\"), \r\n-        max_length=1, \r\n-        choices=GENDER_CHOICES, \r\n-        blank=True\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User Country\")\r\n-    )\r\n-    city = models.ForeignKey(\r\n-        City, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User City\")\r\n-    )\r\n-    \r\n-    # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-class Category(BaseModel):\r\n-    name = models.CharField(\r\n-        _(\"Category Name\"), \r\n-        max_length=100, \r\n-        unique=True\r\n-    )\r\n-    description = models.TextField(\r\n-        _(\"Category Description\"), \r\n-        blank=True\r\n-    )\r\n-    parent = models.ForeignKey(\r\n-        'self', \r\n-        null=True, \r\n-        blank=True, \r\n-        on_delete=models.SET_NULL, \r\n-        related_name='subcategories',\r\n-        verbose_name=_(\"Parent Category\")\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-class Product(BaseModel):\r\n-    STATUS_CHOICES = [\r\n-        ('available', _('Available')),\r\n-        ('out_of_stock', _('Out of Stock')),\r\n-        ('discontinued', _('Discontinued'))\r\n-    ]\r\n-\r\n-    name = models.CharField(\r\n-        _(\"Product Name\"), \r\n-        max_length=200, \r\n-        unique=True\r\n-    )\r\n-    description = models.TextField(\r\n-        _(\"Product Description\")\r\n-    )\r\n-    category = models.ForeignKey(\r\n-        Category, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='products',\r\n-        verbose_name=_(\"Product Category\")\r\n-    )\r\n-    \r\n-    price = models.DecimalField(\r\n-        _(\"Product Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0.01)]\r\n-    )\r\n-    discount_percentage = models.DecimalField(\r\n-        _(\"Discount Percentage\"), \r\n-        max_digits=5, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    stock_quantity = models.PositiveIntegerField(\r\n-        _(\"Stock Quantity\"), \r\n-        default=0\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Product Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='available'\r\n-    )\r\n-    \r\n-    image = models.ImageField(\r\n-        _(\"Product Image\"), \r\n-        upload_to='products/', \r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a best seller\r\n-    BESTSELLER_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    bestseller = models.CharField(\r\n-        max_length=3,\r\n-        choices=BESTSELLER_CHOICES,\r\n-        default='No',  # By default, the product is not a best seller\r\n-        verbose_name='Is the product a best seller?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    recommended = models.CharField(\r\n-        max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-class ShoppingCart(BaseModel):\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Cart Owner\")\r\n-    )\r\n-    is_active = models.BooleanField(\r\n-        _(\"Cart Active Status\"), \r\n-        default=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-########## \r\n-class CartItem(BaseModel):\r\n-    cart = models.ForeignKey(\r\n-        ShoppingCart, \r\n-        related_name='cart_items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Shopping Cart\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\"), \r\n-        default=1\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-###### model oder   ######\r\n-class Order(BaseModel):\r\n-    STATUS_CHOICES = [\r\n-        ('pending', _('Pending')),\r\n-        ('processing', _('Processing')),\r\n-        ('shipped', _('Shipped')),\r\n-        ('delivered', _('Delivered')),\r\n-        ('cancelled', _('Cancelled'))\r\n-    ]\r\n-\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Order Customer\")\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Order Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='pending'\r\n-    )\r\n-    total_price = models.DecimalField(\r\n-        _(\"Total Order Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    shipping_address = models.TextField(\r\n-        _(\"Shipping Address\")\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-class OrderItem(BaseModel):\r\n-    order = models.ForeignKey(\r\n-        Order, \r\n-        related_name='items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Associated Order\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Ordered Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\")\r\n-    )\r\n-    price_at_purchase = models.DecimalField(\r\n-        _(\"Product Price at Purchase\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    \r\n-class Review(BaseModel):\r\n-    \r\n-    RATING_CHOICES = [\r\n-        (1, _('1 - Very Unsatisfied')),\r\n-        (2, _('2 - Unsatisfied')),\r\n-        (3, _('3 - Average')),\r\n-        (4, _('4 - Satisfied')),\r\n-        (5, _('5 - Excellent'))\r\n-    ]\r\n-\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        related_name='reviews',\r\n-        verbose_name=_(\"Associated Product\")\r\n-    )\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"User\")\r\n-    )\r\n-    rating = models.IntegerField(\r\n-        _(\"Rating\"), \r\n-        choices=RATING_CHOICES\r\n-    )\r\n-    comment = models.TextField(\r\n-        _(\"Comment\"),\r\n-        max_length=1000,\r\n-        blank=True\r\n-    )\r\n-    review_date = models.DateTimeField(\r\n-        _(\"Review Date\"),\r\n-        auto_now_add=True\r\n-    )\r\n-    RECOMMENDATION_CHOICES = [\r\n-    ('not_recommended', _('Not Recommended')),\r\n-    ('neutral', _('Neutral')),\r\n-    ('recommended', _('Recommended'))\r\n-    ]\r\n-\r\n-    recommended = models.CharField(\r\n-        _(\"Recommendation Status\"),\r\n-        max_length=20,\r\n-        choices=RECOMMENDATION_CHOICES,\r\n-        default='neutral'\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    class Meta:\r\n-        unique_together = ['product', 'user']\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738930750733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,443 @@\n+from django.db import models\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.validators import MinValueValidator, MaxValueValidator\r\n+from django.dispatch import receiver\r\n+from django.utils import timezone\r\n+from django.utils.translation import gettext_lazy as _\r\n+from django.core.exceptions import ValidationError\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+import uuid\r\n+import os\r\n+from simple_history.models import HistoricalRecords\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+\r\n+##### models  base #####\r\n+class BaseModel(SafeDeleteModel):\r\n+    id = models.UUIDField(\r\n+        _(\"Unique Identifier\"), \r\n+        primary_key=True, \r\n+        default=uuid.uuid4, \r\n+        editable=False\r\n+    )\r\n+    created_at = models.DateTimeField(\r\n+        _(\"Creation Timestamp\"), \r\n+        auto_now_add=True\r\n+    )\r\n+    updated_at = models.DateTimeField(\r\n+        _(\"Last Update Timestamp\"), \r\n+        auto_now=True\r\n+    )\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    class Meta:\r\n+        abstract = True\r\n+\r\n+##### models contry ####\r\n+class Country(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"Country Name\"), \r\n+        max_length=100, \r\n+        unique=True\r\n+    )\r\n+    code = models.CharField(\r\n+        _(\"Country Code\"), \r\n+        max_length=3, \r\n+        unique=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(\r\n+        table_name='Contry_history', \r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+#### models City ########\r\n+class City(BaseModel):\r\n+    name = models.CharField(\r\n+        _(\"City Name\"), \r\n+        max_length=100\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='cities',\r\n+        verbose_name=_(\"Associated Country\")\r\n+    )\r\n+    \r\n+    class Meta:\r\n+        unique_together = ['name', 'country']\r\n+        verbose_name = _(\"City\")\r\n+        verbose_name_plural = _(\"Cities\")\r\n+    \r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.name}, {self.country.name}\"\r\n+\r\n+#### models User  personaliser ########\r\n+class CustomUser(AbstractUser, BaseModel):\r\n+    GENDER_CHOICES = [\r\n+        ('M', _('Male')),\r\n+        ('F', _('Female')),\r\n+        ('O', _('Other'))\r\n+    ]\r\n+\r\n+    phone = models.CharField(\r\n+        _(\"Phone Number\"), \r\n+        max_length=15, \r\n+        blank=True\r\n+    )\r\n+    gender = models.CharField(\r\n+        _(\"Gender\"), \r\n+        max_length=1, \r\n+        choices=GENDER_CHOICES, \r\n+        blank=True\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User Country\")\r\n+    )\r\n+    city = models.ForeignKey(\r\n+        City, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User City\")\r\n+    )\r\n+    \r\n+    # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n+    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+class ParentCategory(BaseModel):\r\n+    \"\"\"\r\n+    Modèle représentant une catégorie parent.\r\n+    \"\"\"\r\n+    name = models.CharField(\r\n+        _(\"Parent Category Name\"),\r\n+        max_length=100,\r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Parent Category Description\"),\r\n+        blank=True\r\n+    )\r\n+    history = HistoricalRecords(\r\n+        table_name='ParentCategory_history',\r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    class Meta:\r\n+        verbose_name = _(\"Parent Category\")\r\n+        verbose_name_plural = _(\"Parent Categories\")\r\n+        ordering = ['name']\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+\r\n+class Category(BaseModel):\r\n+    \"\"\"\r\n+    Modèle représentant une sous-catégorie associée à une catégorie parent.\r\n+    \"\"\"\r\n+    name = models.CharField(\r\n+        _(\"Category Name\"),\r\n+        max_length=100,\r\n+        unique=True\r\n+    )\r\n+    \r\n+    parent = models.ForeignKey(\r\n+        ParentCategory,\r\n+        null=True,\r\n+        blank=True,\r\n+        on_delete=models.SET_NULL,\r\n+        related_name='categories',\r\n+        verbose_name=_(\"Parent Category\")\r\n+    )\r\n+    history = HistoricalRecords(\r\n+        table_name='Category_history',\r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    class Meta:\r\n+        verbose_name = _(\"Category\")\r\n+        verbose_name_plural = _(\"Categories\")\r\n+        ordering = ['name']\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+# models Product ########\r\n+class Product(BaseModel):\r\n+    STATUS_CHOICES = [\r\n+        ('available', _('Available')),\r\n+        ('out_of_stock', _('Out of Stock')),\r\n+        ('discontinued', _('Discontinued'))\r\n+    ]\r\n+\r\n+    name = models.CharField(\r\n+        _(\"Product Name\"), \r\n+        max_length=200, \r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Product Description\")\r\n+    )\r\n+    category = models.ForeignKey(\r\n+        Category, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='products',\r\n+        verbose_name=_(\"Product Category\")\r\n+    )\r\n+    \r\n+    price = models.DecimalField(\r\n+        _(\"Product Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0.01)]\r\n+    )\r\n+    discount_percentage = models.DecimalField(\r\n+        _(\"Discount Percentage\"), \r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    stock_quantity = models.PositiveIntegerField(\r\n+        _(\"Stock Quantity\"), \r\n+        default=0\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Product Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='available'\r\n+    )\r\n+    \r\n+    image = models.ImageField(\r\n+        _(\"Product Image\"), \r\n+        upload_to='products/', \r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+##### models Shopping Cart ########\r\n+class ShoppingCart(BaseModel):\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Cart Owner\")\r\n+    )\r\n+    is_active = models.BooleanField(\r\n+        _(\"Cart Active Status\"), \r\n+        default=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+######### models cartItem #########\r\n+class CartItem(BaseModel):\r\n+    cart = models.ForeignKey(\r\n+        ShoppingCart, \r\n+        related_name='cart_items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Shopping Cart\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\"), \r\n+        default=1\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+###### model oder   ######\r\n+class Order(BaseModel):\r\n+    STATUS_CHOICES = [\r\n+        ('pending', _('Pending')),\r\n+        ('processing', _('Processing')),\r\n+        ('shipped', _('Shipped')),\r\n+        ('delivered', _('Delivered')),\r\n+        ('cancelled', _('Cancelled'))\r\n+    ]\r\n+\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Order Customer\")\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Order Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='pending'\r\n+    )\r\n+    total_price = models.DecimalField(\r\n+        _(\"Total Order Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    shipping_address = models.TextField(\r\n+        _(\"Shipping Address\")\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+###### model oderItem   ######\r\n+class OrderItem(BaseModel):\r\n+    order = models.ForeignKey(\r\n+        Order, \r\n+        related_name='items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Associated Order\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Ordered Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\")\r\n+    )\r\n+    price_at_purchase = models.DecimalField(\r\n+        _(\"Product Price at Purchase\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+###### model Reviews   ######   \r\n+class Review(BaseModel):\r\n+    \r\n+    RATING_CHOICES = [\r\n+        (1, _('1 - Very Unsatisfied')),\r\n+        (2, _('2 - Unsatisfied')),\r\n+        (3, _('3 - Average')),\r\n+        (4, _('4 - Satisfied')),\r\n+        (5, _('5 - Excellent'))\r\n+    ]\r\n+\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        related_name='reviews',\r\n+        verbose_name=_(\"Associated Product\")\r\n+    )\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"User\")\r\n+    )\r\n+    rating = models.IntegerField(\r\n+        _(\"Rating\"), \r\n+        choices=RATING_CHOICES\r\n+    )\r\n+    comment = models.TextField(\r\n+        _(\"Comment\"),\r\n+        max_length=1000,\r\n+        blank=True\r\n+    )\r\n+    review_date = models.DateTimeField(\r\n+        _(\"Review Date\"),\r\n+        auto_now_add=True\r\n+    )\r\n+    RECOMMENDATION_CHOICES = [\r\n+    ('not_recommended', _('Not Recommended')),\r\n+    ('neutral', _('Neutral')),\r\n+    ('recommended', _('Recommended'))\r\n+    ]\r\n+\r\n+    recommended = models.CharField(\r\n+        _(\"Recommendation Status\"),\r\n+        max_length=20,\r\n+        choices=RECOMMENDATION_CHOICES,\r\n+        default='neutral'\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    class Meta:\r\n+        unique_together = ['product', 'user']\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738930795304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n     history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n class ParentCategory(BaseModel):\r\n     \"\"\"\r\n-    Modèle représentant une catégorie parent.\r\n+    Model representing  une catégorie parent.\r\n     \"\"\"\r\n     name = models.CharField(\r\n         _(\"Parent Category Name\"),\r\n         max_length=100,\r\n@@ -172,10 +172,11 @@\n \r\n \r\n class Category(BaseModel):\r\n     \"\"\"\r\n-    Modèle représentant une sous-catégorie associée à une catégorie parent.\r\n+        Model representing a sub-category associated with a parent category.\r\n     \"\"\"\r\n+\r\n     name = models.CharField(\r\n         _(\"Category Name\"),\r\n         max_length=100,\r\n         unique=True\r\n"
                },
                {
                    "date": 1738930865785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,12 +143,11 @@\n     \r\n     \r\n     history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n+####### MODEL PARENTCATEGORY ########\r\n class ParentCategory(BaseModel):\r\n-    \"\"\"\r\n-    Model representing  une catégorie parent.\r\n-    \"\"\"\r\n+    \r\n     name = models.CharField(\r\n         _(\"Parent Category Name\"),\r\n         max_length=100,\r\n         unique=True\r\n@@ -169,13 +168,11 @@\n \r\n     def __str__(self):\r\n         return self.name\r\n \r\n-\r\n+###### Model CATEGORY#####\r\n class Category(BaseModel):\r\n-    \"\"\"\r\n-        Model representing a sub-category associated with a parent category.\r\n-    \"\"\"\r\n+     \r\n \r\n     name = models.CharField(\r\n         _(\"Category Name\"),\r\n         max_length=100,\r\n@@ -440,415 +437,5 @@\n \r\n     history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     class Meta:\r\n         unique_together = ['product', 'user']\r\n-    \n-from django.db import models\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.validators import MinValueValidator, MaxValueValidator\r\n-from django.dispatch import receiver\r\n-from django.utils import timezone\r\n-from django.utils.translation import gettext_lazy as _\r\n-from django.core.exceptions import ValidationError\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-import uuid\r\n-import os\r\n-from simple_history.models import HistoricalRecords\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-\r\n-##### models  base #####\r\n-class BaseModel(SafeDeleteModel):\r\n-    id = models.UUIDField(\r\n-        _(\"Unique Identifier\"), \r\n-        primary_key=True, \r\n-        default=uuid.uuid4, \r\n-        editable=False\r\n-    )\r\n-    created_at = models.DateTimeField(\r\n-        _(\"Creation Timestamp\"), \r\n-        auto_now_add=True\r\n-    )\r\n-    updated_at = models.DateTimeField(\r\n-        _(\"Last Update Timestamp\"), \r\n-        auto_now=True\r\n-    )\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    class Meta:\r\n-        abstract = True\r\n-\r\n-##### models contry ####\r\n-class Country(BaseModel):\r\n-    name = models.CharField(\r\n-        _(\"Country Name\"), \r\n-        max_length=100, \r\n-        unique=True\r\n-    )\r\n-    code = models.CharField(\r\n-        _(\"Country Code\"), \r\n-        max_length=3, \r\n-        unique=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(\r\n-        table_name='Contry_history', \r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-#### models City ########\r\n-class City(BaseModel):\r\n-    name = models.CharField(\r\n-        _(\"City Name\"), \r\n-        max_length=100\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='cities',\r\n-        verbose_name=_(\"Associated Country\")\r\n-    )\r\n-    \r\n-    class Meta:\r\n-        unique_together = ['name', 'country']\r\n-        verbose_name = _(\"City\")\r\n-        verbose_name_plural = _(\"Cities\")\r\n-    \r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.name}, {self.country.name}\"\r\n-\r\n-#### models User  personaliser ########\r\n-class CustomUser(AbstractUser, BaseModel):\r\n-    GENDER_CHOICES = [\r\n-        ('M', _('Male')),\r\n-        ('F', _('Female')),\r\n-        ('O', _('Other'))\r\n-    ]\r\n-\r\n-    phone = models.CharField(\r\n-        _(\"Phone Number\"), \r\n-        max_length=15, \r\n-        blank=True\r\n-    )\r\n-    gender = models.CharField(\r\n-        _(\"Gender\"), \r\n-        max_length=1, \r\n-        choices=GENDER_CHOICES, \r\n-        blank=True\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User Country\")\r\n-    )\r\n-    city = models.ForeignKey(\r\n-        City, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User City\")\r\n-    )\r\n-    \r\n-    # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-##### models Category ########\r\n-class Category(BaseModel):\r\n-    name = models.CharField(\r\n-        _(\"Category Name\"), \r\n-        max_length=100, \r\n-        unique=True\r\n-    )\r\n-    description = models.TextField(\r\n-        _(\"Category Description\"), \r\n-        blank=True\r\n-    )\r\n-    parent = models.ForeignKey(\r\n-        'self', \r\n-        null=True, \r\n-        blank=True, \r\n-        on_delete=models.SET_NULL, \r\n-        related_name='subcategories',\r\n-        verbose_name=_(\"Parent Category\")\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-# models Product ########\r\n-class Product(BaseModel):\r\n-    STATUS_CHOICES = [\r\n-        ('available', _('Available')),\r\n-        ('out_of_stock', _('Out of Stock')),\r\n-        ('discontinued', _('Discontinued'))\r\n-    ]\r\n-\r\n-    name = models.CharField(\r\n-        _(\"Product Name\"), \r\n-        max_length=200, \r\n-        unique=True\r\n-    )\r\n-    description = models.TextField(\r\n-        _(\"Product Description\")\r\n-    )\r\n-    category = models.ForeignKey(\r\n-        Category, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='products',\r\n-        verbose_name=_(\"Product Category\")\r\n-    )\r\n-    \r\n-    price = models.DecimalField(\r\n-        _(\"Product Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0.01)]\r\n-    )\r\n-    discount_percentage = models.DecimalField(\r\n-        _(\"Discount Percentage\"), \r\n-        max_digits=5, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    stock_quantity = models.PositiveIntegerField(\r\n-        _(\"Stock Quantity\"), \r\n-        default=0\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Product Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='available'\r\n-    )\r\n-    \r\n-    image = models.ImageField(\r\n-        _(\"Product Image\"), \r\n-        upload_to='products/', \r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a best seller\r\n-    BESTSELLER_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    bestseller = models.CharField(\r\n-        max_length=3,\r\n-        choices=BESTSELLER_CHOICES,\r\n-        default='No',  # By default, the product is not a best seller\r\n-        verbose_name='Is the product a best seller?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    recommended = models.CharField(\r\n-        max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-##### models Shopping Cart ########\r\n-class ShoppingCart(BaseModel):\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Cart Owner\")\r\n-    )\r\n-    is_active = models.BooleanField(\r\n-        _(\"Cart Active Status\"), \r\n-        default=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-######### models cartItem #########\r\n-class CartItem(BaseModel):\r\n-    cart = models.ForeignKey(\r\n-        ShoppingCart, \r\n-        related_name='cart_items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Shopping Cart\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\"), \r\n-        default=1\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-###### model oder   ######\r\n-class Order(BaseModel):\r\n-    STATUS_CHOICES = [\r\n-        ('pending', _('Pending')),\r\n-        ('processing', _('Processing')),\r\n-        ('shipped', _('Shipped')),\r\n-        ('delivered', _('Delivered')),\r\n-        ('cancelled', _('Cancelled'))\r\n-    ]\r\n-\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Order Customer\")\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Order Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='pending'\r\n-    )\r\n-    total_price = models.DecimalField(\r\n-        _(\"Total Order Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    shipping_address = models.TextField(\r\n-        _(\"Shipping Address\")\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-###### model oderItem   ######\r\n-class OrderItem(BaseModel):\r\n-    order = models.ForeignKey(\r\n-        Order, \r\n-        related_name='items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Associated Order\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Ordered Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\")\r\n-    )\r\n-    price_at_purchase = models.DecimalField(\r\n-        _(\"Product Price at Purchase\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-###### model Reviews   ######   \r\n-class Review(BaseModel):\r\n-    \r\n-    RATING_CHOICES = [\r\n-        (1, _('1 - Very Unsatisfied')),\r\n-        (2, _('2 - Unsatisfied')),\r\n-        (3, _('3 - Average')),\r\n-        (4, _('4 - Satisfied')),\r\n-        (5, _('5 - Excellent'))\r\n-    ]\r\n-\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        related_name='reviews',\r\n-        verbose_name=_(\"Associated Product\")\r\n-    )\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"User\")\r\n-    )\r\n-    rating = models.IntegerField(\r\n-        _(\"Rating\"), \r\n-        choices=RATING_CHOICES\r\n-    )\r\n-    comment = models.TextField(\r\n-        _(\"Comment\"),\r\n-        max_length=1000,\r\n-        blank=True\r\n-    )\r\n-    review_date = models.DateTimeField(\r\n-        _(\"Review Date\"),\r\n-        auto_now_add=True\r\n-    )\r\n-    RECOMMENDATION_CHOICES = [\r\n-    ('not_recommended', _('Not Recommended')),\r\n-    ('neutral', _('Neutral')),\r\n-    ('recommended', _('Recommended'))\r\n-    ]\r\n-\r\n-    recommended = models.CharField(\r\n-        _(\"Recommendation Status\"),\r\n-        max_length=20,\r\n-        choices=RECOMMENDATION_CHOICES,\r\n-        default='neutral'\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    class Meta:\r\n-        unique_together = ['product', 'user']\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738931300160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n \r\n ##### models  base #####\r\n class BaseModel(SafeDeleteModel):\r\n+    \r\n+    \r\n     id = models.UUIDField(\r\n         _(\"Unique Identifier\"), \r\n         primary_key=True, \r\n         default=uuid.uuid4, \r\n"
                },
                {
                    "date": 1738931318822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,15 @@\n \r\n ##### models  base #####\r\n class BaseModel(SafeDeleteModel):\r\n     \r\n+    \"\"\"\r\n+    Abstract base model that provides common fields for all other models, including:\r\n+    - `id`: A unique UUID identifier for the model instance.\r\n+    - `created_at`: Timestamp for the creation of the record.\r\n+    - `updated_at`: Timestamp for the last update of the record.\r\n+    - Soft delete functionality using SafeDelete with cascade deletion.\r\n+    \"\"\"\r\n     \r\n     id = models.UUIDField(\r\n         _(\"Unique Identifier\"), \r\n         primary_key=True, \r\n"
                },
                {
                    "date": 1738931332191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,15 @@\n         abstract = True\r\n \r\n ##### models contry ####\r\n class Country(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a country.\r\n+    - `name`: Unique name of the country (e.g., \"France\").\r\n+    - `code`: ISO code of the country (maximum 3 characters).\r\n+    - Historical tracking enabled to maintain change logs.\r\n+    \"\"\"\r\n     name = models.CharField(\r\n         _(\"Country Name\"), \r\n         max_length=100, \r\n         unique=True\r\n"
                },
                {
                    "date": 1738931345657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,15 @@\n         return self.name\r\n \r\n #### models City ########\r\n class City(BaseModel):\r\n+    \"\"\"\r\n+    Model representing a city.\r\n+    - `name`: Name of the city.\r\n+    - `country`: Foreign key to associate the city with a specific country.\r\n+    - Unique constraint to ensure no duplicate city-country combinations.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n     name = models.CharField(\r\n         _(\"City Name\"), \r\n         max_length=100\r\n     )\r\n"
                },
                {
                    "date": 1738931383044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,17 @@\n         return f\"{self.name}, {self.country.name}\"\r\n \r\n #### models User  personaliser ########\r\n class CustomUser(AbstractUser, BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Customized user model inheriting from Django's AbstractUser.\r\n+    - `phone`: User's phone number.\r\n+    - `gender`: Gender with predefined choices (Male, Female, Other).\r\n+    - `country`: Associated country of the user (optional).\r\n+    - `city`: Associated city of the user (optional).\r\n+    - History tracking and login/logout signals to manage online status.\r\n+    \"\"\"\r\n     GENDER_CHOICES = [\r\n         ('M', _('Male')),\r\n         ('F', _('Female')),\r\n         ('O', _('Other'))\r\n"
                },
                {
                    "date": 1738931404323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,8 +178,15 @@\n \r\n ####### MODEL PARENTCATEGORY ########\r\n class ParentCategory(BaseModel):\r\n     \r\n+    \"\"\"\r\n+    Model representing a parent category for product categorization.\r\n+    - `name`: Unique name of the parent category.\r\n+    - `description`: Optional description of the parent category.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n+    \r\n     name = models.CharField(\r\n         _(\"Parent Category Name\"),\r\n         max_length=100,\r\n         unique=True\r\n"
                },
                {
                    "date": 1738931416967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,9 +209,14 @@\n         return self.name\r\n \r\n ###### Model CATEGORY#####\r\n class Category(BaseModel):\r\n-     \r\n+    \"\"\"\r\n+    Model representing a category, potentially linked to a parent category.\r\n+    - `name`: Unique name of the category.\r\n+    - `parent`: Optional foreign key linking to a ParentCategory.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n \r\n     name = models.CharField(\r\n         _(\"Category Name\"),\r\n         max_length=100,\r\n"
                },
                {
                    "date": 1738931437104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,22 @@\n         return self.name\r\n \r\n # models Product ########\r\n class Product(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a product with detailed attributes.\r\n+    - `name`: Unique name of the product.\r\n+    - `description`: Description of the product.\r\n+    - `category`: Foreign key linking the product to a specific category.\r\n+    - `price`: Product price with minimum validation.\r\n+    - `discount_percentage`: Optional discount on the product.\r\n+    - `stock_quantity`: Available stock count.\r\n+    - `status`: Availability status (available, out_of_stock, discontinued).\r\n+    - `image`: Optional image of the product.\r\n+    - `favorite`, `bestseller`, `recommended`: Flags for product categorization.\r\n+    \"\"\"\r\n+    \r\n     STATUS_CHOICES = [\r\n         ('available', _('Available')),\r\n         ('out_of_stock', _('Out of Stock')),\r\n         ('discontinued', _('Discontinued'))\r\n"
                },
                {
                    "date": 1738931457343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,8 +356,14 @@\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n ##### models Shopping Cart ########\r\n class ShoppingCart(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a shopping cart for a user.\r\n+    - `user`: Foreign key linking the cart to a specific user.\r\n+    - `is_active`: Status indicating whether the cart is active.\r\n+    \"\"\"\r\n     user = models.ForeignKey(\r\n         CustomUser, \r\n         on_delete=models.CASCADE,\r\n         verbose_name=_(\"Cart Owner\")\r\n"
                },
                {
                    "date": 1738931474448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,8 +376,16 @@\n     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n ######### models cartItem #########\r\n class CartItem(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an item within a shopping cart.\r\n+    - `cart`: Foreign key linking the item to a specific shopping cart.\r\n+    - `product`: Foreign key linking the item to a specific product.\r\n+    - `quantity`: Quantity of the product within the cart.\r\n+    \"\"\"\r\n+    \r\n     cart = models.ForeignKey(\r\n         ShoppingCart, \r\n         related_name='cart_items', \r\n         on_delete=models.CASCADE,\r\n"
                },
                {
                    "date": 1738931515783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,8 +404,17 @@\n     history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n ###### model oder   ######\r\n class Order(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an order placed by a user.\r\n+    - `user`: Foreign key linking the order to a specific customer.\r\n+    - `status`: Order status (pending, processing, shipped, delivered, cancelled).\r\n+    - `total_price`: Total price of the order.\r\n+    - `shipping_address`: Address for order delivery.\r\n+    \"\"\"\r\n+    \r\n     STATUS_CHOICES = [\r\n         ('pending', _('Pending')),\r\n         ('processing', _('Processing')),\r\n         ('shipped', _('Shipped')),\r\n"
                },
                {
                    "date": 1738931550331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,8 +445,10 @@\n     history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n ###### model oderItem   ######\r\n class OrderItem(BaseModel):\r\n+    \r\n+    \r\n     order = models.ForeignKey(\r\n         Order, \r\n         related_name='items', \r\n         on_delete=models.CASCADE,\r\n"
                },
                {
                    "date": 1738931567625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,8 +446,17 @@\n \r\n ###### model oderItem   ######\r\n class OrderItem(BaseModel):\r\n     \r\n+    \"\"\"\r\n+    Model representing an item in an order.\r\n+\r\n+    - `order`: ForeignKey linking the item to a specific order. \r\n+    - `product`: ForeignKey linking the item to a specific product.\r\n+    - `quantity`: The number of products ordered.\r\n+    - `price_at_purchase`: The price of the product at the time of purchase.\r\n+    - `history`: Historical record for tracking changes to the OrderItem model.\r\n+    \"\"\"\r\n     \r\n     order = models.ForeignKey(\r\n         Order, \r\n         related_name='items', \r\n"
                },
                {
                    "date": 1738931680070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,8 +481,20 @@\n     \r\n ###### model Reviews   ######   \r\n class Review(BaseModel):\r\n     \r\n+    \"\"\"\r\n+    Model representing a review for a product.\r\n+\r\n+    - `product`: ForeignKey linking the review to a specific product.\r\n+    - `user`: ForeignKey linking the review to the user who created it.\r\n+    - `rating`: Rating given by the user (from 1 to 5).\r\n+    - `comment`: Optional comment provided by the user.\r\n+    - `review_date`: Timestamp indicating when the review was posted.\r\n+    - `recommended`: Whether the user recommends the product or not (neutral, recommended, or not recommended).\r\n+    - `history`: Historical record for tracking changes to the Review model.\r\n+    \"\"\"\r\n+    \r\n     RATING_CHOICES = [\r\n         (1, _('1 - Very Unsatisfied')),\r\n         (2, _('2 - Unsatisfied')),\r\n         (3, _('3 - Average')),\r\n"
                },
                {
                    "date": 1738932176666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \r\n     name = models.CharField(\r\n         _(\"Category Name\"),\r\n         max_length=100,\r\n-        unique=True\r\n+        unique=False\r\n     )\r\n     \r\n     parent = models.ForeignKey(\r\n         ParentCategory,\r\n"
                },
                {
                    "date": 1738940401907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n         verbose_name_plural = _(\"Categories\")\r\n         ordering = ['name']\r\n \r\n     def __str__(self):\r\n-        return self.name\r\n+        return f\"{self.name} ({self.parent})\"\r\n \r\n # models Product ########\r\n class Product(BaseModel):\r\n     \r\n"
                },
                {
                    "date": 1738940682622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,39 +175,39 @@\n     \r\n     \r\n     history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-####### MODEL PARENTCATEGORY ########\r\n-class ParentCategory(BaseModel):\r\n+# ####### MODEL PARENTCATEGORY ########\r\n+# class ParentCategory(BaseModel):\r\n     \r\n-    \"\"\"\r\n-    Model representing a parent category for product categorization.\r\n-    - `name`: Unique name of the parent category.\r\n-    - `description`: Optional description of the parent category.\r\n-    - Historical tracking enabled for change logs.\r\n-    \"\"\"\r\n+#     \"\"\"\r\n+#     Model representing a parent category for product categorization.\r\n+#     - `name`: Unique name of the parent category.\r\n+#     - `description`: Optional description of the parent category.\r\n+#     - Historical tracking enabled for change logs.\r\n+#     \"\"\"\r\n     \r\n-    name = models.CharField(\r\n-        _(\"Parent Category Name\"),\r\n-        max_length=100,\r\n-        unique=True\r\n-    )\r\n-    description = models.TextField(\r\n-        _(\"Parent Category Description\"),\r\n-        blank=True\r\n-    )\r\n-    history = HistoricalRecords(\r\n-        table_name='ParentCategory_history',\r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n+#     name = models.CharField(\r\n+#         _(\"Parent Category Name\"),\r\n+#         max_length=100,\r\n+#         unique=True\r\n+#     )\r\n+#     description = models.TextField(\r\n+#         _(\"Parent Category Description\"),\r\n+#         blank=True\r\n+#     )\r\n+#     history = HistoricalRecords(\r\n+#         table_name='ParentCategory_history',\r\n+#         history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+#     )\r\n \r\n-    class Meta:\r\n-        verbose_name = _(\"Parent Category\")\r\n-        verbose_name_plural = _(\"Parent Categories\")\r\n-        ordering = ['name']\r\n+#     class Meta:\r\n+#         verbose_name = _(\"Parent Category\")\r\n+#         verbose_name_plural = _(\"Parent Categories\")\r\n+#         ordering = ['name']\r\n \r\n-    def __str__(self):\r\n-        return self.name\r\n+#     def __str__(self):\r\n+#         return self.name\r\n \r\n ###### Model CATEGORY#####\r\n class Category(BaseModel):\r\n     \"\"\"\r\n@@ -222,16 +222,16 @@\n         max_length=100,\r\n         unique=False\r\n     )\r\n     \r\n-    parent = models.ForeignKey(\r\n-        ParentCategory,\r\n-        null=True,\r\n-        blank=True,\r\n-        on_delete=models.SET_NULL,\r\n-        related_name='categories',\r\n-        verbose_name=_(\"Parent Category\")\r\n-    )\r\n+    # parent = models.ForeignKey(\r\n+    #     ParentCategory,\r\n+    #     null=True,\r\n+    #     blank=True,\r\n+    #     on_delete=models.SET_NULL,\r\n+    #     related_name='categories',\r\n+    #     verbose_name=_(\"Parent Category\")\r\n+    # )\r\n     history = HistoricalRecords(\r\n         table_name='Category_history',\r\n         history_id_field=models.UUIDField(default=uuid.uuid4)\r\n     )\r\n@@ -241,9 +241,9 @@\n         verbose_name_plural = _(\"Categories\")\r\n         ordering = ['name']\r\n \r\n     def __str__(self):\r\n-        return f\"{self.name} ({self.parent})\"\r\n+        return f\"{self.name} \"\r\n \r\n # models Product ########\r\n class Product(BaseModel):\r\n     \r\n"
                },
                {
                    "date": 1738941941123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,39 +175,39 @@\n     \r\n     \r\n     history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-# ####### MODEL PARENTCATEGORY ########\r\n-# class ParentCategory(BaseModel):\r\n+####### MODEL PARENTCATEGORY ########\r\n+class ParentCategory(BaseModel):\r\n     \r\n-#     \"\"\"\r\n-#     Model representing a parent category for product categorization.\r\n-#     - `name`: Unique name of the parent category.\r\n-#     - `description`: Optional description of the parent category.\r\n-#     - Historical tracking enabled for change logs.\r\n-#     \"\"\"\r\n+    \"\"\"\r\n+    Model representing a parent category for product categorization.\r\n+    - `name`: Unique name of the parent category.\r\n+    - `description`: Optional description of the parent category.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n     \r\n-#     name = models.CharField(\r\n-#         _(\"Parent Category Name\"),\r\n-#         max_length=100,\r\n-#         unique=True\r\n-#     )\r\n-#     description = models.TextField(\r\n-#         _(\"Parent Category Description\"),\r\n-#         blank=True\r\n-#     )\r\n-#     history = HistoricalRecords(\r\n-#         table_name='ParentCategory_history',\r\n-#         history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-#     )\r\n+    name = models.CharField(\r\n+        _(\"Parent Category Name\"),\r\n+        max_length=100,\r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Parent Category Description\"),\r\n+        blank=True\r\n+    )\r\n+    history = HistoricalRecords(\r\n+        table_name='ParentCategory_history',\r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n \r\n-#     class Meta:\r\n-#         verbose_name = _(\"Parent Category\")\r\n-#         verbose_name_plural = _(\"Parent Categories\")\r\n-#         ordering = ['name']\r\n+    class Meta:\r\n+        verbose_name = _(\"Parent Category\")\r\n+        verbose_name_plural = _(\"Parent Categories\")\r\n+        ordering = ['name']\r\n \r\n-#     def __str__(self):\r\n-#         return self.name\r\n+    def __str__(self):\r\n+        return self.name\r\n \r\n ###### Model CATEGORY#####\r\n class Category(BaseModel):\r\n     \"\"\"\r\n@@ -222,16 +222,16 @@\n         max_length=100,\r\n         unique=False\r\n     )\r\n     \r\n-    # parent = models.ForeignKey(\r\n-    #     ParentCategory,\r\n-    #     null=True,\r\n-    #     blank=True,\r\n-    #     on_delete=models.SET_NULL,\r\n-    #     related_name='categories',\r\n-    #     verbose_name=_(\"Parent Category\")\r\n-    # )\r\n+    parent = models.ForeignKey(\r\n+        ParentCategory,\r\n+        null=True,\r\n+        blank=True,\r\n+        on_delete=models.SET_NULL,\r\n+        related_name='categories',\r\n+        verbose_name=_(\"Parent Category\")\r\n+    )\r\n     history = HistoricalRecords(\r\n         table_name='Category_history',\r\n         history_id_field=models.UUIDField(default=uuid.uuid4)\r\n     )\r\n@@ -241,9 +241,9 @@\n         verbose_name_plural = _(\"Categories\")\r\n         ordering = ['name']\r\n \r\n     def __str__(self):\r\n-        return f\"{self.name} \"\r\n+        return f\"{self.name} {self.parent}\"\r\n \r\n # models Product ########\r\n class Product(BaseModel):\r\n     \r\n"
                },
                {
                    "date": 1738942270529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,16 +222,8 @@\n         max_length=100,\r\n         unique=False\r\n     )\r\n     \r\n-    parent = models.ForeignKey(\r\n-        ParentCategory,\r\n-        null=True,\r\n-        blank=True,\r\n-        on_delete=models.SET_NULL,\r\n-        related_name='categories',\r\n-        verbose_name=_(\"Parent Category\")\r\n-    )\r\n     history = HistoricalRecords(\r\n         table_name='Category_history',\r\n         history_id_field=models.UUIDField(default=uuid.uuid4)\r\n     )\r\n@@ -241,9 +233,9 @@\n         verbose_name_plural = _(\"Categories\")\r\n         ordering = ['name']\r\n \r\n     def __str__(self):\r\n-        return f\"{self.name} {self.parent}\"\r\n+        return f\"{self.name}  \"\r\n \r\n # models Product ########\r\n class Product(BaseModel):\r\n     \r\n"
                },
                {
                    "date": 1738942293870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,8 +271,16 @@\n         on_delete=models.CASCADE, \r\n         related_name='products',\r\n         verbose_name=_(\"Product Category\")\r\n     )\r\n+    parent = models.ForeignKey(\r\n+        ParentCategory,\r\n+        null=True,\r\n+        blank=True,\r\n+        on_delete=models.SET_NULL,\r\n+        related_name='categories',\r\n+        verbose_name=_(\"Parent Category\")\r\n+    )\r\n     \r\n     price = models.DecimalField(\r\n         _(\"Product Price\"), \r\n         max_digits=10, \r\n"
                },
                {
                    "date": 1738942453270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,12 +190,9 @@\n         _(\"Parent Category Name\"),\r\n         max_length=100,\r\n         unique=True\r\n     )\r\n-    description = models.TextField(\r\n-        _(\"Parent Category Description\"),\r\n-        blank=True\r\n-    )\r\n+     \r\n     history = HistoricalRecords(\r\n         table_name='ParentCategory_history',\r\n         history_id_field=models.UUIDField(default=uuid.uuid4)\r\n     )\r\n@@ -219,9 +216,9 @@\n \r\n     name = models.CharField(\r\n         _(\"Category Name\"),\r\n         max_length=100,\r\n-        unique=False\r\n+        unique=True\r\n     )\r\n     \r\n     history = HistoricalRecords(\r\n         table_name='Category_history',\r\n"
                },
                {
                    "date": 1738942767137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n     - Historical tracking enabled for change logs.\r\n     \"\"\"\r\n     \r\n     name = models.CharField(\r\n-        _(\"Parent Category Name\"),\r\n+        _(\"Teint Category Name\"),\r\n         max_length=100,\r\n         unique=True\r\n     )\r\n      \r\n@@ -266,17 +266,17 @@\n     category = models.ForeignKey(\r\n         Category, \r\n         on_delete=models.CASCADE, \r\n         related_name='products',\r\n-        verbose_name=_(\"Product Category\")\r\n+        verbose_name=_(\" Category\")\r\n     )\r\n     parent = models.ForeignKey(\r\n         ParentCategory,\r\n         null=True,\r\n         blank=True,\r\n         on_delete=models.SET_NULL,\r\n         related_name='categories',\r\n-        verbose_name=_(\"Parent Category\")\r\n+        verbose_name=_(\"Teint Category\")\r\n     )\r\n     \r\n     price = models.DecimalField(\r\n         _(\"Product Price\"), \r\n"
                },
                {
                    "date": 1738943114521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,8 +398,11 @@\n         default=1\r\n     )\r\n \r\n     history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.product.name} - {self.quantity}\"\r\n \r\n ###### model oder   ######\r\n class Order(BaseModel):\r\n     \r\n@@ -439,8 +442,11 @@\n         _(\"Shipping Address\")\r\n     )\r\n     \r\n     history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"Order {self.id} - {self.user.username}\"\r\n \r\n ###### model oderItem   ######\r\n class OrderItem(BaseModel):\r\n     \r\n"
                },
                {
                    "date": 1738943185049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,8 +481,11 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n+    def __str__(self):\r\n+        return f\"{self.product.name} - {self.quantity}\"\r\n+    \r\n ###### model Reviews   ######   \r\n class Review(BaseModel):\r\n     \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1738943243174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,554 @@\n+from django.db import models\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.validators import MinValueValidator, MaxValueValidator\r\n+from django.dispatch import receiver\r\n+from django.utils import timezone\r\n+from django.utils.translation import gettext_lazy as _\r\n+from django.core.exceptions import ValidationError\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+import uuid\r\n+import os\r\n+from simple_history.models import HistoricalRecords\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+\r\n+##### models  base #####\r\n+class BaseModel(SafeDeleteModel):\r\n+    \r\n+    \"\"\"\r\n+    Abstract base model that provides common fields for all other models, including:\r\n+    - `id`: A unique UUID identifier for the model instance.\r\n+    - `created_at`: Timestamp for the creation of the record.\r\n+    - `updated_at`: Timestamp for the last update of the record.\r\n+    - Soft delete functionality using SafeDelete with cascade deletion.\r\n+    \"\"\"\r\n+    \r\n+    id = models.UUIDField(\r\n+        _(\"Unique Identifier\"), \r\n+        primary_key=True, \r\n+        default=uuid.uuid4, \r\n+        editable=False\r\n+    )\r\n+    created_at = models.DateTimeField(\r\n+        _(\"Creation Timestamp\"), \r\n+        auto_now_add=True\r\n+    )\r\n+    updated_at = models.DateTimeField(\r\n+        _(\"Last Update Timestamp\"), \r\n+        auto_now=True\r\n+    )\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    class Meta:\r\n+        abstract = True\r\n+\r\n+##### models contry ####\r\n+class Country(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a country.\r\n+    - `name`: Unique name of the country (e.g., \"France\").\r\n+    - `code`: ISO code of the country (maximum 3 characters).\r\n+    - Historical tracking enabled to maintain change logs.\r\n+    \"\"\"\r\n+    name = models.CharField(\r\n+        _(\"Country Name\"), \r\n+        max_length=100, \r\n+        unique=True\r\n+    )\r\n+    code = models.CharField(\r\n+        _(\"Country Code\"), \r\n+        max_length=3, \r\n+        unique=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(\r\n+        table_name='Contry_history', \r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+#### models City ########\r\n+class City(BaseModel):\r\n+    \"\"\"\r\n+    Model representing a city.\r\n+    - `name`: Name of the city.\r\n+    - `country`: Foreign key to associate the city with a specific country.\r\n+    - Unique constraint to ensure no duplicate city-country combinations.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n+    name = models.CharField(\r\n+        _(\"City Name\"), \r\n+        max_length=100\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='cities',\r\n+        verbose_name=_(\"Associated Country\")\r\n+    )\r\n+    \r\n+    class Meta:\r\n+        unique_together = ['name', 'country']\r\n+        verbose_name = _(\"City\")\r\n+        verbose_name_plural = _(\"Cities\")\r\n+    \r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.name}, {self.country.name}\"\r\n+\r\n+#### models User  personaliser ########\r\n+class CustomUser(AbstractUser, BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Customized user model inheriting from Django's AbstractUser.\r\n+    - `phone`: User's phone number.\r\n+    - `gender`: Gender with predefined choices (Male, Female, Other).\r\n+    - `country`: Associated country of the user (optional).\r\n+    - `city`: Associated city of the user (optional).\r\n+    - History tracking and login/logout signals to manage online status.\r\n+    \"\"\"\r\n+    GENDER_CHOICES = [\r\n+        ('M', _('Male')),\r\n+        ('F', _('Female')),\r\n+        ('O', _('Other'))\r\n+    ]\r\n+\r\n+    phone = models.CharField(\r\n+        _(\"Phone Number\"), \r\n+        max_length=15, \r\n+        blank=True\r\n+    )\r\n+    gender = models.CharField(\r\n+        _(\"Gender\"), \r\n+        max_length=1, \r\n+        choices=GENDER_CHOICES, \r\n+        blank=True\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User Country\")\r\n+    )\r\n+    city = models.ForeignKey(\r\n+        City, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User City\")\r\n+    )\r\n+    \r\n+    # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n+    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+####### MODEL PARENTCATEGORY ########\r\n+class ParentCategory(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a parent category for product categorization.\r\n+    - `name`: Unique name of the parent category.\r\n+    - `description`: Optional description of the parent category.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n+    \r\n+    name = models.CharField(\r\n+        _(\"Teint Category Name\"),\r\n+        max_length=100,\r\n+        unique=True\r\n+    )\r\n+     \r\n+    history = HistoricalRecords(\r\n+        table_name='ParentCategory_history',\r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    class Meta:\r\n+        verbose_name = _(\"Parent Category\")\r\n+        verbose_name_plural = _(\"Parent Categories\")\r\n+        ordering = ['name']\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+###### Model CATEGORY#####\r\n+class Category(BaseModel):\r\n+    \"\"\"\r\n+    Model representing a category, potentially linked to a parent category.\r\n+    - `name`: Unique name of the category.\r\n+    - `parent`: Optional foreign key linking to a ParentCategory.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n+\r\n+    name = models.CharField(\r\n+        _(\"Category Name\"),\r\n+        max_length=100,\r\n+        unique=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(\r\n+        table_name='Category_history',\r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    class Meta:\r\n+        verbose_name = _(\"Category\")\r\n+        verbose_name_plural = _(\"Categories\")\r\n+        ordering = ['name']\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.name}  \"\r\n+\r\n+# models Product ########\r\n+class Product(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a product with detailed attributes.\r\n+    - `name`: Unique name of the product.\r\n+    - `description`: Description of the product.\r\n+    - `category`: Foreign key linking the product to a specific category.\r\n+    - `price`: Product price with minimum validation.\r\n+    - `discount_percentage`: Optional discount on the product.\r\n+    - `stock_quantity`: Available stock count.\r\n+    - `status`: Availability status (available, out_of_stock, discontinued).\r\n+    - `image`: Optional image of the product.\r\n+    - `favorite`, `bestseller`, `recommended`: Flags for product categorization.\r\n+    \"\"\"\r\n+    \r\n+    STATUS_CHOICES = [\r\n+        ('available', _('Available')),\r\n+        ('out_of_stock', _('Out of Stock')),\r\n+        ('discontinued', _('Discontinued'))\r\n+    ]\r\n+\r\n+    name = models.CharField(\r\n+        _(\"Product Name\"), \r\n+        max_length=200, \r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Product Description\")\r\n+    )\r\n+    category = models.ForeignKey(\r\n+        Category, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='products',\r\n+        verbose_name=_(\" Category\")\r\n+    )\r\n+    parent = models.ForeignKey(\r\n+        ParentCategory,\r\n+        null=True,\r\n+        blank=True,\r\n+        on_delete=models.SET_NULL,\r\n+        related_name='categories',\r\n+        verbose_name=_(\"Teint Category\")\r\n+    )\r\n+    \r\n+    price = models.DecimalField(\r\n+        _(\"Product Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0.01)]\r\n+    )\r\n+    discount_percentage = models.DecimalField(\r\n+        _(\"Discount Percentage\"), \r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    stock_quantity = models.PositiveIntegerField(\r\n+        _(\"Stock Quantity\"), \r\n+        default=0\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Product Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='available'\r\n+    )\r\n+    \r\n+    image = models.ImageField(\r\n+        _(\"Product Image\"), \r\n+        upload_to='products/', \r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+##### models Shopping Cart ########\r\n+class ShoppingCart(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a shopping cart for a user.\r\n+    - `user`: Foreign key linking the cart to a specific user.\r\n+    - `is_active`: Status indicating whether the cart is active.\r\n+    \"\"\"\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Cart Owner\")\r\n+    )\r\n+    is_active = models.BooleanField(\r\n+        _(\"Cart Active Status\"), \r\n+        default=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+######### models cartItem #########\r\n+class CartItem(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an item within a shopping cart.\r\n+    - `cart`: Foreign key linking the item to a specific shopping cart.\r\n+    - `product`: Foreign key linking the item to a specific product.\r\n+    - `quantity`: Quantity of the product within the cart.\r\n+    \"\"\"\r\n+    \r\n+    cart = models.ForeignKey(\r\n+        ShoppingCart, \r\n+        related_name='cart_items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Shopping Cart\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\"), \r\n+        default=1\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.product.name} - {self.quantity}\"\r\n+\r\n+###### model oder   ######\r\n+class Order(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an order placed by a user.\r\n+    - `user`: Foreign key linking the order to a specific customer.\r\n+    - `status`: Order status (pending, processing, shipped, delivered, cancelled).\r\n+    - `total_price`: Total price of the order.\r\n+    - `shipping_address`: Address for order delivery.\r\n+    \"\"\"\r\n+    \r\n+    STATUS_CHOICES = [\r\n+        ('pending', _('Pending')),\r\n+        ('processing', _('Processing')),\r\n+        ('shipped', _('Shipped')),\r\n+        ('delivered', _('Delivered')),\r\n+        ('cancelled', _('Cancelled'))\r\n+    ]\r\n+\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Order Customer\")\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Order Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='pending'\r\n+    )\r\n+    total_price = models.DecimalField(\r\n+        _(\"Total Order Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    shipping_address = models.TextField(\r\n+        _(\"Shipping Address\")\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"Order {self.id} - {self.user.username}\"\r\n+\r\n+###### model oderItem   ######\r\n+class OrderItem(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an item in an order.\r\n+\r\n+    - `order`: ForeignKey linking the item to a specific order. \r\n+    - `product`: ForeignKey linking the item to a specific product.\r\n+    - `quantity`: The number of products ordered.\r\n+    - `price_at_purchase`: The price of the product at the time of purchase.\r\n+    - `history`: Historical record for tracking changes to the OrderItem model.\r\n+    \"\"\"\r\n+    \r\n+    order = models.ForeignKey(\r\n+        Order, \r\n+        related_name='items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Associated Order\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Ordered Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\")\r\n+    )\r\n+    price_at_purchase = models.DecimalField(\r\n+        _(\"Product Price at Purchase\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.product.name} - {self.quantity}\"\r\n+    \r\n+###### model Reviews   ######   \r\n+class Review(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a review for a product.\r\n+\r\n+    - `product`: ForeignKey linking the review to a specific product.\r\n+    - `user`: ForeignKey linking the review to the user who created it.\r\n+    - `rating`: Rating given by the user (from 1 to 5).\r\n+    - `comment`: Optional comment provided by the user.\r\n+    - `review_date`: Timestamp indicating when the review was posted.\r\n+    - `recommended`: Whether the user recommends the product or not (neutral, recommended, or not recommended).\r\n+    - `history`: Historical record for tracking changes to the Review model.\r\n+    \"\"\"\r\n+    \r\n+    RATING_CHOICES = [\r\n+        (1, _('1 - Very Unsatisfied')),\r\n+        (2, _('2 - Unsatisfied')),\r\n+        (3, _('3 - Average')),\r\n+        (4, _('4 - Satisfied')),\r\n+        (5, _('5 - Excellent'))\r\n+    ]\r\n+\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        related_name='reviews',\r\n+        verbose_name=_(\"Associated Product\")\r\n+    )\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"User\")\r\n+    )\r\n+    rating = models.IntegerField(\r\n+        _(\"Rating\"), \r\n+        choices=RATING_CHOICES\r\n+    )\r\n+    comment = models.TextField(\r\n+        _(\"Comment\"),\r\n+        max_length=1000,\r\n+        blank=True\r\n+    )\r\n+    review_date = models.DateTimeField(\r\n+        _(\"Review Date\"),\r\n+        auto_now_add=True\r\n+    )\r\n+    RECOMMENDATION_CHOICES = [\r\n+    ('not_recommended', _('Not Recommended')),\r\n+    ('neutral', _('Neutral')),\r\n+    ('recommended', _('Recommended'))\r\n+    ]\r\n+\r\n+    recommended = models.CharField(\r\n+        _(\"Recommendation Status\"),\r\n+        max_length=20,\r\n+        choices=RECOMMENDATION_CHOICES,\r\n+        default='neutral'\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    class Meta:\r\n+        unique_together = ['product', 'user']\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738946749627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,560 +373,12 @@\n         default=True\r\n     )\r\n     \r\n     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-######### models cartItem #########\r\n-class CartItem(BaseModel):\r\n     \r\n-    \"\"\"\r\n-    Model representing an item within a shopping cart.\r\n-    - `cart`: Foreign key linking the item to a specific shopping cart.\r\n-    - `product`: Foreign key linking the item to a specific product.\r\n-    - `quantity`: Quantity of the product within the cart.\r\n-    \"\"\"\r\n-    \r\n-    cart = models.ForeignKey(\r\n-        ShoppingCart, \r\n-        related_name='cart_items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Shopping Cart\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\"), \r\n-        default=1\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n     def __str__(self):\r\n-        return f\"{self.product.name} - {self.quantity}\"\r\n+        return f\"Cart {self.id} - {self.user.username}\"\r\n \r\n-###### model oder   ######\r\n-class Order(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing an order placed by a user.\r\n-    - `user`: Foreign key linking the order to a specific customer.\r\n-    - `status`: Order status (pending, processing, shipped, delivered, cancelled).\r\n-    - `total_price`: Total price of the order.\r\n-    - `shipping_address`: Address for order delivery.\r\n-    \"\"\"\r\n-    \r\n-    STATUS_CHOICES = [\r\n-        ('pending', _('Pending')),\r\n-        ('processing', _('Processing')),\r\n-        ('shipped', _('Shipped')),\r\n-        ('delivered', _('Delivered')),\r\n-        ('cancelled', _('Cancelled'))\r\n-    ]\r\n-\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Order Customer\")\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Order Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='pending'\r\n-    )\r\n-    total_price = models.DecimalField(\r\n-        _(\"Total Order Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    shipping_address = models.TextField(\r\n-        _(\"Shipping Address\")\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return f\"Order {self.id} - {self.user.username}\"\r\n-\r\n-###### model oderItem   ######\r\n-class OrderItem(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing an item in an order.\r\n-\r\n-    - `order`: ForeignKey linking the item to a specific order. \r\n-    - `product`: ForeignKey linking the item to a specific product.\r\n-    - `quantity`: The number of products ordered.\r\n-    - `price_at_purchase`: The price of the product at the time of purchase.\r\n-    - `history`: Historical record for tracking changes to the OrderItem model.\r\n-    \"\"\"\r\n-    \r\n-    order = models.ForeignKey(\r\n-        Order, \r\n-        related_name='items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Associated Order\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Ordered Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\")\r\n-    )\r\n-    price_at_purchase = models.DecimalField(\r\n-        _(\"Product Price at Purchase\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.product.name} - {self.quantity}\"\r\n-    \r\n-###### model Reviews   ######   \r\n-class Review(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a review for a product.\r\n-\r\n-    - `product`: ForeignKey linking the review to a specific product.\r\n-    - `user`: ForeignKey linking the review to the user who created it.\r\n-    - `rating`: Rating given by the user (from 1 to 5).\r\n-    - `comment`: Optional comment provided by the user.\r\n-    - `review_date`: Timestamp indicating when the review was posted.\r\n-    - `recommended`: Whether the user recommends the product or not (neutral, recommended, or not recommended).\r\n-    - `history`: Historical record for tracking changes to the Review model.\r\n-    \"\"\"\r\n-    \r\n-    RATING_CHOICES = [\r\n-        (1, _('1 - Very Unsatisfied')),\r\n-        (2, _('2 - Unsatisfied')),\r\n-        (3, _('3 - Average')),\r\n-        (4, _('4 - Satisfied')),\r\n-        (5, _('5 - Excellent'))\r\n-    ]\r\n-\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        related_name='reviews',\r\n-        verbose_name=_(\"Associated Product\")\r\n-    )\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"User\")\r\n-    )\r\n-    rating = models.IntegerField(\r\n-        _(\"Rating\"), \r\n-        choices=RATING_CHOICES\r\n-    )\r\n-    comment = models.TextField(\r\n-        _(\"Comment\"),\r\n-        max_length=1000,\r\n-        blank=True\r\n-    )\r\n-    review_date = models.DateTimeField(\r\n-        _(\"Review Date\"),\r\n-        auto_now_add=True\r\n-    )\r\n-    RECOMMENDATION_CHOICES = [\r\n-    ('not_recommended', _('Not Recommended')),\r\n-    ('neutral', _('Neutral')),\r\n-    ('recommended', _('Recommended'))\r\n-    ]\r\n-\r\n-    recommended = models.CharField(\r\n-        _(\"Recommendation Status\"),\r\n-        max_length=20,\r\n-        choices=RECOMMENDATION_CHOICES,\r\n-        default='neutral'\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    class Meta:\r\n-        unique_together = ['product', 'user']\r\n-    \n-from django.db import models\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.validators import MinValueValidator, MaxValueValidator\r\n-from django.dispatch import receiver\r\n-from django.utils import timezone\r\n-from django.utils.translation import gettext_lazy as _\r\n-from django.core.exceptions import ValidationError\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-import uuid\r\n-import os\r\n-from simple_history.models import HistoricalRecords\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-\r\n-##### models  base #####\r\n-class BaseModel(SafeDeleteModel):\r\n-    \r\n-    \"\"\"\r\n-    Abstract base model that provides common fields for all other models, including:\r\n-    - `id`: A unique UUID identifier for the model instance.\r\n-    - `created_at`: Timestamp for the creation of the record.\r\n-    - `updated_at`: Timestamp for the last update of the record.\r\n-    - Soft delete functionality using SafeDelete with cascade deletion.\r\n-    \"\"\"\r\n-    \r\n-    id = models.UUIDField(\r\n-        _(\"Unique Identifier\"), \r\n-        primary_key=True, \r\n-        default=uuid.uuid4, \r\n-        editable=False\r\n-    )\r\n-    created_at = models.DateTimeField(\r\n-        _(\"Creation Timestamp\"), \r\n-        auto_now_add=True\r\n-    )\r\n-    updated_at = models.DateTimeField(\r\n-        _(\"Last Update Timestamp\"), \r\n-        auto_now=True\r\n-    )\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    class Meta:\r\n-        abstract = True\r\n-\r\n-##### models contry ####\r\n-class Country(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a country.\r\n-    - `name`: Unique name of the country (e.g., \"France\").\r\n-    - `code`: ISO code of the country (maximum 3 characters).\r\n-    - Historical tracking enabled to maintain change logs.\r\n-    \"\"\"\r\n-    name = models.CharField(\r\n-        _(\"Country Name\"), \r\n-        max_length=100, \r\n-        unique=True\r\n-    )\r\n-    code = models.CharField(\r\n-        _(\"Country Code\"), \r\n-        max_length=3, \r\n-        unique=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(\r\n-        table_name='Contry_history', \r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-#### models City ########\r\n-class City(BaseModel):\r\n-    \"\"\"\r\n-    Model representing a city.\r\n-    - `name`: Name of the city.\r\n-    - `country`: Foreign key to associate the city with a specific country.\r\n-    - Unique constraint to ensure no duplicate city-country combinations.\r\n-    - Historical tracking enabled for change logs.\r\n-    \"\"\"\r\n-    name = models.CharField(\r\n-        _(\"City Name\"), \r\n-        max_length=100\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='cities',\r\n-        verbose_name=_(\"Associated Country\")\r\n-    )\r\n-    \r\n-    class Meta:\r\n-        unique_together = ['name', 'country']\r\n-        verbose_name = _(\"City\")\r\n-        verbose_name_plural = _(\"Cities\")\r\n-    \r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.name}, {self.country.name}\"\r\n-\r\n-#### models User  personaliser ########\r\n-class CustomUser(AbstractUser, BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Customized user model inheriting from Django's AbstractUser.\r\n-    - `phone`: User's phone number.\r\n-    - `gender`: Gender with predefined choices (Male, Female, Other).\r\n-    - `country`: Associated country of the user (optional).\r\n-    - `city`: Associated city of the user (optional).\r\n-    - History tracking and login/logout signals to manage online status.\r\n-    \"\"\"\r\n-    GENDER_CHOICES = [\r\n-        ('M', _('Male')),\r\n-        ('F', _('Female')),\r\n-        ('O', _('Other'))\r\n-    ]\r\n-\r\n-    phone = models.CharField(\r\n-        _(\"Phone Number\"), \r\n-        max_length=15, \r\n-        blank=True\r\n-    )\r\n-    gender = models.CharField(\r\n-        _(\"Gender\"), \r\n-        max_length=1, \r\n-        choices=GENDER_CHOICES, \r\n-        blank=True\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User Country\")\r\n-    )\r\n-    city = models.ForeignKey(\r\n-        City, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User City\")\r\n-    )\r\n-    \r\n-    # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-####### MODEL PARENTCATEGORY ########\r\n-class ParentCategory(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a parent category for product categorization.\r\n-    - `name`: Unique name of the parent category.\r\n-    - `description`: Optional description of the parent category.\r\n-    - Historical tracking enabled for change logs.\r\n-    \"\"\"\r\n-    \r\n-    name = models.CharField(\r\n-        _(\"Teint Category Name\"),\r\n-        max_length=100,\r\n-        unique=True\r\n-    )\r\n-     \r\n-    history = HistoricalRecords(\r\n-        table_name='ParentCategory_history',\r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    class Meta:\r\n-        verbose_name = _(\"Parent Category\")\r\n-        verbose_name_plural = _(\"Parent Categories\")\r\n-        ordering = ['name']\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-###### Model CATEGORY#####\r\n-class Category(BaseModel):\r\n-    \"\"\"\r\n-    Model representing a category, potentially linked to a parent category.\r\n-    - `name`: Unique name of the category.\r\n-    - `parent`: Optional foreign key linking to a ParentCategory.\r\n-    - Historical tracking enabled for change logs.\r\n-    \"\"\"\r\n-\r\n-    name = models.CharField(\r\n-        _(\"Category Name\"),\r\n-        max_length=100,\r\n-        unique=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(\r\n-        table_name='Category_history',\r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    class Meta:\r\n-        verbose_name = _(\"Category\")\r\n-        verbose_name_plural = _(\"Categories\")\r\n-        ordering = ['name']\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.name}  \"\r\n-\r\n-# models Product ########\r\n-class Product(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a product with detailed attributes.\r\n-    - `name`: Unique name of the product.\r\n-    - `description`: Description of the product.\r\n-    - `category`: Foreign key linking the product to a specific category.\r\n-    - `price`: Product price with minimum validation.\r\n-    - `discount_percentage`: Optional discount on the product.\r\n-    - `stock_quantity`: Available stock count.\r\n-    - `status`: Availability status (available, out_of_stock, discontinued).\r\n-    - `image`: Optional image of the product.\r\n-    - `favorite`, `bestseller`, `recommended`: Flags for product categorization.\r\n-    \"\"\"\r\n-    \r\n-    STATUS_CHOICES = [\r\n-        ('available', _('Available')),\r\n-        ('out_of_stock', _('Out of Stock')),\r\n-        ('discontinued', _('Discontinued'))\r\n-    ]\r\n-\r\n-    name = models.CharField(\r\n-        _(\"Product Name\"), \r\n-        max_length=200, \r\n-        unique=True\r\n-    )\r\n-    description = models.TextField(\r\n-        _(\"Product Description\")\r\n-    )\r\n-    category = models.ForeignKey(\r\n-        Category, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='products',\r\n-        verbose_name=_(\" Category\")\r\n-    )\r\n-    parent = models.ForeignKey(\r\n-        ParentCategory,\r\n-        null=True,\r\n-        blank=True,\r\n-        on_delete=models.SET_NULL,\r\n-        related_name='categories',\r\n-        verbose_name=_(\"Teint Category\")\r\n-    )\r\n-    \r\n-    price = models.DecimalField(\r\n-        _(\"Product Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0.01)]\r\n-    )\r\n-    discount_percentage = models.DecimalField(\r\n-        _(\"Discount Percentage\"), \r\n-        max_digits=5, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    stock_quantity = models.PositiveIntegerField(\r\n-        _(\"Stock Quantity\"), \r\n-        default=0\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Product Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='available'\r\n-    )\r\n-    \r\n-    image = models.ImageField(\r\n-        _(\"Product Image\"), \r\n-        upload_to='products/', \r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a best seller\r\n-    BESTSELLER_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    bestseller = models.CharField(\r\n-        max_length=3,\r\n-        choices=BESTSELLER_CHOICES,\r\n-        default='No',  # By default, the product is not a best seller\r\n-        verbose_name='Is the product a best seller?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    recommended = models.CharField(\r\n-        max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-##### models Shopping Cart ########\r\n-class ShoppingCart(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a shopping cart for a user.\r\n-    - `user`: Foreign key linking the cart to a specific user.\r\n-    - `is_active`: Status indicating whether the cart is active.\r\n-    \"\"\"\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Cart Owner\")\r\n-    )\r\n-    is_active = models.BooleanField(\r\n-        _(\"Cart Active Status\"), \r\n-        default=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n ######### models cartItem #########\r\n class CartItem(BaseModel):\r\n     \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1738946774490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,556 @@\n+from django.db import models\r\n+from django.contrib.auth.models import AbstractUser\r\n+from django.core.validators import MinValueValidator, MaxValueValidator\r\n+from django.dispatch import receiver\r\n+from django.utils import timezone\r\n+from django.utils.translation import gettext_lazy as _\r\n+from django.core.exceptions import ValidationError\r\n+from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n+import uuid\r\n+import os\r\n+from simple_history.models import HistoricalRecords\r\n+from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n+\r\n+##### models  base #####\r\n+class BaseModel(SafeDeleteModel):\r\n+    \r\n+    \"\"\"\r\n+    Abstract base model that provides common fields for all other models, including:\r\n+    - `id`: A unique UUID identifier for the model instance.\r\n+    - `created_at`: Timestamp for the creation of the record.\r\n+    - `updated_at`: Timestamp for the last update of the record.\r\n+    - Soft delete functionality using SafeDelete with cascade deletion.\r\n+    \"\"\"\r\n+    \r\n+    id = models.UUIDField(\r\n+        _(\"Unique Identifier\"), \r\n+        primary_key=True, \r\n+        default=uuid.uuid4, \r\n+        editable=False\r\n+    )\r\n+    created_at = models.DateTimeField(\r\n+        _(\"Creation Timestamp\"), \r\n+        auto_now_add=True\r\n+    )\r\n+    updated_at = models.DateTimeField(\r\n+        _(\"Last Update Timestamp\"), \r\n+        auto_now=True\r\n+    )\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n+\r\n+    class Meta:\r\n+        abstract = True\r\n+\r\n+##### models contry ####\r\n+class Country(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a country.\r\n+    - `name`: Unique name of the country (e.g., \"France\").\r\n+    - `code`: ISO code of the country (maximum 3 characters).\r\n+    - Historical tracking enabled to maintain change logs.\r\n+    \"\"\"\r\n+    name = models.CharField(\r\n+        _(\"Country Name\"), \r\n+        max_length=100, \r\n+        unique=True\r\n+    )\r\n+    code = models.CharField(\r\n+        _(\"Country Code\"), \r\n+        max_length=3, \r\n+        unique=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(\r\n+        table_name='Contry_history', \r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+#### models City ########\r\n+class City(BaseModel):\r\n+    \"\"\"\r\n+    Model representing a city.\r\n+    - `name`: Name of the city.\r\n+    - `country`: Foreign key to associate the city with a specific country.\r\n+    - Unique constraint to ensure no duplicate city-country combinations.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n+    name = models.CharField(\r\n+        _(\"City Name\"), \r\n+        max_length=100\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='cities',\r\n+        verbose_name=_(\"Associated Country\")\r\n+    )\r\n+    \r\n+    class Meta:\r\n+        unique_together = ['name', 'country']\r\n+        verbose_name = _(\"City\")\r\n+        verbose_name_plural = _(\"Cities\")\r\n+    \r\n+    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.name}, {self.country.name}\"\r\n+\r\n+#### models User  personaliser ########\r\n+class CustomUser(AbstractUser, BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Customized user model inheriting from Django's AbstractUser.\r\n+    - `phone`: User's phone number.\r\n+    - `gender`: Gender with predefined choices (Male, Female, Other).\r\n+    - `country`: Associated country of the user (optional).\r\n+    - `city`: Associated city of the user (optional).\r\n+    - History tracking and login/logout signals to manage online status.\r\n+    \"\"\"\r\n+    GENDER_CHOICES = [\r\n+        ('M', _('Male')),\r\n+        ('F', _('Female')),\r\n+        ('O', _('Other'))\r\n+    ]\r\n+\r\n+    phone = models.CharField(\r\n+        _(\"Phone Number\"), \r\n+        max_length=15, \r\n+        blank=True\r\n+    )\r\n+    gender = models.CharField(\r\n+        _(\"Gender\"), \r\n+        max_length=1, \r\n+        choices=GENDER_CHOICES, \r\n+        blank=True\r\n+    )\r\n+    country = models.ForeignKey(\r\n+        Country, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User Country\")\r\n+    )\r\n+    city = models.ForeignKey(\r\n+        City, \r\n+        on_delete=models.SET_NULL, \r\n+        null=True,\r\n+        verbose_name=_(\"User City\")\r\n+    )\r\n+    \r\n+    # Ajout de related_name pour éviter les conflits\r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='customuser_set',\r\n+        related_query_name='customuser',\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n+\r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n+\r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+    \r\n+    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+\r\n+####### MODEL PARENTCATEGORY ########\r\n+class ParentCategory(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a parent category for product categorization.\r\n+    - `name`: Unique name of the parent category.\r\n+    - `description`: Optional description of the parent category.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n+    \r\n+    name = models.CharField(\r\n+        _(\"Teint Category Name\"),\r\n+        max_length=100,\r\n+        unique=True\r\n+    )\r\n+     \r\n+    history = HistoricalRecords(\r\n+        table_name='ParentCategory_history',\r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    class Meta:\r\n+        verbose_name = _(\"Parent Category\")\r\n+        verbose_name_plural = _(\"Parent Categories\")\r\n+        ordering = ['name']\r\n+\r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+###### Model CATEGORY#####\r\n+class Category(BaseModel):\r\n+    \"\"\"\r\n+    Model representing a category, potentially linked to a parent category.\r\n+    - `name`: Unique name of the category.\r\n+    - `parent`: Optional foreign key linking to a ParentCategory.\r\n+    - Historical tracking enabled for change logs.\r\n+    \"\"\"\r\n+\r\n+    name = models.CharField(\r\n+        _(\"Category Name\"),\r\n+        max_length=100,\r\n+        unique=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(\r\n+        table_name='Category_history',\r\n+        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n+    )\r\n+\r\n+    class Meta:\r\n+        verbose_name = _(\"Category\")\r\n+        verbose_name_plural = _(\"Categories\")\r\n+        ordering = ['name']\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.name}  \"\r\n+\r\n+# models Product ########\r\n+class Product(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a product with detailed attributes.\r\n+    - `name`: Unique name of the product.\r\n+    - `description`: Description of the product.\r\n+    - `category`: Foreign key linking the product to a specific category.\r\n+    - `price`: Product price with minimum validation.\r\n+    - `discount_percentage`: Optional discount on the product.\r\n+    - `stock_quantity`: Available stock count.\r\n+    - `status`: Availability status (available, out_of_stock, discontinued).\r\n+    - `image`: Optional image of the product.\r\n+    - `favorite`, `bestseller`, `recommended`: Flags for product categorization.\r\n+    \"\"\"\r\n+    \r\n+    STATUS_CHOICES = [\r\n+        ('available', _('Available')),\r\n+        ('out_of_stock', _('Out of Stock')),\r\n+        ('discontinued', _('Discontinued'))\r\n+    ]\r\n+\r\n+    name = models.CharField(\r\n+        _(\"Product Name\"), \r\n+        max_length=200, \r\n+        unique=True\r\n+    )\r\n+    description = models.TextField(\r\n+        _(\"Product Description\")\r\n+    )\r\n+    category = models.ForeignKey(\r\n+        Category, \r\n+        on_delete=models.CASCADE, \r\n+        related_name='products',\r\n+        verbose_name=_(\" Category\")\r\n+    )\r\n+    parent = models.ForeignKey(\r\n+        ParentCategory,\r\n+        null=True,\r\n+        blank=True,\r\n+        on_delete=models.SET_NULL,\r\n+        related_name='categories',\r\n+        verbose_name=_(\"Teint Category\")\r\n+    )\r\n+    \r\n+    price = models.DecimalField(\r\n+        _(\"Product Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0.01)]\r\n+    )\r\n+    discount_percentage = models.DecimalField(\r\n+        _(\"Discount Percentage\"), \r\n+        max_digits=5, \r\n+        decimal_places=2, \r\n+        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    stock_quantity = models.PositiveIntegerField(\r\n+        _(\"Stock Quantity\"), \r\n+        default=0\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Product Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='available'\r\n+    )\r\n+    \r\n+    image = models.ImageField(\r\n+        _(\"Product Image\"), \r\n+        upload_to='products/', \r\n+        null=True, \r\n+        blank=True\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a favorite\r\n+    FAVORITE_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    favorite = models.CharField(\r\n+        max_length=3,\r\n+        choices=FAVORITE_CHOICES,\r\n+        default='No',  # By default, the product is not marked as a favorite\r\n+        verbose_name='Is the product a favorite?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is a best seller\r\n+    BESTSELLER_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    bestseller = models.CharField(\r\n+        max_length=3,\r\n+        choices=BESTSELLER_CHOICES,\r\n+        default='No',  # By default, the product is not a best seller\r\n+        verbose_name='Is the product a best seller?'\r\n+    )\r\n+    \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return self.name\r\n+\r\n+##### models Shopping Cart ########\r\n+class ShoppingCart(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a shopping cart for a user.\r\n+    - `user`: Foreign key linking the cart to a specific user.\r\n+    - `is_active`: Status indicating whether the cart is active.\r\n+    \"\"\"\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Cart Owner\")\r\n+    )\r\n+    is_active = models.BooleanField(\r\n+        _(\"Cart Active Status\"), \r\n+        default=True\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+     \r\n+\r\n+######### models cartItem #########\r\n+class CartItem(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an item within a shopping cart.\r\n+    - `cart`: Foreign key linking the item to a specific shopping cart.\r\n+    - `product`: Foreign key linking the item to a specific product.\r\n+    - `quantity`: Quantity of the product within the cart.\r\n+    \"\"\"\r\n+    \r\n+    cart = models.ForeignKey(\r\n+        ShoppingCart, \r\n+        related_name='cart_items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Shopping Cart\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\"), \r\n+        default=1\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.product.name} - {self.quantity}\"\r\n+\r\n+###### model oder   ######\r\n+class Order(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an order placed by a user.\r\n+    - `user`: Foreign key linking the order to a specific customer.\r\n+    - `status`: Order status (pending, processing, shipped, delivered, cancelled).\r\n+    - `total_price`: Total price of the order.\r\n+    - `shipping_address`: Address for order delivery.\r\n+    \"\"\"\r\n+    \r\n+    STATUS_CHOICES = [\r\n+        ('pending', _('Pending')),\r\n+        ('processing', _('Processing')),\r\n+        ('shipped', _('Shipped')),\r\n+        ('delivered', _('Delivered')),\r\n+        ('cancelled', _('Cancelled'))\r\n+    ]\r\n+\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Order Customer\")\r\n+    )\r\n+    status = models.CharField(\r\n+        _(\"Order Status\"), \r\n+        max_length=20, \r\n+        choices=STATUS_CHOICES, \r\n+        default='pending'\r\n+    )\r\n+    total_price = models.DecimalField(\r\n+        _(\"Total Order Price\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    shipping_address = models.TextField(\r\n+        _(\"Shipping Address\")\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"Order {self.id} - {self.user.username}\"\r\n+\r\n+###### model oderItem   ######\r\n+class OrderItem(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an item in an order.\r\n+\r\n+    - `order`: ForeignKey linking the item to a specific order. \r\n+    - `product`: ForeignKey linking the item to a specific product.\r\n+    - `quantity`: The number of products ordered.\r\n+    - `price_at_purchase`: The price of the product at the time of purchase.\r\n+    - `history`: Historical record for tracking changes to the OrderItem model.\r\n+    \"\"\"\r\n+    \r\n+    order = models.ForeignKey(\r\n+        Order, \r\n+        related_name='items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Associated Order\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Ordered Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\")\r\n+    )\r\n+    price_at_purchase = models.DecimalField(\r\n+        _(\"Product Price at Purchase\"), \r\n+        max_digits=10, \r\n+        decimal_places=2\r\n+    )\r\n+    \r\n+    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.product.name} - {self.quantity}\"\r\n+    \r\n+###### model Reviews   ######   \r\n+class Review(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing a review for a product.\r\n+\r\n+    - `product`: ForeignKey linking the review to a specific product.\r\n+    - `user`: ForeignKey linking the review to the user who created it.\r\n+    - `rating`: Rating given by the user (from 1 to 5).\r\n+    - `comment`: Optional comment provided by the user.\r\n+    - `review_date`: Timestamp indicating when the review was posted.\r\n+    - `recommended`: Whether the user recommends the product or not (neutral, recommended, or not recommended).\r\n+    - `history`: Historical record for tracking changes to the Review model.\r\n+    \"\"\"\r\n+    \r\n+    RATING_CHOICES = [\r\n+        (1, _('1 - Very Unsatisfied')),\r\n+        (2, _('2 - Unsatisfied')),\r\n+        (3, _('3 - Average')),\r\n+        (4, _('4 - Satisfied')),\r\n+        (5, _('5 - Excellent'))\r\n+    ]\r\n+\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        related_name='reviews',\r\n+        verbose_name=_(\"Associated Product\")\r\n+    )\r\n+    user = models.ForeignKey(\r\n+        CustomUser, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"User\")\r\n+    )\r\n+    rating = models.IntegerField(\r\n+        _(\"Rating\"), \r\n+        choices=RATING_CHOICES\r\n+    )\r\n+    comment = models.TextField(\r\n+        _(\"Comment\"),\r\n+        max_length=1000,\r\n+        blank=True\r\n+    )\r\n+    review_date = models.DateTimeField(\r\n+        _(\"Review Date\"),\r\n+        auto_now_add=True\r\n+    )\r\n+    RECOMMENDATION_CHOICES = [\r\n+    ('not_recommended', _('Not Recommended')),\r\n+    ('neutral', _('Neutral')),\r\n+    ('recommended', _('Recommended'))\r\n+    ]\r\n+\r\n+    recommended = models.CharField(\r\n+        _(\"Recommendation Status\"),\r\n+        max_length=20,\r\n+        choices=RECOMMENDATION_CHOICES,\r\n+        default='neutral'\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    class Meta:\r\n+        unique_together = ['product', 'user']\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738948187486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,8 +349,21 @@\n         default='No',  # By default, the product is not recommended\r\n         verbose_name='Is the product recommended?'\r\n     )\r\n     \r\n+    # Dropdown list to check if the product is recommended\r\n+    RECOMMENDED_CHOICES = [\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n+    ]\r\n+    \r\n+    recommended = models.CharField(\r\n+        max_length=3,\r\n+        choices=RECOMMENDED_CHOICES,\r\n+        default='No',  # By default, the product is not recommended\r\n+        verbose_name='Is the product recommended?'\r\n+    )\r\n+    \r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n     def __str__(self):\r\n         return self.name\r\n"
                },
                {
                    "date": 1738948327608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,19 +349,19 @@\n         default='No',  # By default, the product is not recommended\r\n         verbose_name='Is the product recommended?'\r\n     )\r\n     \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n+    # Choix pour le statut de produit phare\r\n+    STAR_PRODUCT_CHOICES = [\r\n+        ('No', 'Non'),\r\n+        ('Yes', 'Oui'),\r\n     ]\r\n-    \r\n-    recommended = models.CharField(\r\n+\r\n+    star_product = models.CharField(\r\n         max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n+        choices=STAR_PRODUCT_CHOICES,\r\n+        default='No',  # Par défaut, le produit n'est pas un produit phare\r\n+        verbose_name='Est-ce un produit phare ?'\r\n     )\r\n     \r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n"
                },
                {
                    "date": 1738948351386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,19 +349,19 @@\n         default='No',  # By default, the product is not recommended\r\n         verbose_name='Is the product recommended?'\r\n     )\r\n     \r\n-    # Choix pour le statut de produit phare\r\n+   # Choices for star product status\r\n     STAR_PRODUCT_CHOICES = [\r\n-        ('No', 'Non'),\r\n-        ('Yes', 'Oui'),\r\n+        ('No', 'No'),\r\n+        ('Yes', 'Yes'),\r\n     ]\r\n \r\n     star_product = models.CharField(\r\n         max_length=3,\r\n         choices=STAR_PRODUCT_CHOICES,\r\n-        default='No',  # Par défaut, le produit n'est pas un produit phare\r\n-        verbose_name='Est-ce un produit phare ?'\r\n+        default='No',  # By default, the product is not a star product\r\n+        verbose_name='Is this a star product?'\r\n     )\r\n     \r\n     history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n@@ -565,562 +565,5 @@\n \r\n     history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     class Meta:\r\n         unique_together = ['product', 'user']\r\n-    \n-from django.db import models\r\n-from django.contrib.auth.models import AbstractUser\r\n-from django.core.validators import MinValueValidator, MaxValueValidator\r\n-from django.dispatch import receiver\r\n-from django.utils import timezone\r\n-from django.utils.translation import gettext_lazy as _\r\n-from django.core.exceptions import ValidationError\r\n-from safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\n-import uuid\r\n-import os\r\n-from simple_history.models import HistoricalRecords\r\n-from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-\r\n-##### models  base #####\r\n-class BaseModel(SafeDeleteModel):\r\n-    \r\n-    \"\"\"\r\n-    Abstract base model that provides common fields for all other models, including:\r\n-    - `id`: A unique UUID identifier for the model instance.\r\n-    - `created_at`: Timestamp for the creation of the record.\r\n-    - `updated_at`: Timestamp for the last update of the record.\r\n-    - Soft delete functionality using SafeDelete with cascade deletion.\r\n-    \"\"\"\r\n-    \r\n-    id = models.UUIDField(\r\n-        _(\"Unique Identifier\"), \r\n-        primary_key=True, \r\n-        default=uuid.uuid4, \r\n-        editable=False\r\n-    )\r\n-    created_at = models.DateTimeField(\r\n-        _(\"Creation Timestamp\"), \r\n-        auto_now_add=True\r\n-    )\r\n-    updated_at = models.DateTimeField(\r\n-        _(\"Last Update Timestamp\"), \r\n-        auto_now=True\r\n-    )\r\n-    _safedelete_policy = SOFT_DELETE_CASCADE\r\n-\r\n-    class Meta:\r\n-        abstract = True\r\n-\r\n-##### models contry ####\r\n-class Country(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a country.\r\n-    - `name`: Unique name of the country (e.g., \"France\").\r\n-    - `code`: ISO code of the country (maximum 3 characters).\r\n-    - Historical tracking enabled to maintain change logs.\r\n-    \"\"\"\r\n-    name = models.CharField(\r\n-        _(\"Country Name\"), \r\n-        max_length=100, \r\n-        unique=True\r\n-    )\r\n-    code = models.CharField(\r\n-        _(\"Country Code\"), \r\n-        max_length=3, \r\n-        unique=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(\r\n-        table_name='Contry_history', \r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-#### models City ########\r\n-class City(BaseModel):\r\n-    \"\"\"\r\n-    Model representing a city.\r\n-    - `name`: Name of the city.\r\n-    - `country`: Foreign key to associate the city with a specific country.\r\n-    - Unique constraint to ensure no duplicate city-country combinations.\r\n-    - Historical tracking enabled for change logs.\r\n-    \"\"\"\r\n-    name = models.CharField(\r\n-        _(\"City Name\"), \r\n-        max_length=100\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='cities',\r\n-        verbose_name=_(\"Associated Country\")\r\n-    )\r\n-    \r\n-    class Meta:\r\n-        unique_together = ['name', 'country']\r\n-        verbose_name = _(\"City\")\r\n-        verbose_name_plural = _(\"Cities\")\r\n-    \r\n-    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.name}, {self.country.name}\"\r\n-\r\n-#### models User  personaliser ########\r\n-class CustomUser(AbstractUser, BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Customized user model inheriting from Django's AbstractUser.\r\n-    - `phone`: User's phone number.\r\n-    - `gender`: Gender with predefined choices (Male, Female, Other).\r\n-    - `country`: Associated country of the user (optional).\r\n-    - `city`: Associated city of the user (optional).\r\n-    - History tracking and login/logout signals to manage online status.\r\n-    \"\"\"\r\n-    GENDER_CHOICES = [\r\n-        ('M', _('Male')),\r\n-        ('F', _('Female')),\r\n-        ('O', _('Other'))\r\n-    ]\r\n-\r\n-    phone = models.CharField(\r\n-        _(\"Phone Number\"), \r\n-        max_length=15, \r\n-        blank=True\r\n-    )\r\n-    gender = models.CharField(\r\n-        _(\"Gender\"), \r\n-        max_length=1, \r\n-        choices=GENDER_CHOICES, \r\n-        blank=True\r\n-    )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User Country\")\r\n-    )\r\n-    city = models.ForeignKey(\r\n-        City, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User City\")\r\n-    )\r\n-    \r\n-    # Ajout de related_name pour éviter les conflits\r\n-    groups = models.ManyToManyField(\r\n-        'auth.Group',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n-        verbose_name='groups',\r\n-    )\r\n-    user_permissions = models.ManyToManyField(\r\n-        'auth.Permission',\r\n-        related_name='customuser_set',\r\n-        related_query_name='customuser',\r\n-        blank=True,\r\n-        help_text='Specific permissions for this user.',\r\n-        verbose_name='user permissions',\r\n-    )\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n-\r\n-    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n-    @receiver(user_logged_in)\r\n-    def user_logged_in_handler(sender, request, user, **kwargs):\r\n-        user.is_online = True\r\n-        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n-        user.save()\r\n-\r\n-    @receiver(user_logged_out)\r\n-    def user_logged_out_handler(sender, request, user, **kwargs):\r\n-        user.is_online = False\r\n-        user.save()\r\n-    \r\n-    \r\n-    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-\r\n-####### MODEL PARENTCATEGORY ########\r\n-class ParentCategory(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a parent category for product categorization.\r\n-    - `name`: Unique name of the parent category.\r\n-    - `description`: Optional description of the parent category.\r\n-    - Historical tracking enabled for change logs.\r\n-    \"\"\"\r\n-    \r\n-    name = models.CharField(\r\n-        _(\"Teint Category Name\"),\r\n-        max_length=100,\r\n-        unique=True\r\n-    )\r\n-     \r\n-    history = HistoricalRecords(\r\n-        table_name='ParentCategory_history',\r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    class Meta:\r\n-        verbose_name = _(\"Parent Category\")\r\n-        verbose_name_plural = _(\"Parent Categories\")\r\n-        ordering = ['name']\r\n-\r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-###### Model CATEGORY#####\r\n-class Category(BaseModel):\r\n-    \"\"\"\r\n-    Model representing a category, potentially linked to a parent category.\r\n-    - `name`: Unique name of the category.\r\n-    - `parent`: Optional foreign key linking to a ParentCategory.\r\n-    - Historical tracking enabled for change logs.\r\n-    \"\"\"\r\n-\r\n-    name = models.CharField(\r\n-        _(\"Category Name\"),\r\n-        max_length=100,\r\n-        unique=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(\r\n-        table_name='Category_history',\r\n-        history_id_field=models.UUIDField(default=uuid.uuid4)\r\n-    )\r\n-\r\n-    class Meta:\r\n-        verbose_name = _(\"Category\")\r\n-        verbose_name_plural = _(\"Categories\")\r\n-        ordering = ['name']\r\n-\r\n-    def __str__(self):\r\n-        return f\"{self.name}  \"\r\n-\r\n-# models Product ########\r\n-class Product(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a product with detailed attributes.\r\n-    - `name`: Unique name of the product.\r\n-    - `description`: Description of the product.\r\n-    - `category`: Foreign key linking the product to a specific category.\r\n-    - `price`: Product price with minimum validation.\r\n-    - `discount_percentage`: Optional discount on the product.\r\n-    - `stock_quantity`: Available stock count.\r\n-    - `status`: Availability status (available, out_of_stock, discontinued).\r\n-    - `image`: Optional image of the product.\r\n-    - `favorite`, `bestseller`, `recommended`: Flags for product categorization.\r\n-    \"\"\"\r\n-    \r\n-    STATUS_CHOICES = [\r\n-        ('available', _('Available')),\r\n-        ('out_of_stock', _('Out of Stock')),\r\n-        ('discontinued', _('Discontinued'))\r\n-    ]\r\n-\r\n-    name = models.CharField(\r\n-        _(\"Product Name\"), \r\n-        max_length=200, \r\n-        unique=True\r\n-    )\r\n-    description = models.TextField(\r\n-        _(\"Product Description\")\r\n-    )\r\n-    category = models.ForeignKey(\r\n-        Category, \r\n-        on_delete=models.CASCADE, \r\n-        related_name='products',\r\n-        verbose_name=_(\" Category\")\r\n-    )\r\n-    parent = models.ForeignKey(\r\n-        ParentCategory,\r\n-        null=True,\r\n-        blank=True,\r\n-        on_delete=models.SET_NULL,\r\n-        related_name='categories',\r\n-        verbose_name=_(\"Teint Category\")\r\n-    )\r\n-    \r\n-    price = models.DecimalField(\r\n-        _(\"Product Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0.01)]\r\n-    )\r\n-    discount_percentage = models.DecimalField(\r\n-        _(\"Discount Percentage\"), \r\n-        max_digits=5, \r\n-        decimal_places=2, \r\n-        validators=[MinValueValidator(0), MaxValueValidator(100)],\r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    stock_quantity = models.PositiveIntegerField(\r\n-        _(\"Stock Quantity\"), \r\n-        default=0\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Product Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='available'\r\n-    )\r\n-    \r\n-    image = models.ImageField(\r\n-        _(\"Product Image\"), \r\n-        upload_to='products/', \r\n-        null=True, \r\n-        blank=True\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is a best seller\r\n-    BESTSELLER_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    bestseller = models.CharField(\r\n-        max_length=3,\r\n-        choices=BESTSELLER_CHOICES,\r\n-        default='No',  # By default, the product is not a best seller\r\n-        verbose_name='Is the product a best seller?'\r\n-    )\r\n-    \r\n-    # Dropdown list to check if the product is recommended\r\n-    RECOMMENDED_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    recommended = models.CharField(\r\n-        max_length=3,\r\n-        choices=RECOMMENDED_CHOICES,\r\n-        default='No',  # By default, the product is not recommended\r\n-        verbose_name='Is the product recommended?'\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return self.name\r\n-\r\n-##### models Shopping Cart ########\r\n-class ShoppingCart(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a shopping cart for a user.\r\n-    - `user`: Foreign key linking the cart to a specific user.\r\n-    - `is_active`: Status indicating whether the cart is active.\r\n-    \"\"\"\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Cart Owner\")\r\n-    )\r\n-    is_active = models.BooleanField(\r\n-        _(\"Cart Active Status\"), \r\n-        default=True\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return f\"Cart {self.id} - {self.user.username}\"\r\n-\r\n-######### models cartItem #########\r\n-class CartItem(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing an item within a shopping cart.\r\n-    - `cart`: Foreign key linking the item to a specific shopping cart.\r\n-    - `product`: Foreign key linking the item to a specific product.\r\n-    - `quantity`: Quantity of the product within the cart.\r\n-    \"\"\"\r\n-    \r\n-    cart = models.ForeignKey(\r\n-        ShoppingCart, \r\n-        related_name='cart_items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Shopping Cart\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\"), \r\n-        default=1\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.product.name} - {self.quantity}\"\r\n-\r\n-###### model oder   ######\r\n-class Order(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing an order placed by a user.\r\n-    - `user`: Foreign key linking the order to a specific customer.\r\n-    - `status`: Order status (pending, processing, shipped, delivered, cancelled).\r\n-    - `total_price`: Total price of the order.\r\n-    - `shipping_address`: Address for order delivery.\r\n-    \"\"\"\r\n-    \r\n-    STATUS_CHOICES = [\r\n-        ('pending', _('Pending')),\r\n-        ('processing', _('Processing')),\r\n-        ('shipped', _('Shipped')),\r\n-        ('delivered', _('Delivered')),\r\n-        ('cancelled', _('Cancelled'))\r\n-    ]\r\n-\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Order Customer\")\r\n-    )\r\n-    status = models.CharField(\r\n-        _(\"Order Status\"), \r\n-        max_length=20, \r\n-        choices=STATUS_CHOICES, \r\n-        default='pending'\r\n-    )\r\n-    total_price = models.DecimalField(\r\n-        _(\"Total Order Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    shipping_address = models.TextField(\r\n-        _(\"Shipping Address\")\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return f\"Order {self.id} - {self.user.username}\"\r\n-\r\n-###### model oderItem   ######\r\n-class OrderItem(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing an item in an order.\r\n-\r\n-    - `order`: ForeignKey linking the item to a specific order. \r\n-    - `product`: ForeignKey linking the item to a specific product.\r\n-    - `quantity`: The number of products ordered.\r\n-    - `price_at_purchase`: The price of the product at the time of purchase.\r\n-    - `history`: Historical record for tracking changes to the OrderItem model.\r\n-    \"\"\"\r\n-    \r\n-    order = models.ForeignKey(\r\n-        Order, \r\n-        related_name='items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Associated Order\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Ordered Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\")\r\n-    )\r\n-    price_at_purchase = models.DecimalField(\r\n-        _(\"Product Price at Purchase\"), \r\n-        max_digits=10, \r\n-        decimal_places=2\r\n-    )\r\n-    \r\n-    history = HistoricalRecords(table_name='OrderItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.product.name} - {self.quantity}\"\r\n-    \r\n-###### model Reviews   ######   \r\n-class Review(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing a review for a product.\r\n-\r\n-    - `product`: ForeignKey linking the review to a specific product.\r\n-    - `user`: ForeignKey linking the review to the user who created it.\r\n-    - `rating`: Rating given by the user (from 1 to 5).\r\n-    - `comment`: Optional comment provided by the user.\r\n-    - `review_date`: Timestamp indicating when the review was posted.\r\n-    - `recommended`: Whether the user recommends the product or not (neutral, recommended, or not recommended).\r\n-    - `history`: Historical record for tracking changes to the Review model.\r\n-    \"\"\"\r\n-    \r\n-    RATING_CHOICES = [\r\n-        (1, _('1 - Very Unsatisfied')),\r\n-        (2, _('2 - Unsatisfied')),\r\n-        (3, _('3 - Average')),\r\n-        (4, _('4 - Satisfied')),\r\n-        (5, _('5 - Excellent'))\r\n-    ]\r\n-\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        related_name='reviews',\r\n-        verbose_name=_(\"Associated Product\")\r\n-    )\r\n-    user = models.ForeignKey(\r\n-        CustomUser, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"User\")\r\n-    )\r\n-    rating = models.IntegerField(\r\n-        _(\"Rating\"), \r\n-        choices=RATING_CHOICES\r\n-    )\r\n-    comment = models.TextField(\r\n-        _(\"Comment\"),\r\n-        max_length=1000,\r\n-        blank=True\r\n-    )\r\n-    review_date = models.DateTimeField(\r\n-        _(\"Review Date\"),\r\n-        auto_now_add=True\r\n-    )\r\n-    RECOMMENDATION_CHOICES = [\r\n-    ('not_recommended', _('Not Recommended')),\r\n-    ('neutral', _('Neutral')),\r\n-    ('recommended', _('Recommended'))\r\n-    ]\r\n-\r\n-    recommended = models.CharField(\r\n-        _(\"Recommendation Status\"),\r\n-        max_length=20,\r\n-        choices=RECOMMENDATION_CHOICES,\r\n-        default='neutral'\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='Review_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    class Meta:\r\n-        unique_together = ['product', 'user']\r\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739013128579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,10 +279,9 @@\n     )\r\n     \r\n     price = models.DecimalField(\r\n         _(\"Product Price\"), \r\n-        max_digits=10, \r\n-        decimal_places=2, \r\n+        max_digits=10,  \r\n         validators=[MinValueValidator(0.01)]\r\n     )\r\n     discount_percentage = models.DecimalField(\r\n         _(\"Discount Percentage\"), \r\n"
                },
                {
                    "date": 1739014249113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,9 +279,10 @@\n     )\r\n     \r\n     price = models.DecimalField(\r\n         _(\"Product Price\"), \r\n-        max_digits=10,  \r\n+        max_digits=10, \r\n+        decimal_places=0, \r\n         validators=[MinValueValidator(0.01)]\r\n     )\r\n     discount_percentage = models.DecimalField(\r\n         _(\"Discount Percentage\"), \r\n"
                },
                {
                    "date": 1739206118239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,10 @@\n         blank=True,\r\n         help_text='Specific permissions for this user.',\r\n         verbose_name='user permissions',\r\n     )\r\n-    \r\n+    is_verified = models.BooleanField(default=False)\r\n+\r\n     def __str__(self):\r\n         return f\"{self.username}\"\r\n \r\n     # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n"
                },
                {
                    "date": 1739206164702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,8 +157,26 @@\n         help_text='Specific permissions for this user.',\r\n         verbose_name='user permissions',\r\n     )\r\n     is_verified = models.BooleanField(default=False)\r\n+    \r\n+    is_online = models.BooleanField(default=False)  # champ pour le statut en ligne\r\n+    \r\n+    groups = models.ManyToManyField(\r\n+        'auth.Group',\r\n+        related_name='personnel_set',  # Ajoutez un related_name unique\r\n+        blank=True,\r\n+        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n+        verbose_name='groups',\r\n+    )\r\n+    \r\n+    user_permissions = models.ManyToManyField(\r\n+        'auth.Permission',\r\n+        related_name='personnel_permissions_set',  # Ajoutez un related_name unique\r\n+        blank=True,\r\n+        help_text='Specific permissions for this user.',\r\n+        verbose_name='user permissions',\r\n+    )\r\n \r\n     def __str__(self):\r\n         return f\"{self.username}\"\r\n \r\n"
                },
                {
                    "date": 1739206250837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,12 +175,24 @@\n         blank=True,\r\n         help_text='Specific permissions for this user.',\r\n         verbose_name='user permissions',\r\n     )\r\n+    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n \r\n-    def __str__(self):\r\n-        return f\"{self.username}\"\r\n+    \r\n+    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n+    @receiver(user_logged_in)\r\n+    def user_logged_in_handler(sender, request, user, **kwargs):\r\n+        user.is_online = True\r\n+        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n+        user.save()\r\n \r\n+    @receiver(user_logged_out)\r\n+    def user_logged_out_handler(sender, request, user, **kwargs):\r\n+        user.is_online = False\r\n+        user.save()\r\n+    \r\n+\r\n     # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n     @receiver(user_logged_in)\r\n     def user_logged_in_handler(sender, request, user, **kwargs):\r\n         user.is_online = True\r\n@@ -190,12 +202,37 @@\n     @receiver(user_logged_out)\r\n     def user_logged_out_handler(sender, request, user, **kwargs):\r\n         user.is_online = False\r\n         user.save()\r\n+        \r\n+     # New fields for two-factor authentication\r\n+    two_factor_method = models.CharField(\r\n+        max_length=20, \r\n+        choices=[\r\n+            ('email', 'Email Code'),\r\n+            ('google_auth', 'Google Authenticator')\r\n+        ],\r\n+        null=True,\r\n+        blank=True\r\n+    )\r\n+    google_auth_secret = models.CharField(max_length=32, null=True, blank=True)\r\n     \r\n+    def generate_google_auth_secret(self):\r\n+        if not self.google_auth_secret:\r\n+            self.google_auth_secret = pyotp.random_base32()\r\n+            self.save()\r\n+        return self.google_auth_secret\r\n     \r\n-    history = HistoricalRecords(table_name='CustomUser_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    def verify_google_auth_code(self, code):\r\n+        if not self.google_auth_secret:\r\n+            return False\r\n+        totp = pyotp.TOTP(self.google_auth_secret)\r\n+        return totp.verify(code)\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.username}\"\r\n \r\n+        \r\n ####### MODEL PARENTCATEGORY ########\r\n class ParentCategory(BaseModel):\r\n     \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1739206308959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import uuid\r\n import os\r\n from simple_history.models import HistoricalRecords\r\n from django.contrib.auth.signals import user_logged_in, user_logged_out\r\n-\r\n+import pyotp\r\n ##### models  base #####\r\n class BaseModel(SafeDeleteModel):\r\n     \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1739206342950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,8 +288,18 @@\n \r\n     def __str__(self):\r\n         return f\"{self.name}  \"\r\n \r\n+\r\n+class VerificationCode(models.Model):\r\n+    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)\r\n+    code = models.CharField(max_length=6)\r\n+    created_at = models.DateTimeField(auto_now_add=True)\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.user.username} - {self.code}\"\r\n+    \r\n+    \r\n # models Product ########\r\n class Product(BaseModel):\r\n     \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1739207523844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,11 +110,11 @@\n     - `city`: Associated city of the user (optional).\r\n     - History tracking and login/logout signals to manage online status.\r\n     \"\"\"\r\n     GENDER_CHOICES = [\r\n-        ('M', _('Male')),\r\n-        ('F', _('Female')),\r\n-        ('O', _('Other'))\r\n+        ('H', _('Homme')),\r\n+        ('F', _('Femme')),\r\n+        ('A', _('Autre'))\r\n     ]\r\n \r\n     phone = models.CharField(\r\n         _(\"Phone Number\"), \r\n"
                },
                {
                    "date": 1739224090663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,20 +126,20 @@\n         max_length=1, \r\n         choices=GENDER_CHOICES, \r\n         blank=True\r\n     )\r\n-    country = models.ForeignKey(\r\n-        Country, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User Country\")\r\n-    )\r\n-    city = models.ForeignKey(\r\n-        City, \r\n-        on_delete=models.SET_NULL, \r\n-        null=True,\r\n-        verbose_name=_(\"User City\")\r\n-    )\r\n+    # country = models.ForeignKey(\r\n+    #     Country, \r\n+    #     on_delete=models.SET_NULL, \r\n+    #     null=True,\r\n+    #     verbose_name=_(\"User Country\")\r\n+    # )\r\n+    # city = models.ForeignKey(\r\n+    #     City, \r\n+    #     on_delete=models.SET_NULL, \r\n+    #     null=True,\r\n+    #     verbose_name=_(\"User City\")\r\n+    # )\r\n     \r\n     # Ajout de related_name pour éviter les conflits\r\n     groups = models.ManyToManyField(\r\n         'auth.Group',\r\n"
                },
                {
                    "date": 1739314937936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -433,8 +433,31 @@\n     \r\n     def __str__(self):\r\n         return self.name\r\n \r\n+class Favorite(BaseModel):\r\n+    \"\"\"\r\n+    Model representing user's favorite products\r\n+    \"\"\"\r\n+    user = models.ForeignKey(\r\n+        CustomUser,\r\n+        on_delete=models.CASCADE,\r\n+        related_name='favorites'\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product,\r\n+        on_delete=models.CASCADE,\r\n+        related_name='favorited_by'\r\n+    )\r\n+\r\n+    class Meta:\r\n+        unique_together = ('user', 'product')\r\n+        verbose_name = _(\"Favorite\")\r\n+        verbose_name_plural = _(\"Favorites\")\r\n+\r\n+    def __str__(self):\r\n+        return f\"{self.user.username} - {self.product.name}\"\r\n+    \r\n ##### models Shopping Cart ########\r\n class ShoppingCart(BaseModel):\r\n     \r\n     \"\"\"\r\n"
                },
                {
                    "date": 1739315035247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,21 +376,9 @@\n         null=True, \r\n         blank=True\r\n     )\r\n     \r\n-    # Dropdown list to check if the product is a favorite\r\n-    FAVORITE_CHOICES = [\r\n-        ('No', 'No'),\r\n-        ('Yes', 'Yes'),\r\n-    ]\r\n-    \r\n-    favorite = models.CharField(\r\n-        max_length=3,\r\n-        choices=FAVORITE_CHOICES,\r\n-        default='No',  # By default, the product is not marked as a favorite\r\n-        verbose_name='Is the product a favorite?'\r\n-    )\r\n-    \r\n+ \r\n     # Dropdown list to check if the product is a best seller\r\n     BESTSELLER_CHOICES = [\r\n         ('No', 'No'),\r\n         ('Yes', 'Yes'),\r\n"
                },
                {
                    "date": 1739320608069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n     def __str__(self):\r\n         return f\"{self.name}, {self.country.name}\"\r\n \r\n #### models User  personaliser ########\r\n-class CustomUser(AbstractUser, BaseModel):\r\n+class CustomUser(AbstractUser, SafeDeleteModel):\r\n     \r\n     \"\"\"\r\n     Customized user model inheriting from Django's AbstractUser.\r\n     - `phone`: User's phone number.\r\n"
                },
                {
                    "date": 1739320673181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,17 @@\n         max_length=1, \r\n         choices=GENDER_CHOICES, \r\n         blank=True\r\n     )\r\n+    created_at = models.DateTimeField(\r\n+        _(\"Creation Timestamp\"), \r\n+        auto_now_add=True\r\n+    )\r\n+    updated_at = models.DateTimeField(\r\n+        _(\"Last Update Timestamp\"), \r\n+        auto_now=True\r\n+    )\r\n+    _safedelete_policy = SOFT_DELETE_CASCADE\r\n     # country = models.ForeignKey(\r\n     #     Country, \r\n     #     on_delete=models.SET_NULL, \r\n     #     null=True,\r\n"
                },
                {
                    "date": 1739371321699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,9 +430,9 @@\n     \r\n     def __str__(self):\r\n         return self.name\r\n \r\n-class Favorite(BaseModel):\r\n+class Favorite(models.Model):\r\n     \"\"\"\r\n     Model representing user's favorite products\r\n     \"\"\"\r\n     user = models.ForeignKey(\r\n"
                },
                {
                    "date": 1739371385736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,8 +444,17 @@\n         Product,\r\n         on_delete=models.CASCADE,\r\n         related_name='favorited_by'\r\n     )\r\n+    \r\n+    created_at = models.DateTimeField(\r\n+        _(\"Creation Timestamp\"), \r\n+        auto_now_add=True\r\n+    )\r\n+    updated_at = models.DateTimeField(\r\n+        _(\"Last Update Timestamp\"), \r\n+        auto_now=True\r\n+    )\r\n \r\n     class Meta:\r\n         unique_together = ('user', 'product')\r\n         verbose_name = _(\"Favorite\")\r\n"
                },
                {
                    "date": 1739371465588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,8 +434,15 @@\n class Favorite(models.Model):\r\n     \"\"\"\r\n     Model representing user's favorite products\r\n     \"\"\"\r\n+    \r\n+    id = models.UUIDField(\r\n+        _(\"Unique Identifier\"), \r\n+        primary_key=True, \r\n+        default=uuid.uuid4, \r\n+        editable=False\r\n+    )\r\n     user = models.ForeignKey(\r\n         CustomUser,\r\n         on_delete=models.CASCADE,\r\n         related_name='favorites'\r\n"
                },
                {
                    "date": 1739393167356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -489,9 +489,10 @@\n     )\r\n     \r\n     history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     \r\n-     \r\n+    def __str__(self):\r\n+        return f\"{self.user.username}'s Shopping Cart\"\r\n \r\n ######### models cartItem #########\r\n class CartItem(BaseModel):\r\n     \r\n"
                }
            ],
            "date": 1738841975084,
            "name": "Commit-0",
            "content": "from django.db import models\r\nfrom safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\nfrom django.contrib.auth.models import AbstractUser\r\nfrom django.core.files.storage import FileSystemStorage\r\nfrom django.conf import settings\r\nimport os.path\r\nimport os\r\nimport uuid\r\nfrom django.utils import timezone\r\nimport random\r\nfrom django_lifecycle import LifecycleModel\r\nfrom io import BytesIO\r\nfrom django.contrib.auth.signals import user_logged_in, user_logged_out\r\nfrom django.dispatch import receiver\r\nfrom django.utils.translation import gettext_lazy as _\r\n "
        }
    ]
}