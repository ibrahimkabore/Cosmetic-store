{
    "sourceFile": "e_commerce/admin.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 69,
            "patches": [
                {
                    "date": 1738924690686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738926925646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,52 +4,78 @@\n     Country, City, CustomUser, Category, Product, \r\n     ShoppingCart, CartItem, Order, OrderItem, Review\r\n )\r\n \r\n+# Admin configuration for the Country model\r\n @admin.register(Country)\r\n class CountryAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the countries list\r\n     list_display = ('name', 'code', 'created_at')\r\n+    # Search fields for filtering countries\r\n     search_fields = ('name', 'code')\r\n+    # Default sorting by name\r\n     ordering = ('name',)\r\n+    # Number of items per page in the admin list view\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the City model\r\n @admin.register(City)\r\n class CityAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the cities list\r\n     list_display = ('name', 'country', 'created_at')\r\n+    # Enable search by city name or country name\r\n     search_fields = ('name', 'country__name')\r\n+    # Add a filter sidebar for countries\r\n     list_filter = ('country',)\r\n+    # Sort by country first, then by city name\r\n     ordering = ('country', 'name')\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the CustomUser model\r\n @admin.register(CustomUser)\r\n class CustomUserAdmin(admin.ModelAdmin):\r\n+    # Display key user information in the list view\r\n     list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'country', 'city')\r\n+    # Enable search by username, email, and names\r\n     search_fields = ('username', 'email', 'first_name', 'last_name')\r\n+    # Add filters for staff status, active status, gender, and country\r\n     list_filter = ('is_staff', 'is_active', 'gender', 'country')\r\n+    # Organize fields into logical groups\r\n     fieldsets = (\r\n         (None, {'fields': ('username', 'password')}),\r\n         (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n         (_('Location'), {'fields': ('country', 'city')}),\r\n         (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n     )\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the Category model\r\n @admin.register(Category)\r\n class CategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n     list_display = ('name', 'parent', 'created_at')\r\n+    # Enable search by category name and description\r\n     search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n     list_filter = ('parent',)\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the Product model\r\n @admin.register(Product)\r\n class ProductAdmin(admin.ModelAdmin):\r\n+    # Show comprehensive product information in the list view\r\n     list_display = ('name', 'category', 'price', 'stock_quantity', 'status', 'favorite', 'bestseller', 'recommended')\r\n+    # Enable search by product name and description\r\n     search_fields = ('name', 'description')\r\n+    # Add filters for various product attributes\r\n     list_filter = ('status', 'category', 'favorite', 'bestseller', 'recommended')\r\n     ordering = ('name',)\r\n+    # Allow direct editing of these fields in the list view\r\n     list_editable = ('price', 'stock_quantity', 'status')\r\n+    # Prevent modification of timestamp fields\r\n     readonly_fields = ('created_at', 'updated_at')\r\n+    # Organize product information into logical sections\r\n     fieldsets = (\r\n         (_('Basic Information'), {\r\n             'fields': ('name', 'description', 'category', 'image')\r\n         }),\r\n@@ -65,28 +91,42 @@\n         }),\r\n     )\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the ShoppingCart model\r\n @admin.register(ShoppingCart)\r\n class ShoppingCartAdmin(admin.ModelAdmin):\r\n+    # Display cart status and ownership\r\n     list_display = ('user', 'is_active', 'created_at')\r\n+    # Add filter for active/inactive carts\r\n     list_filter = ('is_active',)\r\n+    # Enable search by username\r\n     search_fields = ('user__username',)\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the CartItem model\r\n @admin.register(CartItem)\r\n class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view\r\n     list_display = ('cart', 'product', 'quantity', 'created_at')\r\n+    # Enable search by username and product name\r\n     search_fields = ('cart__user__username', 'product__name')\r\n+    # Filter by cart status\r\n     list_filter = ('cart__is_active',)\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the Order model\r\n @admin.register(Order)\r\n class OrderAdmin(admin.ModelAdmin):\r\n+    # Display order summary in the list view\r\n     list_display = ('user', 'status', 'total_price', 'created_at')\r\n+    # Enable search by username and shipping address\r\n     search_fields = ('user__username', 'shipping_address')\r\n+    # Add filter for order status\r\n     list_filter = ('status',)\r\n+    # Prevent modification of timestamp fields\r\n     readonly_fields = ('created_at', 'updated_at')\r\n+    # Organize order information into sections\r\n     fieldsets = (\r\n         (_('Order Information'), {\r\n             'fields': ('user', 'status', 'total_price')\r\n         }),\r\n@@ -99,19 +139,29 @@\n         }),\r\n     )\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the OrderItem model\r\n @admin.register(OrderItem)\r\n class OrderItemAdmin(admin.ModelAdmin):\r\n+    # Display order item details\r\n     list_display = ('order', 'product', 'quantity', 'price_at_purchase')\r\n+    # Enable search by username and product name\r\n     search_fields = ('order__user__username', 'product__name')\r\n+    # Filter by order status\r\n     list_filter = ('order__status',)\r\n     list_per_page = 20\r\n \r\n+# Admin configuration for the Review model\r\n @admin.register(Review)\r\n class ReviewAdmin(admin.ModelAdmin):\r\n+    # Show review information in the list view\r\n     list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n+    # Enable search by product, username, and review content\r\n     search_fields = ('product__name', 'user__username', 'comment')\r\n+    # Add filters for rating and recommendation status\r\n     list_filter = ('rating', 'recommended', 'review_date')\r\n+    # Prevent modification of review date\r\n     readonly_fields = ('review_date',)\r\n+    # Sort by most recent reviews first\r\n     ordering = ('-review_date',)\r\n     list_per_page = 20\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738931735983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.contrib import admin\r\n from django.utils.translation import gettext_lazy as _\r\n from .models import (\r\n     Country, City, CustomUser, Category, Product, \r\n-    ShoppingCart, CartItem, Order, OrderItem, Review\r\n+    ShoppingCart, CartItem, Order, OrderItem, Review,ParentCategory\r\n )\r\n \r\n # Admin configuration for the Country model\r\n @admin.register(Country)\r\n@@ -59,8 +59,19 @@\n     list_filter = ('parent',)\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n \r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name', 'parent', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    list_filter = ('parent',)\r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+    \r\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n class ProductAdmin(admin.ModelAdmin):\r\n     # Show comprehensive product information in the list view\r\n"
                },
                {
                    "date": 1738931787791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,13 +62,12 @@\n \r\n @admin.register(ParentCategory)\r\n class ParentCategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n-    list_display = ('name', 'parent', 'created_at')\r\n+    list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n+    search_fields = ('name')\r\n     # Add filter for parent categories\r\n-    list_filter = ('parent',)\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n"
                },
                {
                    "date": 1738931807851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,11 @@\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name', 'parent', 'created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n+    search_fields = ('name', )\r\n     # Add filter for parent categories\r\n-    list_filter = ('parent',)\r\n+    list_filter = ('parent')\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n \r\n @admin.register(ParentCategory)\r\n"
                },
                {
                    "date": 1738931896713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name', 'parent', 'created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name', )\r\n+    search_fields = ('name')\r\n     # Add filter for parent categories\r\n     list_filter = ('parent')\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n@@ -66,9 +66,9 @@\n     list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n     search_fields = ('name')\r\n     # Add filter for parent categories\r\n-    ordering = ('name',)\r\n+    ordering = ('name')\r\n     list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n"
                },
                {
                    "date": 1738931912268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     # Enable search by category name and description\r\n     search_fields = ('name')\r\n     # Add filter for parent categories\r\n     list_filter = ('parent')\r\n-    ordering = ('name',)\r\n+    ordering = ('name')\r\n     list_per_page = 20\r\n \r\n @admin.register(ParentCategory)\r\n class ParentCategoryAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1738931926248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,22 +53,23 @@\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name', 'parent', 'created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name')\r\n+    search_fields = ('name', 'description')\r\n     # Add filter for parent categories\r\n-    list_filter = ('parent')\r\n-    ordering = ('name')\r\n+    list_filter = ('parent',)\r\n+    ordering = ('name',)\r\n     list_per_page = 20\r\n \r\n @admin.register(ParentCategory)\r\n class ParentCategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name')\r\n+    search_fields = ('name', 'description')\r\n     # Add filter for parent categories\r\n-    ordering = ('name')\r\n+    list_filter = ('parent',)\r\n+    ordering = ('name',)\r\n     list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n"
                },
                {
                    "date": 1738931977938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n     search_fields = ('name', 'description')\r\n     # Add filter for parent categories\r\n-    list_filter = ('parent',)\r\n+    \r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n"
                },
                {
                    "date": 1738931996619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name', 'parent', 'created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n+    search_fields = ('name' )\r\n     # Add filter for parent categories\r\n     list_filter = ('parent',)\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n@@ -64,9 +64,9 @@\n class ParentCategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n+    search_fields = ('name')\r\n     # Add filter for parent categories\r\n     \r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n"
                },
                {
                    "date": 1738932025490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name', 'parent', 'created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name' )\r\n+    search_fields = ('name')\r\n     # Add filter for parent categories\r\n     list_filter = ('parent',)\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n@@ -64,9 +64,9 @@\n class ParentCategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name')\r\n+    search_fields = ('name', 'description')\r\n     # Add filter for parent categories\r\n     \r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n"
                },
                {
                    "date": 1738932045176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name', 'parent', 'created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name')\r\n+    search_fields = ('name', 'description')\r\n     # Add filter for parent categories\r\n     list_filter = ('parent',)\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n"
                },
                {
                    "date": 1738940747874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.contrib import admin\r\n from django.utils.translation import gettext_lazy as _\r\n from .models import (\r\n     Country, City, CustomUser, Category, Product, \r\n-    ShoppingCart, CartItem, Order, OrderItem, Review,ParentCategory\r\n+    ShoppingCart, CartItem, Order, OrderItem, Review\r\n )\r\n \r\n # Admin configuration for the Country model\r\n @admin.register(Country)\r\n@@ -51,26 +51,26 @@\n # Admin configuration for the Category model\r\n @admin.register(Category)\r\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n-    list_display = ('name', 'parent', 'created_at')\r\n+    list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n+    search_fields = ('name')\r\n     # Add filter for parent categories\r\n-    list_filter = ('parent',)\r\n+    list_filter = ('parent')\r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n \r\n-@admin.register(ParentCategory)\r\n-class ParentCategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n+# @admin.register(ParentCategory)\r\n+# class ParentCategoryAdmin(admin.ModelAdmin):\r\n+#     # Display category hierarchy in the list view\r\n+#     list_display = ('name','created_at')\r\n+#     # Enable search by category name and description\r\n+#     search_fields = ('name', 'description')\r\n+#     # Add filter for parent categories\r\n     \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n+#     ordering = ('name',)\r\n+#     list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n class ProductAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1738940755734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     list_display = ('name','created_at')\r\n     # Enable search by category name and description\r\n     search_fields = ('name')\r\n     # Add filter for parent categories\r\n-    list_filter = ('parent')\r\n+    \r\n     ordering = ('name',)\r\n     list_per_page = 20\r\n \r\n # @admin.register(ParentCategory)\r\n"
                },
                {
                    "date": 1738940803111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     # Enable search by category name and description\r\n     search_fields = ('name')\r\n     # Add filter for parent categories\r\n     \r\n-    ordering = ('name',)\r\n+    ordering = ('name')\r\n     list_per_page = 20\r\n \r\n # @admin.register(ParentCategory)\r\n # class ParentCategoryAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1738940824734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,14 +52,9 @@\n @admin.register(Category)\r\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n     list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name')\r\n-    # Add filter for parent categories\r\n-    \r\n-    ordering = ('name')\r\n-    list_per_page = 20\r\n+     \r\n \r\n # @admin.register(ParentCategory)\r\n # class ParentCategoryAdmin(admin.ModelAdmin):\r\n #     # Display category hierarchy in the list view\r\n"
                },
                {
                    "date": 1738941988220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.contrib import admin\r\n from django.utils.translation import gettext_lazy as _\r\n from .models import (\r\n     Country, City, CustomUser, Category, Product, \r\n-    ShoppingCart, CartItem, Order, OrderItem, Review\r\n+    ShoppingCart, CartItem, Order, OrderItem, Review, ParentCategory\r\n )\r\n \r\n # Admin configuration for the Country model\r\n @admin.register(Country)\r\n@@ -51,21 +51,26 @@\n # Admin configuration for the Category model\r\n @admin.register(Category)\r\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n+    list_display = ('name', 'parent', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    list_filter = ('parent',)\r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+\r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n     list_display = ('name','created_at')\r\n-     \r\n-\r\n-# @admin.register(ParentCategory)\r\n-# class ParentCategoryAdmin(admin.ModelAdmin):\r\n-#     # Display category hierarchy in the list view\r\n-#     list_display = ('name','created_at')\r\n-#     # Enable search by category name and description\r\n-#     search_fields = ('name', 'description')\r\n-#     # Add filter for parent categories\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n     \r\n-#     ordering = ('name',)\r\n-#     list_per_page = 20\r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n class ProductAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1738942334180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n # Admin configuration for the Category model\r\n @admin.register(Category)\r\n class CategoryAdmin(admin.ModelAdmin):\r\n     # Display category hierarchy in the list view\r\n-    list_display = ('name', 'parent', 'created_at')\r\n+    list_display = ('name', 'created_at')\r\n     # Enable search by category name and description\r\n     search_fields = ('name', 'description')\r\n     # Add filter for parent categories\r\n     list_filter = ('parent',)\r\n"
                },
                {
                    "date": 1738942359929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n class ProductAdmin(admin.ModelAdmin):\r\n     # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category', 'price', 'stock_quantity', 'status', 'favorite', 'bestseller', 'recommended')\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'favorite', 'bestseller', 'recommended')\r\n     # Enable search by product name and description\r\n     search_fields = ('name', 'description')\r\n     # Add filters for various product attributes\r\n     list_filter = ('status', 'category', 'favorite', 'bestseller', 'recommended')\r\n"
                },
                {
                    "date": 1738942397744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,11 +76,11 @@\n class ProductAdmin(admin.ModelAdmin):\r\n     # Show comprehensive product information in the list view\r\n     list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'favorite', 'bestseller', 'recommended')\r\n     # Enable search by product name and description\r\n-    search_fields = ('name', 'description')\r\n+    search_fields = ('name', 'description','parent','category')\r\n     # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'favorite', 'bestseller', 'recommended')\r\n+    list_filter = ('status', 'category', 'favorite', 'bestseller', 'recommended','parent','category')\r\n     ordering = ('name',)\r\n     # Allow direct editing of these fields in the list view\r\n     list_editable = ('price', 'stock_quantity', 'status')\r\n     # Prevent modification of timestamp fields\r\n"
                },
                {
                    "date": 1738942425054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,10 @@\n     # Display category hierarchy in the list view\r\n     list_display = ('name', 'created_at')\r\n     # Enable search by category name and description\r\n     search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n-    list_filter = ('parent',)\r\n-    ordering = ('name',)\r\n+    \r\n+    ordering = ('name')\r\n     list_per_page = 20\r\n \r\n @admin.register(ParentCategory)\r\n class ParentCategoryAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1738942479861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     list_display = ('name', 'created_at')\r\n     # Enable search by category name and description\r\n     search_fields = ('name', 'description')\r\n     \r\n-    ordering = ('name')\r\n+    ordering = ('name',)\r\n     list_per_page = 20\r\n \r\n @admin.register(ParentCategory)\r\n class ParentCategoryAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1738942703852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     readonly_fields = ('created_at', 'updated_at')\r\n     # Organize product information into logical sections\r\n     fieldsets = (\r\n         (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category', 'image')\r\n+            'fields': ('name', 'description', 'category','parent','image')\r\n         }),\r\n         (_('Pricing and Stock'), {\r\n             'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n         }),\r\n"
                },
                {
                    "date": 1738949236270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         (_('Pricing and Stock'), {\r\n             'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n         }),\r\n         (_('Status and Features'), {\r\n-            'fields': ('status', 'favorite', 'bestseller', 'recommended')\r\n+            'fields': ('status', 'favorite', 'bestseller', 'recommended','star_product')\r\n         }),\r\n         (_('Timestamps'), {\r\n             'fields': ('created_at', 'updated_at'),\r\n             'classes': ('collapse',)\r\n"
                },
                {
                    "date": 1739224207677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,18 +33,18 @@\n # Admin configuration for the CustomUser model\r\n @admin.register(CustomUser)\r\n class CustomUserAdmin(admin.ModelAdmin):\r\n     # Display key user information in the list view\r\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'country', 'city')\r\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n     # Enable search by username, email, and names\r\n     search_fields = ('username', 'email', 'first_name', 'last_name')\r\n     # Add filters for staff status, active status, gender, and country\r\n-    list_filter = ('is_staff', 'is_active', 'gender', 'country')\r\n+    list_filter = ('is_staff', 'is_active', 'gender' )\r\n     # Organize fields into logical groups\r\n     fieldsets = (\r\n         (None, {'fields': ('username', 'password')}),\r\n         (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n-        (_('Location'), {'fields': ('country', 'city')}),\r\n+        # (_('Location'), {'fields': ('country', 'city')}),\r\n         (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n     )\r\n     list_per_page = 20\r\n \r\n"
                },
                {
                    "date": 1739315137681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,11 +71,12 @@\n     list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n+\r\n class ProductAdmin(admin.ModelAdmin):\r\n     # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'favorite', 'bestseller', 'recommended')\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n     # Enable search by product name and description\r\n     search_fields = ('name', 'description','parent','category')\r\n     # Add filters for various product attributes\r\n     list_filter = ('status', 'category', 'favorite', 'bestseller', 'recommended','parent','category')\r\n@@ -92,9 +93,9 @@\n         (_('Pricing and Stock'), {\r\n             'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n         }),\r\n         (_('Status and Features'), {\r\n-            'fields': ('status', 'favorite', 'bestseller', 'recommended','star_product')\r\n+            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n         }),\r\n         (_('Timestamps'), {\r\n             'fields': ('created_at', 'updated_at'),\r\n             'classes': ('collapse',)\r\n"
                },
                {
                    "date": 1739315173318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n     # Enable search by product name and description\r\n     search_fields = ('name', 'description','parent','category')\r\n     # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'favorite', 'bestseller', 'recommended','parent','category')\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n     ordering = ('name',)\r\n     # Allow direct editing of these fields in the list view\r\n     list_editable = ('price', 'stock_quantity', 'status')\r\n     # Prevent modification of timestamp fields\r\n"
                },
                {
                    "date": 1739359021348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.contrib import admin\r\n from django.utils.translation import gettext_lazy as _\r\n from .models import (\r\n     Country, City, CustomUser, Category, Product, \r\n-    ShoppingCart, CartItem, Order, OrderItem, Review, ParentCategory\r\n+    ShoppingCart, CartItem, Order, OrderItem, Review, ParentCategory,Favorite\r\n )\r\n \r\n # Admin configuration for the Country model\r\n @admin.register(Country)\r\n@@ -174,5 +174,11 @@\n     # Prevent modification of review date\r\n     readonly_fields = ('review_date',)\r\n     # Sort by most recent reviews first\r\n     ordering = ('-review_date',)\r\n-    list_per_page = 20\n\\ No newline at end of file\n+    list_per_page = 20\r\n+    \r\n+\r\n+@admin.register(Favorite)\r\n+\r\n+class FavoriteAdmin(admin.ModelAdmin):\r\n+    pass\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739881522241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,7 @@\n from django.contrib import admin\r\n from django.utils.translation import gettext_lazy as _\r\n-from .models import (\r\n-    Country, City, CustomUser, Category, Product, \r\n-    ShoppingCart, CartItem, Order, OrderItem, Review, ParentCategory,Favorite\r\n-)\r\n+from .models import *\r\n \r\n # Admin configuration for the Country model\r\n @admin.register(Country)\r\n class CountryAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1739881553250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,44 +122,10 @@\n     list_filter = ('cart__is_active',)\r\n     list_per_page = 20\r\n \r\n # Admin configuration for the Order model\r\n-@admin.register(Order)\r\n-class OrderAdmin(admin.ModelAdmin):\r\n-    # Display order summary in the list view\r\n-    list_display = ('user', 'status', 'total_price', 'created_at')\r\n-    # Enable search by username and shipping address\r\n-    search_fields = ('user__username', 'shipping_address')\r\n-    # Add filter for order status\r\n-    list_filter = ('status',)\r\n-    # Prevent modification of timestamp fields\r\n-    readonly_fields = ('created_at', 'updated_at')\r\n-    # Organize order information into sections\r\n-    fieldsets = (\r\n-        (_('Order Information'), {\r\n-            'fields': ('user', 'status', 'total_price')\r\n-        }),\r\n-        (_('Shipping Details'), {\r\n-            'fields': ('shipping_address',)\r\n-        }),\r\n-        (_('Timestamps'), {\r\n-            'fields': ('created_at', 'updated_at'),\r\n-            'classes': ('collapse',)\r\n-        }),\r\n-    )\r\n-    list_per_page = 20\r\n+ \r\n \r\n-# Admin configuration for the OrderItem model\r\n-@admin.register(OrderItem)\r\n-class OrderItemAdmin(admin.ModelAdmin):\r\n-    # Display order item details\r\n-    list_display = ('order', 'product', 'quantity', 'price_at_purchase')\r\n-    # Enable search by username and product name\r\n-    search_fields = ('order__user__username', 'product__name')\r\n-    # Filter by order status\r\n-    list_filter = ('order__status',)\r\n-    list_per_page = 20\r\n-\r\n # Admin configuration for the Review model\r\n @admin.register(Review)\r\n class ReviewAdmin(admin.ModelAdmin):\r\n     # Show review information in the list view\r\n"
                },
                {
                    "date": 1739881642178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,10 +121,10 @@\n     # Filter by cart status\r\n     list_filter = ('cart__is_active',)\r\n     list_per_page = 20\r\n \r\n-# Admin configuration for the Order model\r\n  \r\n+ \r\n \r\n # Admin configuration for the Review model\r\n @admin.register(Review)\r\n class ReviewAdmin(admin.ModelAdmin):\r\n"
                },
                {
                    "date": 1739881687425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,17 +110,22 @@\n     # Enable search by username\r\n     search_fields = ('user__username',)\r\n     list_per_page = 20\r\n \r\n-# Admin configuration for the CartItem model\r\n+ \r\n+\r\n @admin.register(CartItem)\r\n class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view\r\n-    list_display = ('cart', 'product', 'quantity', 'created_at')\r\n+    # Show item details in the list view, including total_price\r\n+    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+    \r\n     # Enable search by username and product name\r\n     search_fields = ('cart__user__username', 'product__name')\r\n+    \r\n     # Filter by cart status\r\n     list_filter = ('cart__is_active',)\r\n+    \r\n+    # Limit the number of items per page in the list view\r\n     list_per_page = 20\r\n \r\n  \r\n  \r\n"
                },
                {
                    "date": 1739882074909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,18 +116,28 @@\n @admin.register(CartItem)\r\n class CartItemAdmin(admin.ModelAdmin):\r\n     # Show item details in the list view, including total_price\r\n     list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-    \r\n+\r\n     # Enable search by username and product name\r\n     search_fields = ('cart__user__username', 'product__name')\r\n-    \r\n+\r\n     # Filter by cart status\r\n     list_filter = ('cart__is_active',)\r\n-    \r\n+\r\n     # Limit the number of items per page in the list view\r\n     list_per_page = 20\r\n \r\n+    # You can call `calculate_total_price` when saving the object\r\n+    def save_model(self, request, obj, form, change):\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n+        \r\n+        # After saving the item, calculate the total price of the entire shopping cart\r\n+        obj.calculate_total_price_shoppingcart()\r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n  \r\n  \r\n \r\n # Admin configuration for the Review model\r\n"
                },
                {
                    "date": 1739882103228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+from django.contrib import admin\r\n+from django.utils.translation import gettext_lazy as _\r\n+from .models import *\r\n+from django.db.models import Sum\r\n+ \r\n+# Admin configuration for the Country model\r\n+@admin.register(Country)\r\n+class CountryAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the countries list\r\n+    list_display = ('name', 'code', 'created_at')\r\n+    # Search fields for filtering countries\r\n+    search_fields = ('name', 'code')\r\n+    # Default sorting by name\r\n+    ordering = ('name',)\r\n+    # Number of items per page in the admin list view\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the City model\r\n+@admin.register(City)\r\n+class CityAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the cities list\r\n+    list_display = ('name', 'country', 'created_at')\r\n+    # Enable search by city name or country name\r\n+    search_fields = ('name', 'country__name')\r\n+    # Add a filter sidebar for countries\r\n+    list_filter = ('country',)\r\n+    # Sort by country first, then by city name\r\n+    ordering = ('country', 'name')\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the CustomUser model\r\n+@admin.register(CustomUser)\r\n+class CustomUserAdmin(admin.ModelAdmin):\r\n+    # Display key user information in the list view\r\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n+    # Enable search by username, email, and names\r\n+    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n+    # Add filters for staff status, active status, gender, and country\r\n+    list_filter = ('is_staff', 'is_active', 'gender' )\r\n+    # Organize fields into logical groups\r\n+    fieldsets = (\r\n+        (None, {'fields': ('username', 'password')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n+        # (_('Location'), {'fields': ('country', 'city')}),\r\n+        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the Category model\r\n+@admin.register(Category)\r\n+class CategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+\r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name','created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+    \r\n+# Admin configuration for the Product model\r\n+@admin.register(Product)\r\n+\r\n+class ProductAdmin(admin.ModelAdmin):\r\n+    # Show comprehensive product information in the list view\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n+    # Enable search by product name and description\r\n+    search_fields = ('name', 'description','parent','category')\r\n+    # Add filters for various product attributes\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n+    ordering = ('name',)\r\n+    # Allow direct editing of these fields in the list view\r\n+    list_editable = ('price', 'stock_quantity', 'status')\r\n+    # Prevent modification of timestamp fields\r\n+    readonly_fields = ('created_at', 'updated_at')\r\n+    # Organize product information into logical sections\r\n+    fieldsets = (\r\n+        (_('Basic Information'), {\r\n+            'fields': ('name', 'description', 'category','parent','image')\r\n+        }),\r\n+        (_('Pricing and Stock'), {\r\n+            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n+        }),\r\n+        (_('Status and Features'), {\r\n+            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n+        }),\r\n+        (_('Timestamps'), {\r\n+            'fields': ('created_at', 'updated_at'),\r\n+            'classes': ('collapse',)\r\n+        }),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the ShoppingCart model\r\n+@admin.register(ShoppingCart)\r\n+class ShoppingCartAdmin(admin.ModelAdmin):\r\n+    # Display cart status and ownership\r\n+    list_display = ('user', 'is_active', 'created_at')\r\n+    # Add filter for active/inactive carts\r\n+    list_filter = ('is_active',)\r\n+    # Enable search by username\r\n+    search_fields = ('user__username',)\r\n+    list_per_page = 20\r\n+\r\n+ \r\n+\r\n+@admin.register(CartItem)\r\n+class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view, including total_price\r\n+    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+\r\n+    # Enable search by username and product name\r\n+    search_fields = ('cart__user__username', 'product__name')\r\n+\r\n+    # Filter by cart status\r\n+    list_filter = ('cart__is_active',)\r\n+\r\n+    # Limit the number of items per page in the list view\r\n+    list_per_page = 20\r\n+\r\n+    # You can call `calculate_total_price` when saving the object\r\n+    def save_model(self, request, obj, form, change):\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n+        \r\n+        # After saving the item, calculate the total price of the entire shopping cart\r\n+        obj.calculate_total_price_shoppingcart()\r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n+ \r\n+ \r\n+\r\n+# Admin configuration for the Review model\r\n+@admin.register(Review)\r\n+class ReviewAdmin(admin.ModelAdmin):\r\n+    # Show review information in the list view\r\n+    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n+    # Enable search by product, username, and review content\r\n+    search_fields = ('product__name', 'user__username', 'comment')\r\n+    # Add filters for rating and recommendation status\r\n+    list_filter = ('rating', 'recommended', 'review_date')\r\n+    # Prevent modification of review date\r\n+    readonly_fields = ('review_date',)\r\n+    # Sort by most recent reviews first\r\n+    ordering = ('-review_date',)\r\n+    list_per_page = 20\r\n+    \r\n+\r\n+@admin.register(Favorite)\r\n+\r\n+class FavoriteAdmin(admin.ModelAdmin):\r\n+    pass\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739894718846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,10 +132,9 @@\n     def save_model(self, request, obj, form, change):\r\n         # Calculate the total price of the cart item before saving\r\n         obj.calculate_total_price()\r\n         \r\n-        # After saving the item, calculate the total price of the entire shopping cart\r\n-        obj.calculate_total_price_shoppingcart()\r\n+       \r\n         \r\n         # Proceed with saving the object\r\n         super().save_model(request, obj, form, change)\r\n  \r\n"
                },
                {
                    "date": 1739980988317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,5 +158,6 @@\n \r\n @admin.register(Favorite)\r\n \r\n class FavoriteAdmin(admin.ModelAdmin):\r\n-    pass\n\\ No newline at end of file\n+    pass\r\n+\r\n"
                },
                {
                    "date": 1739981002126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,4 +160,60 @@\n \r\n class FavoriteAdmin(admin.ModelAdmin):\r\n     pass\r\n \r\n+from django.contrib import admin\r\n+from .models import Order\r\n+\r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Fields to display in the list view\r\n+    list_display = (\r\n+        'reference', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n+        'created_at', \r\n+        'updated_at'\r\n+    )\r\n+\r\n+    # Fields that are clickable for detailed view\r\n+    list_display_links = ('reference', 'user')\r\n+\r\n+    # Add search capability\r\n+    search_fields = ('reference', 'user__username', 'status')\r\n+\r\n+    # Add filters\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n+\r\n+    # Allow filtering by date range in the admin interface\r\n+    date_hierarchy = 'created_at'\r\n+\r\n+    # Display choices for payment method and order status\r\n+    list_select_related = ('user',)\r\n+\r\n+    # Custom ordering\r\n+    ordering = ['-created_at']\r\n+\r\n+    # Add fields to show in the detail view\r\n+    fieldsets = (\r\n+        (None, {\r\n+            'fields': ('reference', 'user', 'total', 'payment_method', 'status')\r\n+        }),\r\n+        ('Dates', {\r\n+            'fields': ('created_at', 'updated_at', 'payment_date')\r\n+        }),\r\n+    )\r\n+\r\n+    # Optionally, you can add inline forms or actions\r\n+    actions = ['confirm_selected_payments']\r\n+\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+\r\n+    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+\r\n+# Register the model with the admin interface\r\n+admin.site.register(Order, OrderAdmin)\r\n"
                },
                {
                    "date": 1739981036217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,10 +160,9 @@\n \r\n class FavoriteAdmin(admin.ModelAdmin):\r\n     pass\r\n \r\n-from django.contrib import admin\r\n-from .models import Order\r\n+ \r\n \r\n class OrderAdmin(admin.ModelAdmin):\r\n     # Fields to display in the list view\r\n     list_display = (\r\n@@ -216,166 +215,4 @@\n     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n # Register the model with the admin interface\r\n admin.site.register(Order, OrderAdmin)\r\n-from django.contrib import admin\r\n-from django.utils.translation import gettext_lazy as _\r\n-from .models import *\r\n-\r\n-# Admin configuration for the Country model\r\n-@admin.register(Country)\r\n-class CountryAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the countries list\r\n-    list_display = ('name', 'code', 'created_at')\r\n-    # Search fields for filtering countries\r\n-    search_fields = ('name', 'code')\r\n-    # Default sorting by name\r\n-    ordering = ('name',)\r\n-    # Number of items per page in the admin list view\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the City model\r\n-@admin.register(City)\r\n-class CityAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the cities list\r\n-    list_display = ('name', 'country', 'created_at')\r\n-    # Enable search by city name or country name\r\n-    search_fields = ('name', 'country__name')\r\n-    # Add a filter sidebar for countries\r\n-    list_filter = ('country',)\r\n-    # Sort by country first, then by city name\r\n-    ordering = ('country', 'name')\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the CustomUser model\r\n-@admin.register(CustomUser)\r\n-class CustomUserAdmin(admin.ModelAdmin):\r\n-    # Display key user information in the list view\r\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n-    # Enable search by username, email, and names\r\n-    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n-    # Add filters for staff status, active status, gender, and country\r\n-    list_filter = ('is_staff', 'is_active', 'gender' )\r\n-    # Organize fields into logical groups\r\n-    fieldsets = (\r\n-        (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n-        # (_('Location'), {'fields': ('country', 'city')}),\r\n-        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the Category model\r\n-@admin.register(Category)\r\n-class CategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name', 'created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-\r\n-@admin.register(ParentCategory)\r\n-class ParentCategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-    \r\n-# Admin configuration for the Product model\r\n-@admin.register(Product)\r\n-\r\n-class ProductAdmin(admin.ModelAdmin):\r\n-    # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n-    # Enable search by product name and description\r\n-    search_fields = ('name', 'description','parent','category')\r\n-    # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n-    ordering = ('name',)\r\n-    # Allow direct editing of these fields in the list view\r\n-    list_editable = ('price', 'stock_quantity', 'status')\r\n-    # Prevent modification of timestamp fields\r\n-    readonly_fields = ('created_at', 'updated_at')\r\n-    # Organize product information into logical sections\r\n-    fieldsets = (\r\n-        (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category','parent','image')\r\n-        }),\r\n-        (_('Pricing and Stock'), {\r\n-            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n-        }),\r\n-        (_('Status and Features'), {\r\n-            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n-        }),\r\n-        (_('Timestamps'), {\r\n-            'fields': ('created_at', 'updated_at'),\r\n-            'classes': ('collapse',)\r\n-        }),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the ShoppingCart model\r\n-@admin.register(ShoppingCart)\r\n-class ShoppingCartAdmin(admin.ModelAdmin):\r\n-    # Display cart status and ownership\r\n-    list_display = ('user', 'is_active', 'created_at')\r\n-    # Add filter for active/inactive carts\r\n-    list_filter = ('is_active',)\r\n-    # Enable search by username\r\n-    search_fields = ('user__username',)\r\n-    list_per_page = 20\r\n-\r\n- \r\n-\r\n-@admin.register(CartItem)\r\n-class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view, including total_price\r\n-    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-\r\n-    # Enable search by username and product name\r\n-    search_fields = ('cart__user__username', 'product__name')\r\n-\r\n-    # Filter by cart status\r\n-    list_filter = ('cart__is_active',)\r\n-\r\n-    # Limit the number of items per page in the list view\r\n-    list_per_page = 20\r\n-\r\n-    # You can call `calculate_total_price` when saving the object\r\n-    def save_model(self, request, obj, form, change):\r\n-        # Calculate the total price of the cart item before saving\r\n-        obj.calculate_total_price()\r\n-        \r\n-        # After saving the item, calculate the total price of the entire shopping cart\r\n-        obj.calculate_total_price_shoppingcart()\r\n-        \r\n-        # Proceed with saving the object\r\n-        super().save_model(request, obj, form, change)\r\n- \r\n- \r\n-\r\n-# Admin configuration for the Review model\r\n-@admin.register(Review)\r\n-class ReviewAdmin(admin.ModelAdmin):\r\n-    # Show review information in the list view\r\n-    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n-    # Enable search by product, username, and review content\r\n-    search_fields = ('product__name', 'user__username', 'comment')\r\n-    # Add filters for rating and recommendation status\r\n-    list_filter = ('rating', 'recommended', 'review_date')\r\n-    # Prevent modification of review date\r\n-    readonly_fields = ('review_date',)\r\n-    # Sort by most recent reviews first\r\n-    ordering = ('-review_date',)\r\n-    list_per_page = 20\r\n-    \r\n-\r\n-@admin.register(Favorite)\r\n-\r\n-class FavoriteAdmin(admin.ModelAdmin):\r\n-    pass\n"
                },
                {
                    "date": 1739981607292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n \r\n class OrderAdmin(admin.ModelAdmin):\r\n     # Fields to display in the list view\r\n     list_display = (\r\n-        'reference', \r\n+        'ref', \r\n         'user', \r\n         'total', \r\n         'payment_method', \r\n         'status', \r\n@@ -176,12 +176,12 @@\n         'updated_at'\r\n     )\r\n \r\n     # Fields that are clickable for detailed view\r\n-    list_display_links = ('reference', 'user')\r\n+    list_display_links = ('ref', 'user')\r\n \r\n     # Add search capability\r\n-    search_fields = ('reference', 'user__username', 'status')\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n \r\n     # Add filters\r\n     list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n@@ -196,9 +196,9 @@\n \r\n     # Add fields to show in the detail view\r\n     fieldsets = (\r\n         (None, {\r\n-            'fields': ('reference', 'user', 'total', 'payment_method', 'status')\r\n+            'fields': ('ref', 'user', 'total', 'payment_method', 'status')\r\n         }),\r\n         ('Dates', {\r\n             'fields': ('created_at', 'updated_at', 'payment_date')\r\n         }),\r\n"
                },
                {
                    "date": 1739981754019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,12 +162,15 @@\n     pass\r\n \r\n  \r\n \r\n+from django.contrib import admin\r\n+from .models import Order\r\n+\r\n class OrderAdmin(admin.ModelAdmin):\r\n     # Fields to display in the list view\r\n     list_display = (\r\n-        'ref', \r\n+        'reference', \r\n         'user', \r\n         'total', \r\n         'payment_method', \r\n         'status', \r\n@@ -176,12 +179,12 @@\n         'updated_at'\r\n     )\r\n \r\n     # Fields that are clickable for detailed view\r\n-    list_display_links = ('ref', 'user')\r\n+    list_display_links = ('reference', 'user')\r\n \r\n     # Add search capability\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n+    search_fields = ('reference', 'user__username', 'status')\r\n \r\n     # Add filters\r\n     list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n@@ -193,12 +196,12 @@\n \r\n     # Custom ordering\r\n     ordering = ['-created_at']\r\n \r\n-    # Add fields to show in the detail view\r\n+    # Add fields to show in the detail view excluding reference\r\n     fieldsets = (\r\n         (None, {\r\n-            'fields': ('ref', 'user', 'total', 'payment_method', 'status')\r\n+            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n         }),\r\n         ('Dates', {\r\n             'fields': ('created_at', 'updated_at', 'payment_date')\r\n         }),\r\n"
                },
                {
                    "date": 1739981822065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+from django.contrib import admin\r\n+from django.utils.translation import gettext_lazy as _\r\n+from .models import *\r\n+from django.db.models import Sum\r\n+ \r\n+# Admin configuration for the Country model\r\n+@admin.register(Country)\r\n+class CountryAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the countries list\r\n+    list_display = ('name', 'code', 'created_at')\r\n+    # Search fields for filtering countries\r\n+    search_fields = ('name', 'code')\r\n+    # Default sorting by name\r\n+    ordering = ('name',)\r\n+    # Number of items per page in the admin list view\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the City model\r\n+@admin.register(City)\r\n+class CityAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the cities list\r\n+    list_display = ('name', 'country', 'created_at')\r\n+    # Enable search by city name or country name\r\n+    search_fields = ('name', 'country__name')\r\n+    # Add a filter sidebar for countries\r\n+    list_filter = ('country',)\r\n+    # Sort by country first, then by city name\r\n+    ordering = ('country', 'name')\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the CustomUser model\r\n+@admin.register(CustomUser)\r\n+class CustomUserAdmin(admin.ModelAdmin):\r\n+    # Display key user information in the list view\r\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n+    # Enable search by username, email, and names\r\n+    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n+    # Add filters for staff status, active status, gender, and country\r\n+    list_filter = ('is_staff', 'is_active', 'gender' )\r\n+    # Organize fields into logical groups\r\n+    fieldsets = (\r\n+        (None, {'fields': ('username', 'password')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n+        # (_('Location'), {'fields': ('country', 'city')}),\r\n+        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the Category model\r\n+@admin.register(Category)\r\n+class CategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+\r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name','created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+    \r\n+# Admin configuration for the Product model\r\n+@admin.register(Product)\r\n+\r\n+class ProductAdmin(admin.ModelAdmin):\r\n+    # Show comprehensive product information in the list view\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n+    # Enable search by product name and description\r\n+    search_fields = ('name', 'description','parent','category')\r\n+    # Add filters for various product attributes\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n+    ordering = ('name',)\r\n+    # Allow direct editing of these fields in the list view\r\n+    list_editable = ('price', 'stock_quantity', 'status')\r\n+    # Prevent modification of timestamp fields\r\n+    readonly_fields = ('created_at', 'updated_at')\r\n+    # Organize product information into logical sections\r\n+    fieldsets = (\r\n+        (_('Basic Information'), {\r\n+            'fields': ('name', 'description', 'category','parent','image')\r\n+        }),\r\n+        (_('Pricing and Stock'), {\r\n+            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n+        }),\r\n+        (_('Status and Features'), {\r\n+            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n+        }),\r\n+        (_('Timestamps'), {\r\n+            'fields': ('created_at', 'updated_at'),\r\n+            'classes': ('collapse',)\r\n+        }),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the ShoppingCart model\r\n+@admin.register(ShoppingCart)\r\n+class ShoppingCartAdmin(admin.ModelAdmin):\r\n+    # Display cart status and ownership\r\n+    list_display = ('user', 'is_active', 'created_at')\r\n+    # Add filter for active/inactive carts\r\n+    list_filter = ('is_active',)\r\n+    # Enable search by username\r\n+    search_fields = ('user__username',)\r\n+    list_per_page = 20\r\n+\r\n+ \r\n+\r\n+@admin.register(CartItem)\r\n+class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view, including total_price\r\n+    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+\r\n+    # Enable search by username and product name\r\n+    search_fields = ('cart__user__username', 'product__name')\r\n+\r\n+    # Filter by cart status\r\n+    list_filter = ('cart__is_active',)\r\n+\r\n+    # Limit the number of items per page in the list view\r\n+    list_per_page = 20\r\n+\r\n+    # You can call `calculate_total_price` when saving the object\r\n+    def save_model(self, request, obj, form, change):\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n+        \r\n+       \r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n+ \r\n+ \r\n+\r\n+# Admin configuration for the Review model\r\n+@admin.register(Review)\r\n+class ReviewAdmin(admin.ModelAdmin):\r\n+    # Show review information in the list view\r\n+    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n+    # Enable search by product, username, and review content\r\n+    search_fields = ('product__name', 'user__username', 'comment')\r\n+    # Add filters for rating and recommendation status\r\n+    list_filter = ('rating', 'recommended', 'review_date')\r\n+    # Prevent modification of review date\r\n+    readonly_fields = ('review_date',)\r\n+    # Sort by most recent reviews first\r\n+    ordering = ('-review_date',)\r\n+    list_per_page = 20\r\n+    \r\n+\r\n+@admin.register(Favorite)\r\n+\r\n+class FavoriteAdmin(admin.ModelAdmin):\r\n+    pass\r\n+\r\n+ \r\n+\r\n+from django.contrib import admin\r\n+from .models import Order\r\n+\r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Fields to display in the list view\r\n+    list_display = (\r\n+        'ref', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n+        'created_at', \r\n+        'updated_at'\r\n+    )\r\n+\r\n+    # Fields that are clickable for detailed view\r\n+    list_display_links = ('ref', 'user')\r\n+\r\n+    # Add search capability\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n+\r\n+    # Add filters\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n+\r\n+    # Allow filtering by date range in the admin interface\r\n+    date_hierarchy = 'created_at'\r\n+\r\n+    # Display choices for payment method and order status\r\n+    list_select_related = ('user',)\r\n+\r\n+    # Custom ordering\r\n+    ordering = ['-created_at']\r\n+\r\n+    # Add fields to show in the detail view excluding reference\r\n+    fieldsets = (\r\n+        (None, {\r\n+            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n+        }),\r\n+        ('Dates', {\r\n+            'fields': ('created_at', 'updated_at', 'payment_date')\r\n+        }),\r\n+    )\r\n+\r\n+    # Optionally, you can add inline forms or actions\r\n+    actions = ['confirm_selected_payments']\r\n+\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+\r\n+    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+\r\n+# Register the model with the admin interface\r\n+admin.site.register(Order, OrderAdmin)\r\n"
                },
                {
                    "date": 1739981852298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+from django.contrib import admin\r\n+from django.utils.translation import gettext_lazy as _\r\n+from .models import *\r\n+from django.db.models import Sum\r\n+ \r\n+# Admin configuration for the Country model\r\n+@admin.register(Country)\r\n+class CountryAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the countries list\r\n+    list_display = ('name', 'code', 'created_at')\r\n+    # Search fields for filtering countries\r\n+    search_fields = ('name', 'code')\r\n+    # Default sorting by name\r\n+    ordering = ('name',)\r\n+    # Number of items per page in the admin list view\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the City model\r\n+@admin.register(City)\r\n+class CityAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the cities list\r\n+    list_display = ('name', 'country', 'created_at')\r\n+    # Enable search by city name or country name\r\n+    search_fields = ('name', 'country__name')\r\n+    # Add a filter sidebar for countries\r\n+    list_filter = ('country',)\r\n+    # Sort by country first, then by city name\r\n+    ordering = ('country', 'name')\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the CustomUser model\r\n+@admin.register(CustomUser)\r\n+class CustomUserAdmin(admin.ModelAdmin):\r\n+    # Display key user information in the list view\r\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n+    # Enable search by username, email, and names\r\n+    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n+    # Add filters for staff status, active status, gender, and country\r\n+    list_filter = ('is_staff', 'is_active', 'gender' )\r\n+    # Organize fields into logical groups\r\n+    fieldsets = (\r\n+        (None, {'fields': ('username', 'password')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n+        # (_('Location'), {'fields': ('country', 'city')}),\r\n+        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the Category model\r\n+@admin.register(Category)\r\n+class CategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+\r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name','created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+    \r\n+# Admin configuration for the Product model\r\n+@admin.register(Product)\r\n+\r\n+class ProductAdmin(admin.ModelAdmin):\r\n+    # Show comprehensive product information in the list view\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n+    # Enable search by product name and description\r\n+    search_fields = ('name', 'description','parent','category')\r\n+    # Add filters for various product attributes\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n+    ordering = ('name',)\r\n+    # Allow direct editing of these fields in the list view\r\n+    list_editable = ('price', 'stock_quantity', 'status')\r\n+    # Prevent modification of timestamp fields\r\n+    readonly_fields = ('created_at', 'updated_at')\r\n+    # Organize product information into logical sections\r\n+    fieldsets = (\r\n+        (_('Basic Information'), {\r\n+            'fields': ('name', 'description', 'category','parent','image')\r\n+        }),\r\n+        (_('Pricing and Stock'), {\r\n+            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n+        }),\r\n+        (_('Status and Features'), {\r\n+            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n+        }),\r\n+        (_('Timestamps'), {\r\n+            'fields': ('created_at', 'updated_at'),\r\n+            'classes': ('collapse',)\r\n+        }),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the ShoppingCart model\r\n+@admin.register(ShoppingCart)\r\n+class ShoppingCartAdmin(admin.ModelAdmin):\r\n+    # Display cart status and ownership\r\n+    list_display = ('user', 'is_active', 'created_at')\r\n+    # Add filter for active/inactive carts\r\n+    list_filter = ('is_active',)\r\n+    # Enable search by username\r\n+    search_fields = ('user__username',)\r\n+    list_per_page = 20\r\n+\r\n+ \r\n+\r\n+@admin.register(CartItem)\r\n+class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view, including total_price\r\n+    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+\r\n+    # Enable search by username and product name\r\n+    search_fields = ('cart__user__username', 'product__name')\r\n+\r\n+    # Filter by cart status\r\n+    list_filter = ('cart__is_active',)\r\n+\r\n+    # Limit the number of items per page in the list view\r\n+    list_per_page = 20\r\n+\r\n+    # You can call `calculate_total_price` when saving the object\r\n+    def save_model(self, request, obj, form, change):\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n+        \r\n+       \r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n+ \r\n+ \r\n+\r\n+# Admin configuration for the Review model\r\n+@admin.register(Review)\r\n+class ReviewAdmin(admin.ModelAdmin):\r\n+    # Show review information in the list view\r\n+    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n+    # Enable search by product, username, and review content\r\n+    search_fields = ('product__name', 'user__username', 'comment')\r\n+    # Add filters for rating and recommendation status\r\n+    list_filter = ('rating', 'recommended', 'review_date')\r\n+    # Prevent modification of review date\r\n+    readonly_fields = ('review_date',)\r\n+    # Sort by most recent reviews first\r\n+    ordering = ('-review_date',)\r\n+    list_per_page = 20\r\n+    \r\n+\r\n+@admin.register(Favorite)\r\n+\r\n+class FavoriteAdmin(admin.ModelAdmin):\r\n+    pass\r\n+\r\n+ \r\n+\r\n+from django.contrib import admin\r\n+from .models import Order\r\n+\r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Fields to display in the list view\r\n+    list_display = (\r\n+        'ref', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n+        'created_at', \r\n+        'updated_at'\r\n+    )\r\n+\r\n+    # Fields that are clickable for detailed view\r\n+    list_display_links = ('ref', 'user')\r\n+\r\n+    # Add search capability\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n+\r\n+    # Add filters\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n+\r\n+    # Allow filtering by date range in the admin interface\r\n+    date_hierarchy = 'created_at'\r\n+\r\n+    # Display choices for payment method and order status\r\n+    list_select_related = ('user',)\r\n+\r\n+    # Custom ordering\r\n+    ordering = ['-created_at']\r\n+\r\n+    # Add fields to show in the detail view excluding reference\r\n+    fieldsets = (\r\n+        (None, {\r\n+            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n+        }),\r\n+        ('Dates', {\r\n+            'fields': ( 'updated_at', 'payment_date')\r\n+        }),\r\n+    )\r\n+\r\n+    # Optionally, you can add inline forms or actions\r\n+    actions = ['confirm_selected_payments']\r\n+\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+\r\n+    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+\r\n+# Register the model with the admin interface\r\n+admin.site.register(Order, OrderAdmin)\r\n"
                },
                {
                    "date": 1739981950509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,17 +196,9 @@\n \r\n     # Custom ordering\r\n     ordering = ['-created_at']\r\n \r\n-    # Add fields to show in the detail view excluding reference\r\n-    fieldsets = (\r\n-        (None, {\r\n-            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n-        }),\r\n-        ('Dates', {\r\n-            'fields': ( 'updated_at', 'payment_date')\r\n-        }),\r\n-    )\r\n+     \r\n \r\n     # Optionally, you can add inline forms or actions\r\n     actions = ['confirm_selected_payments']\r\n \r\n@@ -218,446 +210,4 @@\n     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n # Register the model with the admin interface\r\n admin.site.register(Order, OrderAdmin)\r\n-from django.contrib import admin\r\n-from django.utils.translation import gettext_lazy as _\r\n-from .models import *\r\n-from django.db.models import Sum\r\n- \r\n-# Admin configuration for the Country model\r\n-@admin.register(Country)\r\n-class CountryAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the countries list\r\n-    list_display = ('name', 'code', 'created_at')\r\n-    # Search fields for filtering countries\r\n-    search_fields = ('name', 'code')\r\n-    # Default sorting by name\r\n-    ordering = ('name',)\r\n-    # Number of items per page in the admin list view\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the City model\r\n-@admin.register(City)\r\n-class CityAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the cities list\r\n-    list_display = ('name', 'country', 'created_at')\r\n-    # Enable search by city name or country name\r\n-    search_fields = ('name', 'country__name')\r\n-    # Add a filter sidebar for countries\r\n-    list_filter = ('country',)\r\n-    # Sort by country first, then by city name\r\n-    ordering = ('country', 'name')\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the CustomUser model\r\n-@admin.register(CustomUser)\r\n-class CustomUserAdmin(admin.ModelAdmin):\r\n-    # Display key user information in the list view\r\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n-    # Enable search by username, email, and names\r\n-    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n-    # Add filters for staff status, active status, gender, and country\r\n-    list_filter = ('is_staff', 'is_active', 'gender' )\r\n-    # Organize fields into logical groups\r\n-    fieldsets = (\r\n-        (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n-        # (_('Location'), {'fields': ('country', 'city')}),\r\n-        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the Category model\r\n-@admin.register(Category)\r\n-class CategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name', 'created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-\r\n-@admin.register(ParentCategory)\r\n-class ParentCategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-    \r\n-# Admin configuration for the Product model\r\n-@admin.register(Product)\r\n-\r\n-class ProductAdmin(admin.ModelAdmin):\r\n-    # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n-    # Enable search by product name and description\r\n-    search_fields = ('name', 'description','parent','category')\r\n-    # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n-    ordering = ('name',)\r\n-    # Allow direct editing of these fields in the list view\r\n-    list_editable = ('price', 'stock_quantity', 'status')\r\n-    # Prevent modification of timestamp fields\r\n-    readonly_fields = ('created_at', 'updated_at')\r\n-    # Organize product information into logical sections\r\n-    fieldsets = (\r\n-        (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category','parent','image')\r\n-        }),\r\n-        (_('Pricing and Stock'), {\r\n-            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n-        }),\r\n-        (_('Status and Features'), {\r\n-            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n-        }),\r\n-        (_('Timestamps'), {\r\n-            'fields': ('created_at', 'updated_at'),\r\n-            'classes': ('collapse',)\r\n-        }),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the ShoppingCart model\r\n-@admin.register(ShoppingCart)\r\n-class ShoppingCartAdmin(admin.ModelAdmin):\r\n-    # Display cart status and ownership\r\n-    list_display = ('user', 'is_active', 'created_at')\r\n-    # Add filter for active/inactive carts\r\n-    list_filter = ('is_active',)\r\n-    # Enable search by username\r\n-    search_fields = ('user__username',)\r\n-    list_per_page = 20\r\n-\r\n- \r\n-\r\n-@admin.register(CartItem)\r\n-class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view, including total_price\r\n-    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-\r\n-    # Enable search by username and product name\r\n-    search_fields = ('cart__user__username', 'product__name')\r\n-\r\n-    # Filter by cart status\r\n-    list_filter = ('cart__is_active',)\r\n-\r\n-    # Limit the number of items per page in the list view\r\n-    list_per_page = 20\r\n-\r\n-    # You can call `calculate_total_price` when saving the object\r\n-    def save_model(self, request, obj, form, change):\r\n-        # Calculate the total price of the cart item before saving\r\n-        obj.calculate_total_price()\r\n-        \r\n-       \r\n-        \r\n-        # Proceed with saving the object\r\n-        super().save_model(request, obj, form, change)\r\n- \r\n- \r\n-\r\n-# Admin configuration for the Review model\r\n-@admin.register(Review)\r\n-class ReviewAdmin(admin.ModelAdmin):\r\n-    # Show review information in the list view\r\n-    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n-    # Enable search by product, username, and review content\r\n-    search_fields = ('product__name', 'user__username', 'comment')\r\n-    # Add filters for rating and recommendation status\r\n-    list_filter = ('rating', 'recommended', 'review_date')\r\n-    # Prevent modification of review date\r\n-    readonly_fields = ('review_date',)\r\n-    # Sort by most recent reviews first\r\n-    ordering = ('-review_date',)\r\n-    list_per_page = 20\r\n-    \r\n-\r\n-@admin.register(Favorite)\r\n-\r\n-class FavoriteAdmin(admin.ModelAdmin):\r\n-    pass\r\n-\r\n- \r\n-\r\n-from django.contrib import admin\r\n-from .models import Order\r\n-\r\n-class OrderAdmin(admin.ModelAdmin):\r\n-    # Fields to display in the list view\r\n-    list_display = (\r\n-        'ref', \r\n-        'user', \r\n-        'total', \r\n-        'payment_method', \r\n-        'status', \r\n-        'payment_date', \r\n-        'created_at', \r\n-        'updated_at'\r\n-    )\r\n-\r\n-    # Fields that are clickable for detailed view\r\n-    list_display_links = ('ref', 'user')\r\n-\r\n-    # Add search capability\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n-\r\n-    # Add filters\r\n-    list_filter = ('status', 'payment_method', 'created_at')\r\n-\r\n-    # Allow filtering by date range in the admin interface\r\n-    date_hierarchy = 'created_at'\r\n-\r\n-    # Display choices for payment method and order status\r\n-    list_select_related = ('user',)\r\n-\r\n-    # Custom ordering\r\n-    ordering = ['-created_at']\r\n-\r\n-    # Add fields to show in the detail view excluding reference\r\n-    fieldsets = (\r\n-        (None, {\r\n-            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n-        }),\r\n-        ('Dates', {\r\n-            'fields': ('created_at', 'updated_at', 'payment_date')\r\n-        }),\r\n-    )\r\n-\r\n-    # Optionally, you can add inline forms or actions\r\n-    actions = ['confirm_selected_payments']\r\n-\r\n-    def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n-        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n-\r\n-    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n-\r\n-# Register the model with the admin interface\r\n-admin.site.register(Order, OrderAdmin)\r\n-from django.contrib import admin\r\n-from django.utils.translation import gettext_lazy as _\r\n-from .models import *\r\n-from django.db.models import Sum\r\n- \r\n-# Admin configuration for the Country model\r\n-@admin.register(Country)\r\n-class CountryAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the countries list\r\n-    list_display = ('name', 'code', 'created_at')\r\n-    # Search fields for filtering countries\r\n-    search_fields = ('name', 'code')\r\n-    # Default sorting by name\r\n-    ordering = ('name',)\r\n-    # Number of items per page in the admin list view\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the City model\r\n-@admin.register(City)\r\n-class CityAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the cities list\r\n-    list_display = ('name', 'country', 'created_at')\r\n-    # Enable search by city name or country name\r\n-    search_fields = ('name', 'country__name')\r\n-    # Add a filter sidebar for countries\r\n-    list_filter = ('country',)\r\n-    # Sort by country first, then by city name\r\n-    ordering = ('country', 'name')\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the CustomUser model\r\n-@admin.register(CustomUser)\r\n-class CustomUserAdmin(admin.ModelAdmin):\r\n-    # Display key user information in the list view\r\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n-    # Enable search by username, email, and names\r\n-    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n-    # Add filters for staff status, active status, gender, and country\r\n-    list_filter = ('is_staff', 'is_active', 'gender' )\r\n-    # Organize fields into logical groups\r\n-    fieldsets = (\r\n-        (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n-        # (_('Location'), {'fields': ('country', 'city')}),\r\n-        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the Category model\r\n-@admin.register(Category)\r\n-class CategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name', 'created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-\r\n-@admin.register(ParentCategory)\r\n-class ParentCategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-    \r\n-# Admin configuration for the Product model\r\n-@admin.register(Product)\r\n-\r\n-class ProductAdmin(admin.ModelAdmin):\r\n-    # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n-    # Enable search by product name and description\r\n-    search_fields = ('name', 'description','parent','category')\r\n-    # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n-    ordering = ('name',)\r\n-    # Allow direct editing of these fields in the list view\r\n-    list_editable = ('price', 'stock_quantity', 'status')\r\n-    # Prevent modification of timestamp fields\r\n-    readonly_fields = ('created_at', 'updated_at')\r\n-    # Organize product information into logical sections\r\n-    fieldsets = (\r\n-        (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category','parent','image')\r\n-        }),\r\n-        (_('Pricing and Stock'), {\r\n-            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n-        }),\r\n-        (_('Status and Features'), {\r\n-            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n-        }),\r\n-        (_('Timestamps'), {\r\n-            'fields': ('created_at', 'updated_at'),\r\n-            'classes': ('collapse',)\r\n-        }),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the ShoppingCart model\r\n-@admin.register(ShoppingCart)\r\n-class ShoppingCartAdmin(admin.ModelAdmin):\r\n-    # Display cart status and ownership\r\n-    list_display = ('user', 'is_active', 'created_at')\r\n-    # Add filter for active/inactive carts\r\n-    list_filter = ('is_active',)\r\n-    # Enable search by username\r\n-    search_fields = ('user__username',)\r\n-    list_per_page = 20\r\n-\r\n- \r\n-\r\n-@admin.register(CartItem)\r\n-class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view, including total_price\r\n-    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-\r\n-    # Enable search by username and product name\r\n-    search_fields = ('cart__user__username', 'product__name')\r\n-\r\n-    # Filter by cart status\r\n-    list_filter = ('cart__is_active',)\r\n-\r\n-    # Limit the number of items per page in the list view\r\n-    list_per_page = 20\r\n-\r\n-    # You can call `calculate_total_price` when saving the object\r\n-    def save_model(self, request, obj, form, change):\r\n-        # Calculate the total price of the cart item before saving\r\n-        obj.calculate_total_price()\r\n-        \r\n-       \r\n-        \r\n-        # Proceed with saving the object\r\n-        super().save_model(request, obj, form, change)\r\n- \r\n- \r\n-\r\n-# Admin configuration for the Review model\r\n-@admin.register(Review)\r\n-class ReviewAdmin(admin.ModelAdmin):\r\n-    # Show review information in the list view\r\n-    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n-    # Enable search by product, username, and review content\r\n-    search_fields = ('product__name', 'user__username', 'comment')\r\n-    # Add filters for rating and recommendation status\r\n-    list_filter = ('rating', 'recommended', 'review_date')\r\n-    # Prevent modification of review date\r\n-    readonly_fields = ('review_date',)\r\n-    # Sort by most recent reviews first\r\n-    ordering = ('-review_date',)\r\n-    list_per_page = 20\r\n-    \r\n-\r\n-@admin.register(Favorite)\r\n-\r\n-class FavoriteAdmin(admin.ModelAdmin):\r\n-    pass\r\n-\r\n- \r\n-\r\n-from django.contrib import admin\r\n-from .models import Order\r\n-\r\n-class OrderAdmin(admin.ModelAdmin):\r\n-    # Fields to display in the list view\r\n-    list_display = (\r\n-        'reference', \r\n-        'user', \r\n-        'total', \r\n-        'payment_method', \r\n-        'status', \r\n-        'payment_date', \r\n-        'created_at', \r\n-        'updated_at'\r\n-    )\r\n-\r\n-    # Fields that are clickable for detailed view\r\n-    list_display_links = ('reference', 'user')\r\n-\r\n-    # Add search capability\r\n-    search_fields = ('reference', 'user__username', 'status')\r\n-\r\n-    # Add filters\r\n-    list_filter = ('status', 'payment_method', 'created_at')\r\n-\r\n-    # Allow filtering by date range in the admin interface\r\n-    date_hierarchy = 'created_at'\r\n-\r\n-    # Display choices for payment method and order status\r\n-    list_select_related = ('user',)\r\n-\r\n-    # Custom ordering\r\n-    ordering = ['-created_at']\r\n-\r\n-    # Add fields to show in the detail view excluding reference\r\n-    fieldsets = (\r\n-        (None, {\r\n-            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n-        }),\r\n-        ('Dates', {\r\n-            'fields': ('created_at', 'updated_at', 'payment_date')\r\n-        }),\r\n-    )\r\n-\r\n-    # Optionally, you can add inline forms or actions\r\n-    actions = ['confirm_selected_payments']\r\n-\r\n-    def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n-        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n-\r\n-    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n-\r\n-# Register the model with the admin interface\r\n-admin.site.register(Order, OrderAdmin)\r\n"
                },
                {
                    "date": 1739982011044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n         'total', \r\n         'payment_method', \r\n         'status', \r\n         'payment_date', \r\n-        'created_at', \r\n+ \r\n         'updated_at'\r\n     )\r\n \r\n     # Fields that are clickable for detailed view\r\n"
                },
                {
                    "date": 1739982043284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n         'payment_method', \r\n         'status', \r\n         'payment_date', \r\n  \r\n-        'updated_at'\r\n+         \r\n     )\r\n \r\n     # Fields that are clickable for detailed view\r\n     list_display_links = ('ref', 'user')\r\n@@ -193,9 +193,9 @@\n \r\n     # Display choices for payment method and order status\r\n     list_select_related = ('user',)\r\n \r\n-    # Custom ordering\r\n+    # Custom ordering                                                \r\n     ordering = ['-created_at']\r\n \r\n      \r\n \r\n"
                },
                {
                    "date": 1739982240699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,48 +166,50 @@\n from django.contrib import admin\r\n from .models import Order\r\n \r\n class OrderAdmin(admin.ModelAdmin):\r\n-    # Fields to display in the list view\r\n-    list_display = (\r\n-        'ref', \r\n-        'user', \r\n-        'total', \r\n-        'payment_method', \r\n-        'status', \r\n-        'payment_date', \r\n+#     # Fields to display in the list view\r\n+#     list_display = (\r\n+#         'ref', \r\n+#         'user', \r\n+#         'total', \r\n+#         'payment_method', \r\n+#         'status', \r\n+#         'payment_date', \r\n  \r\n          \r\n-    )\r\n+#     )\r\n \r\n-    # Fields that are clickable for detailed view\r\n-    list_display_links = ('ref', 'user')\r\n+#     # Fields that are clickable for detailed view\r\n+#     list_display_links = ('ref', 'user')\r\n \r\n-    # Add search capability\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n+#     # Add search capability\r\n+#     search_fields = ('ref', 'user__username', 'status')\r\n \r\n-    # Add filters\r\n-    list_filter = ('status', 'payment_method', 'created_at')\r\n+#     # Add filters\r\n+#     list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n-    # Allow filtering by date range in the admin interface\r\n-    date_hierarchy = 'created_at'\r\n+#     # Allow filtering by date range in the admin interface\r\n+#     date_hierarchy = 'created_at'\r\n \r\n-    # Display choices for payment method and order status\r\n-    list_select_related = ('user',)\r\n+#     # Display choices for payment method and order status\r\n+#     list_select_related = ('user',)\r\n \r\n-    # Custom ordering                                                \r\n-    ordering = ['-created_at']\r\n+#     # Custom ordering                                                \r\n+#     ordering = ['-created_at']\r\n \r\n      \r\n \r\n-    # Optionally, you can add inline forms or actions\r\n-    actions = ['confirm_selected_payments']\r\n+#     # Optionally, you can add inline forms or actions\r\n+#     actions = ['confirm_selected_payments']\r\n \r\n-    def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n-        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+#     def confirm_selected_payments(self, request, queryset):\r\n+#         \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+#         count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+#         self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n \r\n-    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+#     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n+    pass\r\n+\r\n # Register the model with the admin interface\r\n admin.site.register(Order, OrderAdmin)\r\n"
                },
                {
                    "date": 1739982413422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n \r\n from django.contrib import admin\r\n from .models import Order\r\n \r\n-class OrderAdmin(admin.ModelAdmin):\r\n+ \r\n #     # Fields to display in the list view\r\n #     list_display = (\r\n #         'ref', \r\n #         'user', \r\n@@ -208,8 +208,8 @@\n #         self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n \r\n #     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n-    pass\r\n+ \r\n \r\n # Register the model with the admin interface\r\n-admin.site.register(Order, OrderAdmin)\r\n+admin.site.register(Order)\r\n"
                },
                {
                    "date": 1739984152101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n     pass\r\n \r\n  \r\n \r\n-from django.contrib import admin\r\n+ \r\n from .models import Order\r\n \r\n  \r\n #     # Fields to display in the list view\r\n@@ -211,5 +211,5 @@\n \r\n  \r\n \r\n # Register the model with the admin interface\r\n-admin.site.register(Order)\r\n+@admin.site.register(Order)\r\n"
                },
                {
                    "date": 1739984163139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,4 +212,5 @@\n  \r\n \r\n # Register the model with the admin interface\r\n @admin.site.register(Order)\r\n+\r\n"
                },
                {
                    "date": 1739984244840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,55 +162,52 @@\n     pass\r\n \r\n  \r\n \r\n- \r\n+from django.contrib import admin\r\n from .models import Order\r\n \r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Fields to display in the list view\r\n+    list_display = (\r\n+        'ref', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n  \r\n-#     # Fields to display in the list view\r\n-#     list_display = (\r\n-#         'ref', \r\n-#         'user', \r\n-#         'total', \r\n-#         'payment_method', \r\n-#         'status', \r\n-#         'payment_date', \r\n- \r\n          \r\n-#     )\r\n+    )\r\n \r\n-#     # Fields that are clickable for detailed view\r\n-#     list_display_links = ('ref', 'user')\r\n+    # Fields that are clickable for detailed view\r\n+    list_display_links = ('ref', 'user')\r\n \r\n-#     # Add search capability\r\n-#     search_fields = ('ref', 'user__username', 'status')\r\n+    # Add search capability\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n \r\n-#     # Add filters\r\n-#     list_filter = ('status', 'payment_method', 'created_at')\r\n+    # Add filters\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n-#     # Allow filtering by date range in the admin interface\r\n-#     date_hierarchy = 'created_at'\r\n+    # Allow filtering by date range in the admin interface\r\n+    date_hierarchy = 'created_at'\r\n \r\n-#     # Display choices for payment method and order status\r\n-#     list_select_related = ('user',)\r\n+    # Display choices for payment method and order status\r\n+    list_select_related = ('user',)\r\n \r\n-#     # Custom ordering                                                \r\n-#     ordering = ['-created_at']\r\n+    # Custom ordering                                                \r\n+    ordering = ['-created_at']\r\n \r\n      \r\n \r\n-#     # Optionally, you can add inline forms or actions\r\n-#     actions = ['confirm_selected_payments']\r\n+    # Optionally, you can add inline forms or actions\r\n+    actions = ['confirm_selected_payments']\r\n \r\n-#     def confirm_selected_payments(self, request, queryset):\r\n-#         \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n-#         count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-#         self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n \r\n-#     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n- \r\n-\r\n # Register the model with the admin interface\r\n-@admin.site.register(Order)\r\n-\r\n+@admin.register(Order)\r\n"
                },
                {
                    "date": 1739984271951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,12 +161,9 @@\n class FavoriteAdmin(admin.ModelAdmin):\r\n     pass\r\n \r\n  \r\n-\r\n-from django.contrib import admin\r\n-from .models import Order\r\n-\r\n+@admin.register(Order)\r\n class OrderAdmin(admin.ModelAdmin):\r\n     # Fields to display in the list view\r\n     list_display = (\r\n         'ref', \r\n@@ -209,5 +206,5 @@\n \r\n     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n # Register the model with the admin interface\r\n-@admin.register(Order)\r\n+\r\n"
                },
                {
                    "date": 1740039984970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+from django.contrib import admin\r\n+from django.utils.translation import gettext_lazy as _\r\n+from .models import *\r\n+from django.db.models import Sum\r\n+ \r\n+# Admin configuration for the Country model\r\n+@admin.register(Country)\r\n+class CountryAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the countries list\r\n+    list_display = ('name', 'code', 'created_at')\r\n+    # Search fields for filtering countries\r\n+    search_fields = ('name', 'code')\r\n+    # Default sorting by name\r\n+    ordering = ('name',)\r\n+    # Number of items per page in the admin list view\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the City model\r\n+@admin.register(City)\r\n+class CityAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the cities list\r\n+    list_display = ('name', 'country', 'created_at')\r\n+    # Enable search by city name or country name\r\n+    search_fields = ('name', 'country__name')\r\n+    # Add a filter sidebar for countries\r\n+    list_filter = ('country',)\r\n+    # Sort by country first, then by city name\r\n+    ordering = ('country', 'name')\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the CustomUser model\r\n+@admin.register(CustomUser)\r\n+class CustomUserAdmin(admin.ModelAdmin):\r\n+    # Display key user information in the list view\r\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n+    # Enable search by username, email, and names\r\n+    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n+    # Add filters for staff status, active status, gender, and country\r\n+    list_filter = ('is_staff', 'is_active', 'gender' )\r\n+    # Organize fields into logical groups\r\n+    fieldsets = (\r\n+        (None, {'fields': ('username', 'password')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n+        # (_('Location'), {'fields': ('country', 'city')}),\r\n+        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the Category model\r\n+@admin.register(Category)\r\n+class CategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+\r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name','created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+    \r\n+# Admin configuration for the Product model\r\n+@admin.register(Product)\r\n+\r\n+class ProductAdmin(admin.ModelAdmin):\r\n+    # Show comprehensive product information in the list view\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n+    # Enable search by product name and description\r\n+    search_fields = ('name', 'description','parent','category')\r\n+    # Add filters for various product attributes\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n+    ordering = ('name',)\r\n+    # Allow direct editing of these fields in the list view\r\n+    list_editable = ('price', 'stock_quantity', 'status')\r\n+    # Prevent modification of timestamp fields\r\n+    readonly_fields = ('created_at', 'updated_at')\r\n+    # Organize product information into logical sections\r\n+    fieldsets = (\r\n+        (_('Basic Information'), {\r\n+            'fields': ('name', 'description', 'category','parent','image')\r\n+        }),\r\n+        (_('Pricing and Stock'), {\r\n+            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n+        }),\r\n+        (_('Status and Features'), {\r\n+            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n+        }),\r\n+        (_('Timestamps'), {\r\n+            'fields': ('created_at', 'updated_at'),\r\n+            'classes': ('collapse',)\r\n+        }),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the ShoppingCart model\r\n+@admin.register(ShoppingCart)\r\n+class ShoppingCartAdmin(admin.ModelAdmin):\r\n+    # Display cart status and ownership\r\n+    list_display = ('user', 'is_active', 'created_at')\r\n+    # Add filter for active/inactive carts\r\n+    list_filter = ('is_active',)\r\n+    # Enable search by username\r\n+    search_fields = ('user__username',)\r\n+    list_per_page = 20\r\n+\r\n+ \r\n+\r\n+@admin.register(CartItem)\r\n+class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view, including total_price\r\n+    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+\r\n+    # Enable search by username and product name\r\n+    search_fields = ('cart__user__username', 'product__name')\r\n+\r\n+    # Filter by cart status\r\n+    list_filter = ('cart__is_active',)\r\n+\r\n+    # Limit the number of items per page in the list view\r\n+    list_per_page = 20\r\n+\r\n+    # You can call `calculate_total_price` when saving the object\r\n+    def save_model(self, request, obj, form, change):\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n+        \r\n+       \r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n+ \r\n+ \r\n+\r\n+# Admin configuration for the Review model\r\n+@admin.register(Review)\r\n+class ReviewAdmin(admin.ModelAdmin):\r\n+    # Show review information in the list view\r\n+    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n+    # Enable search by product, username, and review content\r\n+    search_fields = ('product__name', 'user__username', 'comment')\r\n+    # Add filters for rating and recommendation status\r\n+    list_filter = ('rating', 'recommended', 'review_date')\r\n+    # Prevent modification of review date\r\n+    readonly_fields = ('review_date',)\r\n+    # Sort by most recent reviews first\r\n+    ordering = ('-review_date',)\r\n+    list_per_page = 20\r\n+    \r\n+\r\n+@admin.register(Favorite)\r\n+\r\n+class FavoriteAdmin(admin.ModelAdmin):\r\n+    pass\r\n+\r\n+ \r\n+@admin.register(Order)\r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Fields to display in the list view\r\n+    list_display = (\r\n+        'ref', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n+ \r\n+         \r\n+    )\r\n+\r\n+    # Fields that are clickable for detailed view\r\n+    list_display_links = ('ref', 'user')\r\n+\r\n+    # Add search capability\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n+\r\n+    # Add filters\r\n+    list_filter = ('status', 'payment_method',)\r\n+\r\n+    \r\n+\r\n+    # Display choices for payment method and order status\r\n+    list_select_related = ('user',)\r\n+\r\n+    # Custom ordering                                                \r\n+    ordering = ['-created_at']\r\n+\r\n+     \r\n+\r\n+    # Optionally, you can add inline forms or actions\r\n+    actions = ['confirm_selected_payments']\r\n+\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+\r\n+    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+\r\n+# Register the model with the admin interface\r\n+\r\n"
                },
                {
                    "date": 1740040008752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,221 +189,10 @@\n \r\n     # Display choices for payment method and order status\r\n     list_select_related = ('user',)\r\n \r\n-    # Custom ordering                                                \r\n-    ordering = ['-created_at']\r\n-\r\n-     \r\n-\r\n-    # Optionally, you can add inline forms or actions\r\n-    actions = ['confirm_selected_payments']\r\n-\r\n-    def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n-        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n-\r\n-    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n-\r\n-# Register the model with the admin interface\r\n-\r\n-from django.contrib import admin\r\n-from django.utils.translation import gettext_lazy as _\r\n-from .models import *\r\n-from django.db.models import Sum\r\n  \r\n-# Admin configuration for the Country model\r\n-@admin.register(Country)\r\n-class CountryAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the countries list\r\n-    list_display = ('name', 'code', 'created_at')\r\n-    # Search fields for filtering countries\r\n-    search_fields = ('name', 'code')\r\n-    # Default sorting by name\r\n-    ordering = ('name',)\r\n-    # Number of items per page in the admin list view\r\n-    list_per_page = 20\r\n \r\n-# Admin configuration for the City model\r\n-@admin.register(City)\r\n-class CityAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the cities list\r\n-    list_display = ('name', 'country', 'created_at')\r\n-    # Enable search by city name or country name\r\n-    search_fields = ('name', 'country__name')\r\n-    # Add a filter sidebar for countries\r\n-    list_filter = ('country',)\r\n-    # Sort by country first, then by city name\r\n-    ordering = ('country', 'name')\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the CustomUser model\r\n-@admin.register(CustomUser)\r\n-class CustomUserAdmin(admin.ModelAdmin):\r\n-    # Display key user information in the list view\r\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n-    # Enable search by username, email, and names\r\n-    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n-    # Add filters for staff status, active status, gender, and country\r\n-    list_filter = ('is_staff', 'is_active', 'gender' )\r\n-    # Organize fields into logical groups\r\n-    fieldsets = (\r\n-        (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n-        # (_('Location'), {'fields': ('country', 'city')}),\r\n-        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the Category model\r\n-@admin.register(Category)\r\n-class CategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name', 'created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-\r\n-@admin.register(ParentCategory)\r\n-class ParentCategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-    \r\n-# Admin configuration for the Product model\r\n-@admin.register(Product)\r\n-\r\n-class ProductAdmin(admin.ModelAdmin):\r\n-    # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n-    # Enable search by product name and description\r\n-    search_fields = ('name', 'description','parent','category')\r\n-    # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n-    ordering = ('name',)\r\n-    # Allow direct editing of these fields in the list view\r\n-    list_editable = ('price', 'stock_quantity', 'status')\r\n-    # Prevent modification of timestamp fields\r\n-    readonly_fields = ('created_at', 'updated_at')\r\n-    # Organize product information into logical sections\r\n-    fieldsets = (\r\n-        (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category','parent','image')\r\n-        }),\r\n-        (_('Pricing and Stock'), {\r\n-            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n-        }),\r\n-        (_('Status and Features'), {\r\n-            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n-        }),\r\n-        (_('Timestamps'), {\r\n-            'fields': ('created_at', 'updated_at'),\r\n-            'classes': ('collapse',)\r\n-        }),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the ShoppingCart model\r\n-@admin.register(ShoppingCart)\r\n-class ShoppingCartAdmin(admin.ModelAdmin):\r\n-    # Display cart status and ownership\r\n-    list_display = ('user', 'is_active', 'created_at')\r\n-    # Add filter for active/inactive carts\r\n-    list_filter = ('is_active',)\r\n-    # Enable search by username\r\n-    search_fields = ('user__username',)\r\n-    list_per_page = 20\r\n-\r\n- \r\n-\r\n-@admin.register(CartItem)\r\n-class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view, including total_price\r\n-    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-\r\n-    # Enable search by username and product name\r\n-    search_fields = ('cart__user__username', 'product__name')\r\n-\r\n-    # Filter by cart status\r\n-    list_filter = ('cart__is_active',)\r\n-\r\n-    # Limit the number of items per page in the list view\r\n-    list_per_page = 20\r\n-\r\n-    # You can call `calculate_total_price` when saving the object\r\n-    def save_model(self, request, obj, form, change):\r\n-        # Calculate the total price of the cart item before saving\r\n-        obj.calculate_total_price()\r\n-        \r\n-       \r\n-        \r\n-        # Proceed with saving the object\r\n-        super().save_model(request, obj, form, change)\r\n- \r\n- \r\n-\r\n-# Admin configuration for the Review model\r\n-@admin.register(Review)\r\n-class ReviewAdmin(admin.ModelAdmin):\r\n-    # Show review information in the list view\r\n-    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n-    # Enable search by product, username, and review content\r\n-    search_fields = ('product__name', 'user__username', 'comment')\r\n-    # Add filters for rating and recommendation status\r\n-    list_filter = ('rating', 'recommended', 'review_date')\r\n-    # Prevent modification of review date\r\n-    readonly_fields = ('review_date',)\r\n-    # Sort by most recent reviews first\r\n-    ordering = ('-review_date',)\r\n-    list_per_page = 20\r\n-    \r\n-\r\n-@admin.register(Favorite)\r\n-\r\n-class FavoriteAdmin(admin.ModelAdmin):\r\n-    pass\r\n-\r\n- \r\n-@admin.register(Order)\r\n-class OrderAdmin(admin.ModelAdmin):\r\n-    # Fields to display in the list view\r\n-    list_display = (\r\n-        'ref', \r\n-        'user', \r\n-        'total', \r\n-        'payment_method', \r\n-        'status', \r\n-        'payment_date', \r\n- \r\n-         \r\n-    )\r\n-\r\n-    # Fields that are clickable for detailed view\r\n-    list_display_links = ('ref', 'user')\r\n-\r\n-    # Add search capability\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n-\r\n-    # Add filters\r\n-    list_filter = ('status', 'payment_method', 'created_at')\r\n-\r\n-    # Allow filtering by date range in the admin interface\r\n-    date_hierarchy = 'created_at'\r\n-\r\n-    # Display choices for payment method and order status\r\n-    list_select_related = ('user',)\r\n-\r\n-    # Custom ordering                                                \r\n-    ordering = ['-created_at']\r\n-\r\n      \r\n \r\n     # Optionally, you can add inline forms or actions\r\n     actions = ['confirm_selected_payments']\r\n"
                },
                {
                    "date": 1740040056121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,22 +175,9 @@\n  \r\n          \r\n     )\r\n \r\n-    # Fields that are clickable for detailed view\r\n-    list_display_links = ('ref', 'user')\r\n-\r\n-    # Add search capability\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n-\r\n-    # Add filters\r\n-    list_filter = ('status', 'payment_method',)\r\n-\r\n-    \r\n-\r\n-    # Display choices for payment method and order status\r\n-    list_select_related = ('user',)\r\n-\r\n+     \r\n  \r\n \r\n      \r\n \r\n"
                },
                {
                    "date": 1740040337387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,23 +165,46 @@\n @admin.register(Order)\r\n class OrderAdmin(admin.ModelAdmin):\r\n     # Fields to display in the list view\r\n     list_display = (\r\n-        'ref', \r\n+        'reference', \r\n         'user', \r\n         'total', \r\n         'payment_method', \r\n         'status', \r\n         'payment_date', \r\n- \r\n-         \r\n+        'created_at', \r\n+        'updated_at'\r\n     )\r\n \r\n-     \r\n- \r\n+    # Fields that are clickable for detailed view\r\n+    list_display_links = ('reference', 'user')\r\n \r\n-     \r\n+    # Add search capability\r\n+    search_fields = ('reference', 'user__username', 'status')\r\n \r\n+    # Add filters\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n+\r\n+    # Allow filtering by date range in the admin interface\r\n+    date_hierarchy = 'created_at'\r\n+\r\n+    # Display choices for payment method and order status\r\n+    list_select_related = ('user',)\r\n+\r\n+    # Custom ordering\r\n+    ordering = ['-created_at']\r\n+\r\n+    # Add fields to show in the detail view excluding reference\r\n+    fieldsets = (\r\n+        (None, {\r\n+            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n+        }),\r\n+        ('Dates', {\r\n+            'fields': ('created_at', 'updated_at', 'payment_date')\r\n+        }),\r\n+    )\r\n+\r\n     # Optionally, you can add inline forms or actions\r\n     actions = ['confirm_selected_payments']\r\n \r\n     def confirm_selected_payments(self, request, queryset):\r\n@@ -191,5 +214,4 @@\n \r\n     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n # Register the model with the admin interface\r\n-\r\n"
                },
                {
                    "date": 1740040375135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n @admin.register(Order)\r\n class OrderAdmin(admin.ModelAdmin):\r\n     # Fields to display in the list view\r\n     list_display = (\r\n-        'reference', \r\n+        'ref', \r\n         'user', \r\n         'total', \r\n         'payment_method', \r\n         'status', \r\n@@ -176,12 +176,12 @@\n         'updated_at'\r\n     )\r\n \r\n     # Fields that are clickable for detailed view\r\n-    list_display_links = ('reference', 'user')\r\n+    list_display_links = ('ref', 'user')\r\n \r\n     # Add search capability\r\n-    search_fields = ('reference', 'user__username', 'status')\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n \r\n     # Add filters\r\n     list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n"
                },
                {
                    "date": 1740047527403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,57 +161,57 @@\n class FavoriteAdmin(admin.ModelAdmin):\r\n     pass\r\n \r\n  \r\n-@admin.register(Order)\r\n-class OrderAdmin(admin.ModelAdmin):\r\n-    # Fields to display in the list view\r\n-    list_display = (\r\n-        'ref', \r\n-        'user', \r\n-        'total', \r\n-        'payment_method', \r\n-        'status', \r\n-        'payment_date', \r\n-        'created_at', \r\n-        'updated_at'\r\n-    )\r\n+# @admin.register(Order)\r\n+# class OrderAdmin(admin.ModelAdmin):\r\n+#     # Fields to display in the list view\r\n+#     list_display = (\r\n+#         'ref', \r\n+#         'user', \r\n+#         'total', \r\n+#         'payment_method', \r\n+#         'status', \r\n+#         'payment_date', \r\n+#         'created_at', \r\n+#         'updated_at'\r\n+#     )\r\n \r\n-    # Fields that are clickable for detailed view\r\n-    list_display_links = ('ref', 'user')\r\n+#     # Fields that are clickable for detailed view\r\n+#     list_display_links = ('ref', 'user')\r\n \r\n-    # Add search capability\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n+#     # Add search capability\r\n+#     search_fields = ('ref', 'user__username', 'status')\r\n \r\n-    # Add filters\r\n-    list_filter = ('status', 'payment_method', 'created_at')\r\n+#     # Add filters\r\n+#     list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n-    # Allow filtering by date range in the admin interface\r\n-    date_hierarchy = 'created_at'\r\n+#     # Allow filtering by date range in the admin interface\r\n+#     date_hierarchy = 'created_at'\r\n \r\n-    # Display choices for payment method and order status\r\n-    list_select_related = ('user',)\r\n+#     # Display choices for payment method and order status\r\n+#     list_select_related = ('user',)\r\n \r\n-    # Custom ordering\r\n-    ordering = ['-created_at']\r\n+#     # Custom ordering\r\n+#     ordering = ['-created_at']\r\n \r\n-    # Add fields to show in the detail view excluding reference\r\n-    fieldsets = (\r\n-        (None, {\r\n-            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n-        }),\r\n-        ('Dates', {\r\n-            'fields': ('created_at', 'updated_at', 'payment_date')\r\n-        }),\r\n-    )\r\n+#     # Add fields to show in the detail view excluding reference\r\n+#     fieldsets = (\r\n+#         (None, {\r\n+#             'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n+#         }),\r\n+#         ('Dates', {\r\n+#             'fields': ('created_at', 'updated_at', 'payment_date')\r\n+#         }),\r\n+#     )\r\n \r\n-    # Optionally, you can add inline forms or actions\r\n-    actions = ['confirm_selected_payments']\r\n+#     # Optionally, you can add inline forms or actions\r\n+#     actions = ['confirm_selected_payments']\r\n \r\n-    def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n-        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+#     def confirm_selected_payments(self, request, queryset):\r\n+#         \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+#         count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+#         self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n \r\n-    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+#     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n-# Register the model with the admin interface\r\n+# # Register the model with the admin interface\r\n"
                },
                {
                    "date": 1740047600704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,57 +161,57 @@\n class FavoriteAdmin(admin.ModelAdmin):\r\n     pass\r\n \r\n  \r\n-# @admin.register(Order)\r\n-# class OrderAdmin(admin.ModelAdmin):\r\n-#     # Fields to display in the list view\r\n-#     list_display = (\r\n-#         'ref', \r\n-#         'user', \r\n-#         'total', \r\n-#         'payment_method', \r\n-#         'status', \r\n-#         'payment_date', \r\n-#         'created_at', \r\n-#         'updated_at'\r\n-#     )\r\n+@admin.register(Order)\r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Fields to display in the list view\r\n+    list_display = (\r\n+        'ref', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n+        'created_at', \r\n+        'updated_at'\r\n+    )\r\n \r\n-#     # Fields that are clickable for detailed view\r\n-#     list_display_links = ('ref', 'user')\r\n+    # Fields that are clickable for detailed view\r\n+    list_display_links = ('ref', 'user')\r\n \r\n-#     # Add search capability\r\n-#     search_fields = ('ref', 'user__username', 'status')\r\n+    # Add search capability\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n \r\n-#     # Add filters\r\n-#     list_filter = ('status', 'payment_method', 'created_at')\r\n+    # Add filters\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n-#     # Allow filtering by date range in the admin interface\r\n-#     date_hierarchy = 'created_at'\r\n+    # Allow filtering by date range in the admin interface\r\n+    date_hierarchy = 'created_at'\r\n \r\n-#     # Display choices for payment method and order status\r\n-#     list_select_related = ('user',)\r\n+    # Display choices for payment method and order status\r\n+    list_select_related = ('user',)\r\n \r\n-#     # Custom ordering\r\n-#     ordering = ['-created_at']\r\n+    # Custom ordering\r\n+    ordering = ['-created_at']\r\n \r\n-#     # Add fields to show in the detail view excluding reference\r\n-#     fieldsets = (\r\n-#         (None, {\r\n-#             'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n-#         }),\r\n-#         ('Dates', {\r\n-#             'fields': ('created_at', 'updated_at', 'payment_date')\r\n-#         }),\r\n-#     )\r\n+    # Add fields to show in the detail view excluding reference\r\n+    fieldsets = (\r\n+        (None, {\r\n+            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n+        }),\r\n+        ('Dates', {\r\n+            'fields': ('created_at', 'updated_at', 'payment_date')\r\n+        }),\r\n+    )\r\n \r\n-#     # Optionally, you can add inline forms or actions\r\n-#     actions = ['confirm_selected_payments']\r\n+    # Optionally, you can add inline forms or actions\r\n+    actions = ['confirm_selected_payments']\r\n \r\n-#     def confirm_selected_payments(self, request, queryset):\r\n-#         \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n-#         count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-#         self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n \r\n-#     confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n \r\n-# # Register the model with the admin interface\r\n+# Register the model with the admin interface\r\n"
                },
                {
                    "date": 1740048669592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,11 +163,11 @@\n \r\n  \r\n @admin.register(Order)\r\n class OrderAdmin(admin.ModelAdmin):\r\n-    # Fields to display in the list view\r\n+    # Champs à afficher dans la liste\r\n     list_display = (\r\n-        'ref', \r\n+        'reference', \r\n         'user', \r\n         'total', \r\n         'payment_method', \r\n         'status', \r\n@@ -175,43 +175,37 @@\n         'created_at', \r\n         'updated_at'\r\n     )\r\n \r\n-    # Fields that are clickable for detailed view\r\n-    list_display_links = ('ref', 'user')\r\n+    # Champs cliquables pour voir les détails\r\n+    list_display_links = ('reference', 'user')\r\n \r\n-    # Add search capability\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n+    # Ajout de la recherche\r\n+    search_fields = ('reference', 'user__username', 'status')\r\n \r\n-    # Add filters\r\n+    # Ajout de filtres\r\n     list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n-    # Allow filtering by date range in the admin interface\r\n+    # Permet de filtrer par période dans l'interface d'administration\r\n     date_hierarchy = 'created_at'\r\n \r\n-    # Display choices for payment method and order status\r\n+    # Affichage des choix pour la méthode de paiement et le statut de la commande\r\n     list_select_related = ('user',)\r\n \r\n-    # Custom ordering\r\n+    # Ordonnancement personnalisé\r\n     ordering = ['-created_at']\r\n \r\n-    # Add fields to show in the detail view excluding reference\r\n-    fieldsets = (\r\n-        (None, {\r\n-            'fields': ('user', 'total', 'payment_method', 'status')  # Exclude reference\r\n-        }),\r\n-        ('Dates', {\r\n-            'fields': ('created_at', 'updated_at', 'payment_date')\r\n-        }),\r\n-    )\r\n+    # Exclusion de 'created_at' du formulaire\r\n+    exclude = ('created_at',)  # Exclure le champ 'created_at'\r\n \r\n-    # Optionally, you can add inline forms or actions\r\n+    # Ajouter des actions personnalisées si nécessaire\r\n     actions = ['confirm_selected_payments']\r\n \r\n     def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Custom action to confirm payment for selected orders.\"\"\"\r\n+        \"\"\"Action personnalisée pour confirmer le paiement des commandes sélectionnées.\"\"\"\r\n         count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} orders have been marked as Payment Confirmed.')\r\n+        self.message_user(request, f'{count} commandes ont été marquées comme Paiement Confirmé.')\r\n \r\n-    confirm_selected_payments.short_description = \"Confirm payment for selected orders\"\r\n+    confirm_selected_payments.short_description = \"Confirmer le paiement pour les commandes sélectionnées\"\r\n \r\n-# Register the model with the admin interface\r\n+# Enregistrer le modèle dans l'interface d'administration\r\n+admin.site.register(Order, OrderAdmin)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740048894619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,5 +207,5 @@\n \r\n     confirm_selected_payments.short_description = \"Confirmer le paiement pour les commandes sélectionnées\"\r\n \r\n # Enregistrer le modèle dans l'interface d'administration\r\n-admin.site.register(Order, OrderAdmin)\n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740048958540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n @admin.register(Order)\r\n class OrderAdmin(admin.ModelAdmin):\r\n     # Champs à afficher dans la liste\r\n     list_display = (\r\n-        'reference', \r\n+        'ref', \r\n         'user', \r\n         'total', \r\n         'payment_method', \r\n         'status', \r\n@@ -176,12 +176,12 @@\n         'updated_at'\r\n     )\r\n \r\n     # Champs cliquables pour voir les détails\r\n-    list_display_links = ('reference', 'user')\r\n+    list_display_links = ('ref', 'user')\r\n \r\n     # Ajout de la recherche\r\n-    search_fields = ('reference', 'user__username', 'status')\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n \r\n     # Ajout de filtres\r\n     list_filter = ('status', 'payment_method', 'created_at')\r\n \r\n"
                },
                {
                    "date": 1740054440358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,211 @@\n+from django.contrib import admin\r\n+from django.utils.translation import gettext_lazy as _\r\n+from .models import *\r\n+from django.db.models import Sum\r\n+ \r\n+# Admin configuration for the Country model\r\n+@admin.register(Country)\r\n+class CountryAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the countries list\r\n+    list_display = ('name', 'code', 'created_at')\r\n+    # Search fields for filtering countries\r\n+    search_fields = ('name', 'code')\r\n+    # Default sorting by name\r\n+    ordering = ('name',)\r\n+    # Number of items per page in the admin list view\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the City model\r\n+@admin.register(City)\r\n+class CityAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the cities list\r\n+    list_display = ('name', 'country', 'created_at')\r\n+    # Enable search by city name or country name\r\n+    search_fields = ('name', 'country__name')\r\n+    # Add a filter sidebar for countries\r\n+    list_filter = ('country',)\r\n+    # Sort by country first, then by city name\r\n+    ordering = ('country', 'name')\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the CustomUser model\r\n+@admin.register(CustomUser)\r\n+class CustomUserAdmin(admin.ModelAdmin):\r\n+    # Display key user information in the list view\r\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n+    # Enable search by username, email, and names\r\n+    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n+    # Add filters for staff status, active status, gender, and country\r\n+    list_filter = ('is_staff', 'is_active', 'gender' )\r\n+    # Organize fields into logical groups\r\n+    fieldsets = (\r\n+        (None, {'fields': ('username', 'password')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n+        # (_('Location'), {'fields': ('country', 'city')}),\r\n+        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the Category model\r\n+@admin.register(Category)\r\n+class CategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+\r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name','created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+    \r\n+# Admin configuration for the Product model\r\n+@admin.register(Product)\r\n+\r\n+class ProductAdmin(admin.ModelAdmin):\r\n+    # Show comprehensive product information in the list view\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n+    # Enable search by product name and description\r\n+    search_fields = ('name', 'description','parent','category')\r\n+    # Add filters for various product attributes\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n+    ordering = ('name',)\r\n+    # Allow direct editing of these fields in the list view\r\n+    list_editable = ('price', 'stock_quantity', 'status')\r\n+    # Prevent modification of timestamp fields\r\n+    readonly_fields = ('created_at', 'updated_at')\r\n+    # Organize product information into logical sections\r\n+    fieldsets = (\r\n+        (_('Basic Information'), {\r\n+            'fields': ('name', 'description', 'category','parent','image')\r\n+        }),\r\n+        (_('Pricing and Stock'), {\r\n+            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n+        }),\r\n+        (_('Status and Features'), {\r\n+            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n+        }),\r\n+        (_('Timestamps'), {\r\n+            'fields': ('created_at', 'updated_at'),\r\n+            'classes': ('collapse',)\r\n+        }),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the ShoppingCart model\r\n+@admin.register(ShoppingCart)\r\n+class ShoppingCartAdmin(admin.ModelAdmin):\r\n+    # Display cart status and ownership\r\n+    list_display = ('user', 'is_active', 'created_at')\r\n+    # Add filter for active/inactive carts\r\n+    list_filter = ('is_active',)\r\n+    # Enable search by username\r\n+    search_fields = ('user__username',)\r\n+    list_per_page = 20\r\n+\r\n+ \r\n+\r\n+@admin.register(CartItem)\r\n+class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view, including total_price\r\n+    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+\r\n+    # Enable search by username and product name\r\n+    search_fields = ('cart__user__username', 'product__name')\r\n+\r\n+    # Filter by cart status\r\n+    list_filter = ('cart__is_active',)\r\n+\r\n+    # Limit the number of items per page in the list view\r\n+    list_per_page = 20\r\n+\r\n+    # You can call `calculate_total_price` when saving the object\r\n+    def save_model(self, request, obj, form, change):\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n+        \r\n+       \r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n+ \r\n+ \r\n+\r\n+# Admin configuration for the Review model\r\n+@admin.register(Review)\r\n+class ReviewAdmin(admin.ModelAdmin):\r\n+    # Show review information in the list view\r\n+    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n+    # Enable search by product, username, and review content\r\n+    search_fields = ('product__name', 'user__username', 'comment')\r\n+    # Add filters for rating and recommendation status\r\n+    list_filter = ('rating', 'recommended', 'review_date')\r\n+    # Prevent modification of review date\r\n+    readonly_fields = ('review_date',)\r\n+    # Sort by most recent reviews first\r\n+    ordering = ('-review_date',)\r\n+    list_per_page = 20\r\n+    \r\n+\r\n+@admin.register(Favorite)\r\n+\r\n+class FavoriteAdmin(admin.ModelAdmin):\r\n+    pass\r\n+\r\n+ \r\n+@admin.register(Order)\r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Champs à afficher dans la liste\r\n+    list_display = (\r\n+        'ref', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n+        'created_at', \r\n+        'updated_at'\r\n+    )\r\n+\r\n+    # Champs cliquables pour voir les détails\r\n+    list_display_links = ('ref', 'user')\r\n+\r\n+    # Ajout de la recherche\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n+\r\n+    # Ajout de filtres\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n+\r\n+    # Permet de filtrer par période dans l'interface d'administration\r\n+    date_hierarchy = 'created_at'\r\n+\r\n+    # Affichage des choix pour la méthode de paiement et le statut de la commande\r\n+    list_select_related = ('user',)\r\n+\r\n+    # Ordonnancement personnalisé\r\n+    ordering = ['-created_at']\r\n+\r\n+    # Exclusion de 'created_at' du formulaire\r\n+    exclude = ('created_at',)  # Exclure le champ 'created_at'\r\n+\r\n+    # Ajouter des actions personnalisées si nécessaire\r\n+    actions = ['confirm_selected_payments']\r\n+\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Action personnalisée pour confirmer le paiement des commandes sélectionnées.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} commandes ont été marquées comme Paiement Confirmé.')\r\n+\r\n+    confirm_selected_payments.short_description = \"Confirmer le paiement pour les commandes sélectionnées\"\r\n+\r\n+# Enregistrer le modèle dans l'interface d'administration\r\n+@admin.register(OrderLine)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740054478263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,216 +207,9 @@\n \r\n     confirm_selected_payments.short_description = \"Confirmer le paiement pour les commandes sélectionnées\"\r\n \r\n # Enregistrer le modèle dans l'interface d'administration\r\n-@admin.register(OrderLine)\n-from django.contrib import admin\r\n-from django.utils.translation import gettext_lazy as _\r\n-from .models import *\r\n-from django.db.models import Sum\r\n- \r\n-# Admin configuration for the Country model\r\n-@admin.register(Country)\r\n-class CountryAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the countries list\r\n-    list_display = ('name', 'code', 'created_at')\r\n-    # Search fields for filtering countries\r\n-    search_fields = ('name', 'code')\r\n-    # Default sorting by name\r\n-    ordering = ('name',)\r\n-    # Number of items per page in the admin list view\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the City model\r\n-@admin.register(City)\r\n-class CityAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the cities list\r\n-    list_display = ('name', 'country', 'created_at')\r\n-    # Enable search by city name or country name\r\n-    search_fields = ('name', 'country__name')\r\n-    # Add a filter sidebar for countries\r\n-    list_filter = ('country',)\r\n-    # Sort by country first, then by city name\r\n-    ordering = ('country', 'name')\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the CustomUser model\r\n-@admin.register(CustomUser)\r\n-class CustomUserAdmin(admin.ModelAdmin):\r\n-    # Display key user information in the list view\r\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n-    # Enable search by username, email, and names\r\n-    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n-    # Add filters for staff status, active status, gender, and country\r\n-    list_filter = ('is_staff', 'is_active', 'gender' )\r\n-    # Organize fields into logical groups\r\n-    fieldsets = (\r\n-        (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n-        # (_('Location'), {'fields': ('country', 'city')}),\r\n-        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the Category model\r\n-@admin.register(Category)\r\n-class CategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name', 'created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n+@admin.register(OrderLine)\r\n     \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-\r\n-@admin.register(ParentCategory)\r\n-class ParentCategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-    \r\n-# Admin configuration for the Product model\r\n-@admin.register(Product)\r\n-\r\n-class ProductAdmin(admin.ModelAdmin):\r\n-    # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n-    # Enable search by product name and description\r\n-    search_fields = ('name', 'description','parent','category')\r\n-    # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n-    ordering = ('name',)\r\n-    # Allow direct editing of these fields in the list view\r\n-    list_editable = ('price', 'stock_quantity', 'status')\r\n-    # Prevent modification of timestamp fields\r\n-    readonly_fields = ('created_at', 'updated_at')\r\n-    # Organize product information into logical sections\r\n-    fieldsets = (\r\n-        (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category','parent','image')\r\n-        }),\r\n-        (_('Pricing and Stock'), {\r\n-            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n-        }),\r\n-        (_('Status and Features'), {\r\n-            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n-        }),\r\n-        (_('Timestamps'), {\r\n-            'fields': ('created_at', 'updated_at'),\r\n-            'classes': ('collapse',)\r\n-        }),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the ShoppingCart model\r\n-@admin.register(ShoppingCart)\r\n-class ShoppingCartAdmin(admin.ModelAdmin):\r\n-    # Display cart status and ownership\r\n-    list_display = ('user', 'is_active', 'created_at')\r\n-    # Add filter for active/inactive carts\r\n-    list_filter = ('is_active',)\r\n-    # Enable search by username\r\n-    search_fields = ('user__username',)\r\n-    list_per_page = 20\r\n-\r\n- \r\n-\r\n-@admin.register(CartItem)\r\n-class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view, including total_price\r\n-    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-\r\n-    # Enable search by username and product name\r\n-    search_fields = ('cart__user__username', 'product__name')\r\n-\r\n-    # Filter by cart status\r\n-    list_filter = ('cart__is_active',)\r\n-\r\n-    # Limit the number of items per page in the list view\r\n-    list_per_page = 20\r\n-\r\n-    # You can call `calculate_total_price` when saving the object\r\n-    def save_model(self, request, obj, form, change):\r\n-        # Calculate the total price of the cart item before saving\r\n-        obj.calculate_total_price()\r\n-        \r\n-       \r\n-        \r\n-        # Proceed with saving the object\r\n-        super().save_model(request, obj, form, change)\r\n- \r\n- \r\n-\r\n-# Admin configuration for the Review model\r\n-@admin.register(Review)\r\n-class ReviewAdmin(admin.ModelAdmin):\r\n-    # Show review information in the list view\r\n-    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n-    # Enable search by product, username, and review content\r\n-    search_fields = ('product__name', 'user__username', 'comment')\r\n-    # Add filters for rating and recommendation status\r\n-    list_filter = ('rating', 'recommended', 'review_date')\r\n-    # Prevent modification of review date\r\n-    readonly_fields = ('review_date',)\r\n-    # Sort by most recent reviews first\r\n-    ordering = ('-review_date',)\r\n-    list_per_page = 20\r\n-    \r\n-\r\n-@admin.register(Favorite)\r\n-\r\n-class FavoriteAdmin(admin.ModelAdmin):\r\n-    pass\r\n-\r\n- \r\n-@admin.register(Order)\r\n-class OrderAdmin(admin.ModelAdmin):\r\n+class OrderLineAdmin(admin.ModelAdmin):\r\n     # Champs à afficher dans la liste\r\n-    list_display = (\r\n-        'ref', \r\n-        'user', \r\n-        'total', \r\n-        'payment_method', \r\n-        'status', \r\n-        'payment_date', \r\n-        'created_at', \r\n-        'updated_at'\r\n-    )\r\n-\r\n-    # Champs cliquables pour voir les détails\r\n-    list_display_links = ('ref', 'user')\r\n-\r\n-    # Ajout de la recherche\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n-\r\n-    # Ajout de filtres\r\n-    list_filter = ('status', 'payment_method', 'created_at')\r\n-\r\n-    # Permet de filtrer par période dans l'interface d'administration\r\n-    date_hierarchy = 'created_at'\r\n-\r\n-    # Affichage des choix pour la méthode de paiement et le statut de la commande\r\n-    list_select_related = ('user',)\r\n-\r\n-    # Ordonnancement personnalisé\r\n-    ordering = ['-created_at']\r\n-\r\n-    # Exclusion de 'created_at' du formulaire\r\n-    exclude = ('created_at',)  # Exclure le champ 'created_at'\r\n-\r\n-    # Ajouter des actions personnalisées si nécessaire\r\n-    actions = ['confirm_selected_payments']\r\n-\r\n-    def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Action personnalisée pour confirmer le paiement des commandes sélectionnées.\"\"\"\r\n-        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} commandes ont été marquées comme Paiement Confirmé.')\r\n-\r\n-    confirm_selected_payments.short_description = \"Confirmer le paiement pour les commandes sélectionnées\"\r\n-\r\n\\ No newline at end of file\n-# Enregistrer le modèle dans l'interface d'administration\r\n- \n+    list_display = ('order', 'product', 'quantity', 'unit_price', 'line_total')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740134255682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,5 +211,24 @@\n @admin.register(OrderLine)\r\n     \r\n class OrderLineAdmin(admin.ModelAdmin):\r\n     # Champs à afficher dans la liste\r\n-    list_display = ('order', 'product', 'quantity', 'unit_price', 'line_total')\n\\ No newline at end of file\n+    list_display = ('order', 'product', 'quantity', 'unit_price', 'line_total')\r\n+    \r\n+@admin.register(StockMovement)\r\n+class StockMovementAdmin(admin.ModelAdmin):\r\n+    list_display = ('date', 'product', 'movement_type', 'quantity', 'reason', 'reference')\r\n+    list_filter = ('movement_type', 'date', 'product__category')\r\n+    search_fields = ('product__name', 'reason', 'reference')\r\n+    date_hierarchy = 'date'\r\n+    readonly_fields = ('date',)\r\n+    ordering = ('-date',)\r\n+    list_per_page = 20\r\n+\r\n+    fieldsets = (\r\n+        (_('Mouvement Information'), {\r\n+            'fields': ('product', 'movement_type', 'quantity')\r\n+        }),\r\n+        (_('Détails'), {\r\n+            'fields': ('reason', 'reference', 'date')\r\n+        }),\r\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740134303122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,287 @@\n+from django.contrib import admin\r\n+from django.utils.translation import gettext_lazy as _\r\n+from .models import *\r\n+from django.db.models import Sum\r\n+ \r\n+# Admin configuration for the Country model\r\n+@admin.register(Country)\r\n+class CountryAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the countries list\r\n+    list_display = ('name', 'code', 'created_at')\r\n+    # Search fields for filtering countries\r\n+    search_fields = ('name', 'code')\r\n+    # Default sorting by name\r\n+    ordering = ('name',)\r\n+    # Number of items per page in the admin list view\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the City model\r\n+@admin.register(City)\r\n+class CityAdmin(admin.ModelAdmin):\r\n+    # Columns to display in the cities list\r\n+    list_display = ('name', 'country', 'created_at')\r\n+    # Enable search by city name or country name\r\n+    search_fields = ('name', 'country__name')\r\n+    # Add a filter sidebar for countries\r\n+    list_filter = ('country',)\r\n+    # Sort by country first, then by city name\r\n+    ordering = ('country', 'name')\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the CustomUser model\r\n+@admin.register(CustomUser)\r\n+class CustomUserAdmin(admin.ModelAdmin):\r\n+    # Display key user information in the list view\r\n+    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n+    # Enable search by username, email, and names\r\n+    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n+    # Add filters for staff status, active status, gender, and country\r\n+    list_filter = ('is_staff', 'is_active', 'gender' )\r\n+    # Organize fields into logical groups\r\n+    fieldsets = (\r\n+        (None, {'fields': ('username', 'password')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n+        # (_('Location'), {'fields': ('country', 'city')}),\r\n+        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+# Admin configuration for the Category model\r\n+@admin.register(Category)\r\n+class CategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name', 'created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+\r\n+@admin.register(ParentCategory)\r\n+class ParentCategoryAdmin(admin.ModelAdmin):\r\n+    # Display category hierarchy in the list view\r\n+    list_display = ('name','created_at')\r\n+    # Enable search by category name and description\r\n+    search_fields = ('name', 'description')\r\n+    # Add filter for parent categories\r\n+    \r\n+    ordering = ('name',)\r\n+    list_per_page = 20\r\n+    \r\n+# Admin configuration for the Product model\r\n+@admin.register(Product)\r\n+class ProductAdmin(admin.ModelAdmin):\r\n+    list_display = (\r\n+        'name', \r\n+        'category',\r\n+        'parent', \r\n+        'price', \r\n+        'stock_quantity', \r\n+        'status', \r\n+        'bestseller', \r\n+        'recommended'\r\n+    )\r\n+    search_fields = ('name', 'description', 'parent', 'category')\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended', 'parent', 'category')\r\n+    ordering = ('name',)\r\n+    list_editable = ('price', 'stock_quantity', 'status')\r\n+    readonly_fields = ('created_at', 'updated_at')\r\n+    \r\n+    fieldsets = (\r\n+        (_('Basic Information'), {\r\n+            'fields': ('name', 'description', 'category', 'parent', 'image')\r\n+        }),\r\n+        (_('Pricing and Stock'), {\r\n+            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n+        }),\r\n+        (_('Status and Features'), {\r\n+            'fields': ('status', 'bestseller', 'recommended', 'star_product')\r\n+        }),\r\n+        (_('Timestamps'), {\r\n+            'fields': ('created_at', 'updated_at'),\r\n+            'classes': ('collapse',)\r\n+        }),\r\n+    )\r\n+    list_per_page = 20\r\n+\r\n+    def save_model(self, request, obj, form, change):\r\n+        if change:  # Si c'est une modification\r\n+            old_obj = self.model.objects.get(pk=obj.pk)\r\n+            stock_diff = obj.stock_quantity - old_obj.stock_quantity\r\n+            \r\n+            if stock_diff != 0:\r\n+                # Créer un mouvement de stock\r\n+                StockMovement.objects.create(\r\n+                    product=obj,\r\n+                    quantity=abs(stock_diff),\r\n+                    movement_type='IN' if stock_diff > 0 else 'OUT',\r\n+                    reason=_(\"Modification manuelle du stock\"),\r\n+                    reference=f\"ADMIN-{request.user.username}\"\r\n+                )\r\n+        \r\n+        super().save_model(request, obj, form, change)\r\n+\r\n+    def get_readonly_fields(self, request, obj=None):\r\n+        readonly_fields = list(super().get_readonly_fields(request, obj))\r\n+        if obj:  # Si c'est une modification\r\n+            readonly_fields.append('stock_quantity')  # Rendre stock_quantity en lecture seule\r\n+        return readonly_fields\r\n+\r\n+    actions = ['add_stock', 'remove_stock']\r\n+\r\n+    def add_stock(self, request, queryset):\r\n+        # Action pour ajouter du stock\r\n+        for product in queryset:\r\n+            StockMovement.objects.create(\r\n+                product=product,\r\n+                quantity=10,  # Quantité par défaut\r\n+                movement_type='IN',\r\n+                reason=_(\"Ajout de stock via action admin\"),\r\n+                reference=f\"ADMIN-{request.user.username}\"\r\n+            )\r\n+    add_stock.short_description = _(\"Ajouter 10 unités au stock\")\r\n+\r\n+    def remove_stock(self, request, queryset):\r\n+        # Action pour retirer du stock\r\n+        for product in queryset:\r\n+            if product.stock_quantity >= 10:\r\n+                StockMovement.objects.create(\r\n+                    product=product,\r\n+                    quantity=10,  # Quantité par défaut\r\n+                    movement_type='OUT',\r\n+                    reason=_(\"Retrait de stock via action admin\"),\r\n+                    reference=f\"ADMIN-{request.user.username}\"\r\n+                )\r\n+    remove_stock.short_description = _(\"Retirer 10 unités du stock\")\r\n+\r\n+# Admin configuration for the ShoppingCart model\r\n+@admin.register(ShoppingCart)\r\n+class ShoppingCartAdmin(admin.ModelAdmin):\r\n+    # Display cart status and ownership\r\n+    list_display = ('user', 'is_active', 'created_at')\r\n+    # Add filter for active/inactive carts\r\n+    list_filter = ('is_active',)\r\n+    # Enable search by username\r\n+    search_fields = ('user__username',)\r\n+    list_per_page = 20\r\n+\r\n+ \r\n+\r\n+@admin.register(CartItem)\r\n+class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view, including total_price\r\n+    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+\r\n+    # Enable search by username and product name\r\n+    search_fields = ('cart__user__username', 'product__name')\r\n+\r\n+    # Filter by cart status\r\n+    list_filter = ('cart__is_active',)\r\n+\r\n+    # Limit the number of items per page in the list view\r\n+    list_per_page = 20\r\n+\r\n+    # You can call `calculate_total_price` when saving the object\r\n+    def save_model(self, request, obj, form, change):\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n+        \r\n+       \r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n+ \r\n+ \r\n+\r\n+# Admin configuration for the Review model\r\n+@admin.register(Review)\r\n+class ReviewAdmin(admin.ModelAdmin):\r\n+    # Show review information in the list view\r\n+    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n+    # Enable search by product, username, and review content\r\n+    search_fields = ('product__name', 'user__username', 'comment')\r\n+    # Add filters for rating and recommendation status\r\n+    list_filter = ('rating', 'recommended', 'review_date')\r\n+    # Prevent modification of review date\r\n+    readonly_fields = ('review_date',)\r\n+    # Sort by most recent reviews first\r\n+    ordering = ('-review_date',)\r\n+    list_per_page = 20\r\n+    \r\n+\r\n+@admin.register(Favorite)\r\n+\r\n+class FavoriteAdmin(admin.ModelAdmin):\r\n+    pass\r\n+\r\n+ \r\n+@admin.register(Order)\r\n+class OrderAdmin(admin.ModelAdmin):\r\n+    # Champs à afficher dans la liste\r\n+    list_display = (\r\n+        'ref', \r\n+        'user', \r\n+        'total', \r\n+        'payment_method', \r\n+        'status', \r\n+        'payment_date', \r\n+        'created_at', \r\n+        'updated_at'\r\n+    )\r\n+\r\n+    # Champs cliquables pour voir les détails\r\n+    list_display_links = ('ref', 'user')\r\n+\r\n+    # Ajout de la recherche\r\n+    search_fields = ('ref', 'user__username', 'status')\r\n+\r\n+    # Ajout de filtres\r\n+    list_filter = ('status', 'payment_method', 'created_at')\r\n+\r\n+    # Permet de filtrer par période dans l'interface d'administration\r\n+    date_hierarchy = 'created_at'\r\n+\r\n+    # Affichage des choix pour la méthode de paiement et le statut de la commande\r\n+    list_select_related = ('user',)\r\n+\r\n+    # Ordonnancement personnalisé\r\n+    ordering = ['-created_at']\r\n+\r\n+    # Exclusion de 'created_at' du formulaire\r\n+    exclude = ('created_at',)  # Exclure le champ 'created_at'\r\n+\r\n+    # Ajouter des actions personnalisées si nécessaire\r\n+    actions = ['confirm_selected_payments']\r\n+\r\n+    def confirm_selected_payments(self, request, queryset):\r\n+        \"\"\"Action personnalisée pour confirmer le paiement des commandes sélectionnées.\"\"\"\r\n+        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n+        self.message_user(request, f'{count} commandes ont été marquées comme Paiement Confirmé.')\r\n+\r\n+    confirm_selected_payments.short_description = \"Confirmer le paiement pour les commandes sélectionnées\"\r\n+\r\n+# Enregistrer le modèle dans l'interface d'administration\r\n+@admin.register(OrderLine)\r\n+    \r\n+class OrderLineAdmin(admin.ModelAdmin):\r\n+    # Champs à afficher dans la liste\r\n+    list_display = ('order', 'product', 'quantity', 'unit_price', 'line_total')\r\n+    \r\n+@admin.register(StockMovement)\r\n+class StockMovementAdmin(admin.ModelAdmin):\r\n+    list_display = ('date', 'product', 'movement_type', 'quantity', 'reason', 'reference')\r\n+    list_filter = ('movement_type', 'date', 'product__category')\r\n+    search_fields = ('product__name', 'reason', 'reference')\r\n+    date_hierarchy = 'date'\r\n+    readonly_fields = ('date',)\r\n+    ordering = ('-date',)\r\n+    list_per_page = 20\r\n+\r\n+    fieldsets = (\r\n+        (_('Mouvement Information'), {\r\n+            'fields': ('product', 'movement_type', 'quantity')\r\n+        }),\r\n+        (_('Détails'), {\r\n+            'fields': ('reason', 'reference', 'date')\r\n+        }),\r\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740134331033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,266 +168,60 @@\n  \r\n \r\n @admin.register(CartItem)\r\n class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view, including total_price\r\n     list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-\r\n-    # Enable search by username and product name\r\n     search_fields = ('cart__user__username', 'product__name')\r\n-\r\n-    # Filter by cart status\r\n     list_filter = ('cart__is_active',)\r\n-\r\n-    # Limit the number of items per page in the list view\r\n     list_per_page = 20\r\n \r\n-    # You can call `calculate_total_price` when saving the object\r\n     def save_model(self, request, obj, form, change):\r\n-        # Calculate the total price of the cart item before saving\r\n         obj.calculate_total_price()\r\n         \r\n-       \r\n+        if not change:  # Si c'est une nouvelle création\r\n+            # Vérifier le stock disponible\r\n+            if obj.product.stock_quantity < obj.quantity:\r\n+                raise admin.ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n+            \r\n+            # Créer le mouvement de stock\r\n+            StockMovement.objects.create(\r\n+                product=obj.product,\r\n+                quantity=obj.quantity,\r\n+                movement_type='OUT',\r\n+                reason=_(\"Ajout au panier via admin\"),\r\n+                reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n+            )\r\n         \r\n-        # Proceed with saving the object\r\n+        elif change:  # Si c'est une modification\r\n+            old_obj = self.model.objects.get(pk=obj.pk)\r\n+            quantity_diff = obj.quantity - old_obj.quantity\r\n+            \r\n+            if quantity_diff != 0:\r\n+                if quantity_diff > 0 and obj.product.stock_quantity < quantity_diff:\r\n+                    raise admin.ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n+                \r\n+                StockMovement.objects.create(\r\n+                    product=obj.product,\r\n+                    quantity=abs(quantity_diff),\r\n+                    movement_type='OUT' if quantity_diff > 0 else 'IN',\r\n+                    reason=_(\"Modification quantité panier via admin\"),\r\n+                    reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n+                )\r\n+        \r\n         super().save_model(request, obj, form, change)\r\n- \r\n- \r\n \r\n-# Admin configuration for the Review model\r\n-@admin.register(Review)\r\n-class ReviewAdmin(admin.ModelAdmin):\r\n-    # Show review information in the list view\r\n-    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n-    # Enable search by product, username, and review content\r\n-    search_fields = ('product__name', 'user__username', 'comment')\r\n-    # Add filters for rating and recommendation status\r\n-    list_filter = ('rating', 'recommended', 'review_date')\r\n-    # Prevent modification of review date\r\n-    readonly_fields = ('review_date',)\r\n-    # Sort by most recent reviews first\r\n-    ordering = ('-review_date',)\r\n-    list_per_page = 20\r\n-    \r\n-\r\n-@admin.register(Favorite)\r\n-\r\n-class FavoriteAdmin(admin.ModelAdmin):\r\n-    pass\r\n-\r\n+    def delete_model(self, request, obj):\r\n+        # Remettre le stock lors de la suppression\r\n+        StockMovement.objects.create(\r\n+            product=obj.product,\r\n+            quantity=obj.quantity,\r\n+            movement_type='IN',\r\n+            reason=_(\"Suppression du panier via admin\"),\r\n+            reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n+        )\r\n+        super().delete_model(request, obj)\r\n  \r\n-@admin.register(Order)\r\n-class OrderAdmin(admin.ModelAdmin):\r\n-    # Champs à afficher dans la liste\r\n-    list_display = (\r\n-        'ref', \r\n-        'user', \r\n-        'total', \r\n-        'payment_method', \r\n-        'status', \r\n-        'payment_date', \r\n-        'created_at', \r\n-        'updated_at'\r\n-    )\r\n \r\n-    # Champs cliquables pour voir les détails\r\n-    list_display_links = ('ref', 'user')\r\n-\r\n-    # Ajout de la recherche\r\n-    search_fields = ('ref', 'user__username', 'status')\r\n-\r\n-    # Ajout de filtres\r\n-    list_filter = ('status', 'payment_method', 'created_at')\r\n-\r\n-    # Permet de filtrer par période dans l'interface d'administration\r\n-    date_hierarchy = 'created_at'\r\n-\r\n-    # Affichage des choix pour la méthode de paiement et le statut de la commande\r\n-    list_select_related = ('user',)\r\n-\r\n-    # Ordonnancement personnalisé\r\n-    ordering = ['-created_at']\r\n-\r\n-    # Exclusion de 'created_at' du formulaire\r\n-    exclude = ('created_at',)  # Exclure le champ 'created_at'\r\n-\r\n-    # Ajouter des actions personnalisées si nécessaire\r\n-    actions = ['confirm_selected_payments']\r\n-\r\n-    def confirm_selected_payments(self, request, queryset):\r\n-        \"\"\"Action personnalisée pour confirmer le paiement des commandes sélectionnées.\"\"\"\r\n-        count = queryset.update(status=Order.OrderStatus.PAYMENT_CONFIRMED, payment_date=timezone.now())\r\n-        self.message_user(request, f'{count} commandes ont été marquées comme Paiement Confirmé.')\r\n-\r\n-    confirm_selected_payments.short_description = \"Confirmer le paiement pour les commandes sélectionnées\"\r\n-\r\n-# Enregistrer le modèle dans l'interface d'administration\r\n-@admin.register(OrderLine)\r\n-    \r\n-class OrderLineAdmin(admin.ModelAdmin):\r\n-    # Champs à afficher dans la liste\r\n-    list_display = ('order', 'product', 'quantity', 'unit_price', 'line_total')\r\n-    \r\n-@admin.register(StockMovement)\r\n-class StockMovementAdmin(admin.ModelAdmin):\r\n-    list_display = ('date', 'product', 'movement_type', 'quantity', 'reason', 'reference')\r\n-    list_filter = ('movement_type', 'date', 'product__category')\r\n-    search_fields = ('product__name', 'reason', 'reference')\r\n-    date_hierarchy = 'date'\r\n-    readonly_fields = ('date',)\r\n-    ordering = ('-date',)\r\n-    list_per_page = 20\r\n-\r\n-    fieldsets = (\r\n-        (_('Mouvement Information'), {\r\n-            'fields': ('product', 'movement_type', 'quantity')\r\n-        }),\r\n-        (_('Détails'), {\r\n-            'fields': ('reason', 'reference', 'date')\r\n-        }),\r\n-    )\n-from django.contrib import admin\r\n-from django.utils.translation import gettext_lazy as _\r\n-from .models import *\r\n-from django.db.models import Sum\r\n- \r\n-# Admin configuration for the Country model\r\n-@admin.register(Country)\r\n-class CountryAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the countries list\r\n-    list_display = ('name', 'code', 'created_at')\r\n-    # Search fields for filtering countries\r\n-    search_fields = ('name', 'code')\r\n-    # Default sorting by name\r\n-    ordering = ('name',)\r\n-    # Number of items per page in the admin list view\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the City model\r\n-@admin.register(City)\r\n-class CityAdmin(admin.ModelAdmin):\r\n-    # Columns to display in the cities list\r\n-    list_display = ('name', 'country', 'created_at')\r\n-    # Enable search by city name or country name\r\n-    search_fields = ('name', 'country__name')\r\n-    # Add a filter sidebar for countries\r\n-    list_filter = ('country',)\r\n-    # Sort by country first, then by city name\r\n-    ordering = ('country', 'name')\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the CustomUser model\r\n-@admin.register(CustomUser)\r\n-class CustomUserAdmin(admin.ModelAdmin):\r\n-    # Display key user information in the list view\r\n-    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff' )\r\n-    # Enable search by username, email, and names\r\n-    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n-    # Add filters for staff status, active status, gender, and country\r\n-    list_filter = ('is_staff', 'is_active', 'gender' )\r\n-    # Organize fields into logical groups\r\n-    fieldsets = (\r\n-        (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n-        # (_('Location'), {'fields': ('country', 'city')}),\r\n-        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the Category model\r\n-@admin.register(Category)\r\n-class CategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name', 'created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-\r\n-@admin.register(ParentCategory)\r\n-class ParentCategoryAdmin(admin.ModelAdmin):\r\n-    # Display category hierarchy in the list view\r\n-    list_display = ('name','created_at')\r\n-    # Enable search by category name and description\r\n-    search_fields = ('name', 'description')\r\n-    # Add filter for parent categories\r\n-    \r\n-    ordering = ('name',)\r\n-    list_per_page = 20\r\n-    \r\n-# Admin configuration for the Product model\r\n-@admin.register(Product)\r\n-\r\n-class ProductAdmin(admin.ModelAdmin):\r\n-    # Show comprehensive product information in the list view\r\n-    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n-    # Enable search by product name and description\r\n-    search_fields = ('name', 'description','parent','category')\r\n-    # Add filters for various product attributes\r\n-    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n-    ordering = ('name',)\r\n-    # Allow direct editing of these fields in the list view\r\n-    list_editable = ('price', 'stock_quantity', 'status')\r\n-    # Prevent modification of timestamp fields\r\n-    readonly_fields = ('created_at', 'updated_at')\r\n-    # Organize product information into logical sections\r\n-    fieldsets = (\r\n-        (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category','parent','image')\r\n-        }),\r\n-        (_('Pricing and Stock'), {\r\n-            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n-        }),\r\n-        (_('Status and Features'), {\r\n-            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n-        }),\r\n-        (_('Timestamps'), {\r\n-            'fields': ('created_at', 'updated_at'),\r\n-            'classes': ('collapse',)\r\n-        }),\r\n-    )\r\n-    list_per_page = 20\r\n-\r\n-# Admin configuration for the ShoppingCart model\r\n-@admin.register(ShoppingCart)\r\n-class ShoppingCartAdmin(admin.ModelAdmin):\r\n-    # Display cart status and ownership\r\n-    list_display = ('user', 'is_active', 'created_at')\r\n-    # Add filter for active/inactive carts\r\n-    list_filter = ('is_active',)\r\n-    # Enable search by username\r\n-    search_fields = ('user__username',)\r\n-    list_per_page = 20\r\n-\r\n- \r\n-\r\n-@admin.register(CartItem)\r\n-class CartItemAdmin(admin.ModelAdmin):\r\n-    # Show item details in the list view, including total_price\r\n-    list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n-\r\n-    # Enable search by username and product name\r\n-    search_fields = ('cart__user__username', 'product__name')\r\n-\r\n-    # Filter by cart status\r\n-    list_filter = ('cart__is_active',)\r\n-\r\n-    # Limit the number of items per page in the list view\r\n-    list_per_page = 20\r\n-\r\n-    # You can call `calculate_total_price` when saving the object\r\n-    def save_model(self, request, obj, form, change):\r\n-        # Calculate the total price of the cart item before saving\r\n-        obj.calculate_total_price()\r\n-        \r\n-       \r\n-        \r\n-        # Proceed with saving the object\r\n-        super().save_model(request, obj, form, change)\r\n- \r\n- \r\n-\r\n # Admin configuration for the Review model\r\n @admin.register(Review)\r\n class ReviewAdmin(admin.ModelAdmin):\r\n     # Show review information in the list view\r\n"
                },
                {
                    "date": 1740135433204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,62 +166,96 @@\n     list_per_page = 20\r\n \r\n  \r\n \r\n+ \r\n+\r\n @admin.register(CartItem)\r\n class CartItemAdmin(admin.ModelAdmin):\r\n     list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n     search_fields = ('cart__user__username', 'product__name')\r\n     list_filter = ('cart__is_active',)\r\n     list_per_page = 20\r\n-\r\n+    \r\n     def save_model(self, request, obj, form, change):\r\n-        obj.calculate_total_price()\r\n-        \r\n-        if not change:  # Si c'est une nouvelle création\r\n-            # Vérifier le stock disponible\r\n-            if obj.product.stock_quantity < obj.quantity:\r\n-                raise admin.ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n-            \r\n-            # Créer le mouvement de stock\r\n-            StockMovement.objects.create(\r\n-                product=obj.product,\r\n-                quantity=obj.quantity,\r\n-                movement_type='OUT',\r\n-                reason=_(\"Ajout au panier via admin\"),\r\n-                reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n-            )\r\n-        \r\n-        elif change:  # Si c'est une modification\r\n-            old_obj = self.model.objects.get(pk=obj.pk)\r\n-            quantity_diff = obj.quantity - old_obj.quantity\r\n-            \r\n-            if quantity_diff != 0:\r\n-                if quantity_diff > 0 and obj.product.stock_quantity < quantity_diff:\r\n-                    raise admin.ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n+        \"\"\"Gestion de la sauvegarde avec vérification du stock\"\"\"\r\n+        try:\r\n+            if not change:  # Nouvel article\r\n+                # Vérifier le stock disponible\r\n+                if obj.product.stock_quantity < obj.quantity:\r\n+                    raise ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n                 \r\n+                # Calculer le prix total\r\n+                obj.total_price = obj.product.price * obj.quantity\r\n+                \r\n+                # Sauvegarder l'article\r\n+                super().save_model(request, obj, form, change)\r\n+                \r\n+                # Créer le mouvement de stock\r\n                 StockMovement.objects.create(\r\n                     product=obj.product,\r\n-                    quantity=abs(quantity_diff),\r\n-                    movement_type='OUT' if quantity_diff > 0 else 'IN',\r\n-                    reason=_(\"Modification quantité panier via admin\"),\r\n+                    quantity=obj.quantity,\r\n+                    movement_type='OUT',\r\n+                    reason=_(\"Ajout au panier via admin\"),\r\n                     reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n                 )\r\n+            \r\n+            else:  # Modification d'un article existant\r\n+                original_obj = CartItem.objects.get(pk=obj.pk)\r\n+                quantity_diff = obj.quantity - original_obj.quantity\r\n+                \r\n+                if quantity_diff > 0:  # Augmentation de la quantité\r\n+                    if obj.product.stock_quantity < quantity_diff:\r\n+                        raise ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n+                \r\n+                # Calculer le nouveau prix total\r\n+                obj.total_price = obj.product.price * obj.quantity\r\n+                \r\n+                # Sauvegarder l'article\r\n+                super().save_model(request, obj, form, change)\r\n+                \r\n+                if quantity_diff != 0:  # Créer un mouvement de stock si la quantité a changé\r\n+                    StockMovement.objects.create(\r\n+                        product=obj.product,\r\n+                        quantity=abs(quantity_diff),\r\n+                        movement_type='OUT' if quantity_diff > 0 else 'IN',\r\n+                        reason=_(\"Modification quantité panier via admin\"),\r\n+                        reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n+                    )\r\n         \r\n-        super().save_model(request, obj, form, change)\r\n-\r\n+        except ValidationError as e:\r\n+            self.message_user(request, str(e), level='ERROR')\r\n+            raise\r\n+    \r\n     def delete_model(self, request, obj):\r\n-        # Remettre le stock lors de la suppression\r\n+        \"\"\"Gestion de la suppression avec remise en stock\"\"\"\r\n+        # Créer un mouvement de stock pour la remise en stock\r\n         StockMovement.objects.create(\r\n             product=obj.product,\r\n             quantity=obj.quantity,\r\n             movement_type='IN',\r\n             reason=_(\"Suppression du panier via admin\"),\r\n             reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n         )\r\n         super().delete_model(request, obj)\r\n- \r\n \r\n+    def get_form(self, request, obj=None, **kwargs):\r\n+        form = super().get_form(request, obj, **kwargs)\r\n+        if not obj:  # Si c'est un nouvel article\r\n+            # Définir les champs obligatoires\r\n+            form.base_fields['cart'].required = True\r\n+            form.base_fields['product'].required = True\r\n+            form.base_fields['quantity'].required = True\r\n+            # Ajouter une aide pour le champ quantité\r\n+            form.base_fields['quantity'].help_text = _(\"La quantité doit être inférieure ou égale au stock disponible\")\r\n+        return form\r\n+\r\n+    def formfield_for_foreignkey(self, db_field, request, **kwargs):\r\n+        if db_field.name == \"cart\":\r\n+            # Limiter les choix aux paniers actifs\r\n+            kwargs[\"queryset\"] = ShoppingCart.objects.filter(is_active=True)\r\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\r\n+\r\n # Admin configuration for the Review model\r\n @admin.register(Review)\r\n class ReviewAdmin(admin.ModelAdmin):\r\n     # Show review information in the list view\r\n"
                },
                {
                    "date": 1740136955900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,92 +69,39 @@\n     list_per_page = 20\r\n     \r\n # Admin configuration for the Product model\r\n @admin.register(Product)\r\n+\r\n class ProductAdmin(admin.ModelAdmin):\r\n-    list_display = (\r\n-        'name', \r\n-        'category',\r\n-        'parent', \r\n-        'price', \r\n-        'stock_quantity', \r\n-        'status', \r\n-        'bestseller', \r\n-        'recommended'\r\n-    )\r\n-    search_fields = ('name', 'description', 'parent', 'category')\r\n-    list_filter = ('status', 'category', 'bestseller', 'recommended', 'parent', 'category')\r\n+    # Show comprehensive product information in the list view\r\n+    list_display = ('name', 'category','parent', 'price', 'stock_quantity', 'status', 'bestseller', 'recommended')\r\n+    # Enable search by product name and description\r\n+    search_fields = ('name', 'description','parent','category')\r\n+    # Add filters for various product attributes\r\n+    list_filter = ('status', 'category', 'bestseller', 'recommended','parent','category')\r\n     ordering = ('name',)\r\n+    # Allow direct editing of these fields in the list view\r\n     list_editable = ('price', 'stock_quantity', 'status')\r\n+    # Prevent modification of timestamp fields\r\n     readonly_fields = ('created_at', 'updated_at')\r\n-    \r\n+    # Organize product information into logical sections\r\n     fieldsets = (\r\n         (_('Basic Information'), {\r\n-            'fields': ('name', 'description', 'category', 'parent', 'image')\r\n+            'fields': ('name', 'description', 'category','parent','image')\r\n         }),\r\n         (_('Pricing and Stock'), {\r\n             'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n         }),\r\n         (_('Status and Features'), {\r\n-            'fields': ('status', 'bestseller', 'recommended', 'star_product')\r\n+            'fields': ('status' , 'bestseller', 'recommended','star_product')\r\n         }),\r\n         (_('Timestamps'), {\r\n             'fields': ('created_at', 'updated_at'),\r\n             'classes': ('collapse',)\r\n         }),\r\n     )\r\n     list_per_page = 20\r\n \r\n-    def save_model(self, request, obj, form, change):\r\n-        if change:  # Si c'est une modification\r\n-            old_obj = self.model.objects.get(pk=obj.pk)\r\n-            stock_diff = obj.stock_quantity - old_obj.stock_quantity\r\n-            \r\n-            if stock_diff != 0:\r\n-                # Créer un mouvement de stock\r\n-                StockMovement.objects.create(\r\n-                    product=obj,\r\n-                    quantity=abs(stock_diff),\r\n-                    movement_type='IN' if stock_diff > 0 else 'OUT',\r\n-                    reason=_(\"Modification manuelle du stock\"),\r\n-                    reference=f\"ADMIN-{request.user.username}\"\r\n-                )\r\n-        \r\n-        super().save_model(request, obj, form, change)\r\n-\r\n-    def get_readonly_fields(self, request, obj=None):\r\n-        readonly_fields = list(super().get_readonly_fields(request, obj))\r\n-        if obj:  # Si c'est une modification\r\n-            readonly_fields.append('stock_quantity')  # Rendre stock_quantity en lecture seule\r\n-        return readonly_fields\r\n-\r\n-    actions = ['add_stock', 'remove_stock']\r\n-\r\n-    def add_stock(self, request, queryset):\r\n-        # Action pour ajouter du stock\r\n-        for product in queryset:\r\n-            StockMovement.objects.create(\r\n-                product=product,\r\n-                quantity=10,  # Quantité par défaut\r\n-                movement_type='IN',\r\n-                reason=_(\"Ajout de stock via action admin\"),\r\n-                reference=f\"ADMIN-{request.user.username}\"\r\n-            )\r\n-    add_stock.short_description = _(\"Ajouter 10 unités au stock\")\r\n-\r\n-    def remove_stock(self, request, queryset):\r\n-        # Action pour retirer du stock\r\n-        for product in queryset:\r\n-            if product.stock_quantity >= 10:\r\n-                StockMovement.objects.create(\r\n-                    product=product,\r\n-                    quantity=10,  # Quantité par défaut\r\n-                    movement_type='OUT',\r\n-                    reason=_(\"Retrait de stock via action admin\"),\r\n-                    reference=f\"ADMIN-{request.user.username}\"\r\n-                )\r\n-    remove_stock.short_description = _(\"Retirer 10 unités du stock\")\r\n-\r\n # Admin configuration for the ShoppingCart model\r\n @admin.register(ShoppingCart)\r\n class ShoppingCartAdmin(admin.ModelAdmin):\r\n     # Display cart status and ownership\r\n@@ -166,96 +113,34 @@\n     list_per_page = 20\r\n \r\n  \r\n \r\n- \r\n-\r\n @admin.register(CartItem)\r\n class CartItemAdmin(admin.ModelAdmin):\r\n+    # Show item details in the list view, including total_price\r\n     list_display = ('cart', 'product', 'quantity', 'total_price', 'created_at')\r\n+\r\n+    # Enable search by username and product name\r\n     search_fields = ('cart__user__username', 'product__name')\r\n+\r\n+    # Filter by cart status\r\n     list_filter = ('cart__is_active',)\r\n+\r\n+    # Limit the number of items per page in the list view\r\n     list_per_page = 20\r\n-    \r\n+\r\n+    # You can call `calculate_total_price` when saving the object\r\n     def save_model(self, request, obj, form, change):\r\n-        \"\"\"Gestion de la sauvegarde avec vérification du stock\"\"\"\r\n-        try:\r\n-            if not change:  # Nouvel article\r\n-                # Vérifier le stock disponible\r\n-                if obj.product.stock_quantity < obj.quantity:\r\n-                    raise ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n-                \r\n-                # Calculer le prix total\r\n-                obj.total_price = obj.product.price * obj.quantity\r\n-                \r\n-                # Sauvegarder l'article\r\n-                super().save_model(request, obj, form, change)\r\n-                \r\n-                # Créer le mouvement de stock\r\n-                StockMovement.objects.create(\r\n-                    product=obj.product,\r\n-                    quantity=obj.quantity,\r\n-                    movement_type='OUT',\r\n-                    reason=_(\"Ajout au panier via admin\"),\r\n-                    reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n-                )\r\n-            \r\n-            else:  # Modification d'un article existant\r\n-                original_obj = CartItem.objects.get(pk=obj.pk)\r\n-                quantity_diff = obj.quantity - original_obj.quantity\r\n-                \r\n-                if quantity_diff > 0:  # Augmentation de la quantité\r\n-                    if obj.product.stock_quantity < quantity_diff:\r\n-                        raise ValidationError(_(\"Stock insuffisant pour ce produit\"))\r\n-                \r\n-                # Calculer le nouveau prix total\r\n-                obj.total_price = obj.product.price * obj.quantity\r\n-                \r\n-                # Sauvegarder l'article\r\n-                super().save_model(request, obj, form, change)\r\n-                \r\n-                if quantity_diff != 0:  # Créer un mouvement de stock si la quantité a changé\r\n-                    StockMovement.objects.create(\r\n-                        product=obj.product,\r\n-                        quantity=abs(quantity_diff),\r\n-                        movement_type='OUT' if quantity_diff > 0 else 'IN',\r\n-                        reason=_(\"Modification quantité panier via admin\"),\r\n-                        reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n-                    )\r\n+        # Calculate the total price of the cart item before saving\r\n+        obj.calculate_total_price()\r\n         \r\n-        except ValidationError as e:\r\n-            self.message_user(request, str(e), level='ERROR')\r\n-            raise\r\n-    \r\n-    def delete_model(self, request, obj):\r\n-        \"\"\"Gestion de la suppression avec remise en stock\"\"\"\r\n-        # Créer un mouvement de stock pour la remise en stock\r\n-        StockMovement.objects.create(\r\n-            product=obj.product,\r\n-            quantity=obj.quantity,\r\n-            movement_type='IN',\r\n-            reason=_(\"Suppression du panier via admin\"),\r\n-            reference=f\"ADMIN-CART-{obj.cart.id}\"\r\n-        )\r\n-        super().delete_model(request, obj)\r\n+       \r\n+        \r\n+        # Proceed with saving the object\r\n+        super().save_model(request, obj, form, change)\r\n+ \r\n+ \r\n \r\n-    def get_form(self, request, obj=None, **kwargs):\r\n-        form = super().get_form(request, obj, **kwargs)\r\n-        if not obj:  # Si c'est un nouvel article\r\n-            # Définir les champs obligatoires\r\n-            form.base_fields['cart'].required = True\r\n-            form.base_fields['product'].required = True\r\n-            form.base_fields['quantity'].required = True\r\n-            # Ajouter une aide pour le champ quantité\r\n-            form.base_fields['quantity'].help_text = _(\"La quantité doit être inférieure ou égale au stock disponible\")\r\n-        return form\r\n-\r\n-    def formfield_for_foreignkey(self, db_field, request, **kwargs):\r\n-        if db_field.name == \"cart\":\r\n-            # Limiter les choix aux paniers actifs\r\n-            kwargs[\"queryset\"] = ShoppingCart.objects.filter(is_active=True)\r\n-        return super().formfield_for_foreignkey(db_field, request, **kwargs)\r\n-\r\n # Admin configuration for the Review model\r\n @admin.register(Review)\r\n class ReviewAdmin(admin.ModelAdmin):\r\n     # Show review information in the list view\r\n@@ -326,24 +211,5 @@\n @admin.register(OrderLine)\r\n     \r\n class OrderLineAdmin(admin.ModelAdmin):\r\n     # Champs à afficher dans la liste\r\n-    list_display = ('order', 'product', 'quantity', 'unit_price', 'line_total')\r\n-    \r\n-@admin.register(StockMovement)\r\n-class StockMovementAdmin(admin.ModelAdmin):\r\n-    list_display = ('date', 'product', 'movement_type', 'quantity', 'reason', 'reference')\r\n-    list_filter = ('movement_type', 'date', 'product__category')\r\n-    search_fields = ('product__name', 'reason', 'reference')\r\n-    date_hierarchy = 'date'\r\n-    readonly_fields = ('date',)\r\n-    ordering = ('-date',)\r\n-    list_per_page = 20\r\n-\r\n-    fieldsets = (\r\n-        (_('Mouvement Information'), {\r\n-            'fields': ('product', 'movement_type', 'quantity')\r\n-        }),\r\n-        (_('Détails'), {\r\n-            'fields': ('reason', 'reference', 'date')\r\n-        }),\r\n-    )\n\\ No newline at end of file\n+    list_display = ('order', 'product', 'quantity', 'unit_price', 'line_total')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740137266138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     list_filter = ('is_staff', 'is_active', 'gender' )\r\n     # Organize fields into logical groups\r\n     fieldsets = (\r\n         (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender','type_user','contry','city')}),\r\n         # (_('Location'), {'fields': ('country', 'city')}),\r\n         (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n     )\r\n     list_per_page = 20\r\n"
                },
                {
                    "date": 1740137281417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     list_filter = ('is_staff', 'is_active', 'gender' )\r\n     # Organize fields into logical groups\r\n     fieldsets = (\r\n         (None, {'fields': ('username', 'password')}),\r\n-        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender','type_user','contry','city')}),\r\n+        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender','type_user','country','city')}),\r\n         # (_('Location'), {'fields': ('country', 'city')}),\r\n         (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n     )\r\n     list_per_page = 20\r\n"
                }
            ],
            "date": 1738924690686,
            "name": "Commit-0",
            "content": "from django.contrib import admin\r\nfrom django.utils.translation import gettext_lazy as _\r\nfrom .models import (\r\n    Country, City, CustomUser, Category, Product, \r\n    ShoppingCart, CartItem, Order, OrderItem, Review\r\n)\r\n\r\n@admin.register(Country)\r\nclass CountryAdmin(admin.ModelAdmin):\r\n    list_display = ('name', 'code', 'created_at')\r\n    search_fields = ('name', 'code')\r\n    ordering = ('name',)\r\n    list_per_page = 20\r\n\r\n@admin.register(City)\r\nclass CityAdmin(admin.ModelAdmin):\r\n    list_display = ('name', 'country', 'created_at')\r\n    search_fields = ('name', 'country__name')\r\n    list_filter = ('country',)\r\n    ordering = ('country', 'name')\r\n    list_per_page = 20\r\n\r\n@admin.register(CustomUser)\r\nclass CustomUserAdmin(admin.ModelAdmin):\r\n    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'country', 'city')\r\n    search_fields = ('username', 'email', 'first_name', 'last_name')\r\n    list_filter = ('is_staff', 'is_active', 'gender', 'country')\r\n    fieldsets = (\r\n        (None, {'fields': ('username', 'password')}),\r\n        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'phone', 'gender')}),\r\n        (_('Location'), {'fields': ('country', 'city')}),\r\n        (_('Permissions'), {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),\r\n    )\r\n    list_per_page = 20\r\n\r\n@admin.register(Category)\r\nclass CategoryAdmin(admin.ModelAdmin):\r\n    list_display = ('name', 'parent', 'created_at')\r\n    search_fields = ('name', 'description')\r\n    list_filter = ('parent',)\r\n    ordering = ('name',)\r\n    list_per_page = 20\r\n\r\n@admin.register(Product)\r\nclass ProductAdmin(admin.ModelAdmin):\r\n    list_display = ('name', 'category', 'price', 'stock_quantity', 'status', 'favorite', 'bestseller', 'recommended')\r\n    search_fields = ('name', 'description')\r\n    list_filter = ('status', 'category', 'favorite', 'bestseller', 'recommended')\r\n    ordering = ('name',)\r\n    list_editable = ('price', 'stock_quantity', 'status')\r\n    readonly_fields = ('created_at', 'updated_at')\r\n    fieldsets = (\r\n        (_('Basic Information'), {\r\n            'fields': ('name', 'description', 'category', 'image')\r\n        }),\r\n        (_('Pricing and Stock'), {\r\n            'fields': ('price', 'discount_percentage', 'stock_quantity')\r\n        }),\r\n        (_('Status and Features'), {\r\n            'fields': ('status', 'favorite', 'bestseller', 'recommended')\r\n        }),\r\n        (_('Timestamps'), {\r\n            'fields': ('created_at', 'updated_at'),\r\n            'classes': ('collapse',)\r\n        }),\r\n    )\r\n    list_per_page = 20\r\n\r\n@admin.register(ShoppingCart)\r\nclass ShoppingCartAdmin(admin.ModelAdmin):\r\n    list_display = ('user', 'is_active', 'created_at')\r\n    list_filter = ('is_active',)\r\n    search_fields = ('user__username',)\r\n    list_per_page = 20\r\n\r\n@admin.register(CartItem)\r\nclass CartItemAdmin(admin.ModelAdmin):\r\n    list_display = ('cart', 'product', 'quantity', 'created_at')\r\n    search_fields = ('cart__user__username', 'product__name')\r\n    list_filter = ('cart__is_active',)\r\n    list_per_page = 20\r\n\r\n@admin.register(Order)\r\nclass OrderAdmin(admin.ModelAdmin):\r\n    list_display = ('user', 'status', 'total_price', 'created_at')\r\n    search_fields = ('user__username', 'shipping_address')\r\n    list_filter = ('status',)\r\n    readonly_fields = ('created_at', 'updated_at')\r\n    fieldsets = (\r\n        (_('Order Information'), {\r\n            'fields': ('user', 'status', 'total_price')\r\n        }),\r\n        (_('Shipping Details'), {\r\n            'fields': ('shipping_address',)\r\n        }),\r\n        (_('Timestamps'), {\r\n            'fields': ('created_at', 'updated_at'),\r\n            'classes': ('collapse',)\r\n        }),\r\n    )\r\n    list_per_page = 20\r\n\r\n@admin.register(OrderItem)\r\nclass OrderItemAdmin(admin.ModelAdmin):\r\n    list_display = ('order', 'product', 'quantity', 'price_at_purchase')\r\n    search_fields = ('order__user__username', 'product__name')\r\n    list_filter = ('order__status',)\r\n    list_per_page = 20\r\n\r\n@admin.register(Review)\r\nclass ReviewAdmin(admin.ModelAdmin):\r\n    list_display = ('product', 'user', 'rating', 'recommended', 'review_date')\r\n    search_fields = ('product__name', 'user__username', 'comment')\r\n    list_filter = ('rating', 'recommended', 'review_date')\r\n    readonly_fields = ('review_date',)\r\n    ordering = ('-review_date',)\r\n    list_per_page = 20"
        }
    ]
}