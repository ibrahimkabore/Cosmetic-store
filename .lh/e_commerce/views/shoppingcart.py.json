{
    "sourceFile": "e_commerce/views/shoppingcart.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1739307266102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739307334919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n from django.contrib.auth.decorators import login_required\r\n \r\n \r\n @login_required\r\n-def favoris (request):\r\n+def shoppingcart (request):\r\n    \r\n     \r\n\\ No newline at end of file\n-    return render(request, 'home/favoris.html')\n+    return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739393532742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,106 @@\n from django.shortcuts import get_object_or_404, render\r\n-from e_commerce.models import Product\r\n+from e_commerce.models import *\r\n from django.utils.decorators import method_decorator\r\n from django.contrib.auth.decorators import login_required\r\n \r\n \r\n+\r\n+from django.shortcuts import get_object_or_404\r\n+from django.db import transaction\r\n+from django.core.exceptions import ValidationError\r\n+from decimal import Decimal\r\n+\r\n+class CartManager:\r\n+    def __init__(self, user):\r\n+        self.user = user\r\n+        self.cart = self._get_or_create_cart()\r\n+    \r\n+    def _get_or_create_cart(self):\r\n+        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n+        cart, created = ShoppingCart.objects.get_or_create(\r\n+            user=self.user,\r\n+            is_active=True\r\n+        )\r\n+        return cart\r\n+    \r\n+    @transaction.atomic\r\n+    def add_to_cart(self, product_id, quantity=1):\r\n+        \"\"\"\r\n+        Add a product to the cart or update its quantity if it already exists.\r\n+        \r\n+        Args:\r\n+            product_id: ID of the product to add\r\n+            quantity: Quantity to add (default=1)\r\n+            \r\n+        Returns:\r\n+            dict: Status of the operation and relevant messages\r\n+        \"\"\"\r\n+        try:\r\n+            # Validate inputs\r\n+            if quantity < 1:\r\n+                raise ValidationError(\"Quantity must be at least 1\")\r\n+                \r\n+            # Get the product\r\n+            product = get_object_or_404(Product, id=product_id)\r\n+            \r\n+            # Check if product is available\r\n+            if product.status != 'available':\r\n+                raise ValidationError(\"Product is not available\")\r\n+                \r\n+            # Check stock availability\r\n+            if product.stock_quantity < quantity:\r\n+                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n+            \r\n+            # Check if product already in cart\r\n+            cart_item, created = CartItem.objects.get_or_create(\r\n+                cart=self.cart,\r\n+                product=product,\r\n+                defaults={'quantity': 0}\r\n+            )\r\n+            \r\n+            # Update quantity\r\n+            new_quantity = cart_item.quantity + quantity\r\n+            \r\n+            # Verify total quantity doesn't exceed stock\r\n+            if new_quantity > product.stock_quantity:\r\n+                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n+            \r\n+            cart_item.quantity = new_quantity\r\n+            cart_item.save()\r\n+            \r\n+            return {\r\n+                'status': 'success',\r\n+                'message': f\"Added {quantity} x {product.name} to cart\",\r\n+                'cart_item': cart_item\r\n+            }\r\n+            \r\n+        except ValidationError as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': str(e)\r\n+            }\r\n+        except Exception as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': \"An unexpected error occurred\"\r\n+            }\r\n+    \r\n+    def get_cart_total(self):\r\n+        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n+        total = Decimal('0.0')\r\n+        for item in self.cart.cart_items.all():\r\n+            price = item.product.price\r\n+            if item.product.discount_percentage:\r\n+                discount = (item.product.discount_percentage / 100) * price\r\n+                price = price - discount\r\n+            total += price * item.quantity\r\n+        return total.quantize(Decimal('0.01'))\r\n+    \r\n+    def get_cart_items(self):\r\n+        \"\"\"Get all items in the cart with their details.\"\"\"\r\n+        return self.cart.cart_items.all().select_related('product')\r\n+\r\n @login_required\r\n def shoppingcart (request):\r\n    \r\n     \r\n"
                },
                {
                    "date": 1739393556935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,46 @@\n     def get_cart_items(self):\r\n         \"\"\"Get all items in the cart with their details.\"\"\"\r\n         return self.cart.cart_items.all().select_related('product')\r\n \r\n+\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.contrib.auth.decorators import login_required\r\n+\r\n @login_required\r\n+@require_http_methods([\"POST\"])\r\n+def add_to_cart(request):\r\n+    try:\r\n+        product_id = request.POST.get('product_id')\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+        cart_manager = CartManager(request.user)\r\n+        result = cart_manager.add_to_cart(product_id, quantity)\r\n+        \r\n+        if result['status'] == 'success':\r\n+            return JsonResponse({\r\n+                'status': 'success',\r\n+                'message': result['message'],\r\n+                'cart_total': str(cart_manager.get_cart_total())\r\n+            })\r\n+        else:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': result['message']\r\n+            }, status=400)\r\n+            \r\n+    except ValueError:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Invalid quantity provided'\r\n+        }, status=400)\r\n+    except Exception as e:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'An unexpected error occurred'\r\n+        }, status=500)\r\n+@login_required\r\n def shoppingcart (request):\r\n    \r\n     \r\n     return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739394020680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,108 @@\n         return JsonResponse({\r\n             'status': 'error',\r\n             'message': 'An unexpected error occurred'\r\n         }, status=500)\r\n+        \r\n+# views.py\r\n+from django.shortcuts import render, redirect\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.http import JsonResponse\r\n+from decimal import Decimal\r\n+ \r\n+\r\n @login_required\r\n+def cart_view(request):\r\n+    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n+    try:\r\n+        # Get active cart for user\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart_items = cart.cart_items.select_related('product').all()\r\n+        \r\n+        # Calculate subtotal\r\n+        subtotal = sum(\r\n+            item.quantity * (\r\n+                item.product.price * (1 - item.product.discount_percentage/100)\r\n+                if item.product.discount_percentage\r\n+                else item.product.price\r\n+            )\r\n+            for item in cart_items\r\n+        )\r\n+        \r\n+        context = {\r\n+            'cart_items': cart_items,\r\n+            'subtotal': subtotal,\r\n+            'shipping_cost': Decimal('0.00'),  # Free shipping by default\r\n+            'total': subtotal  # Will be updated if shipping is added\r\n+        }\r\n+        \r\n+        return render(request, 'cart/cart.html', context)\r\n+        \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # If no active cart exists, show empty cart\r\n+        context = {\r\n+            'cart_items': [],\r\n+            'subtotal': Decimal('0.00'),\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': Decimal('0.00')\r\n+        }\r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+@login_required\r\n+def update_cart_item(request):\r\n+    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n+    if request.method == 'POST':\r\n+        item_id = request.POST.get('item_id')\r\n+        quantity = int(request.POST.get('quantity', 0))\r\n+        \r\n+        try:\r\n+            cart_item = CartItem.objects.get(\r\n+                id=item_id,\r\n+                cart__user=request.user,\r\n+                cart__is_active=True\r\n+            )\r\n+            \r\n+            if quantity > 0:\r\n+                if quantity <= cart_item.product.stock_quantity:\r\n+                    cart_item.quantity = quantity\r\n+                    cart_item.save()\r\n+                    new_total = cart_item.quantity * cart_item.product.price\r\n+                    return JsonResponse({\r\n+                        'status': 'success',\r\n+                        'new_quantity': quantity,\r\n+                        'new_total': str(new_total)\r\n+                    })\r\n+                else:\r\n+                    return JsonResponse({\r\n+                        'status': 'error',\r\n+                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n+                    })\r\n+            else:\r\n+                cart_item.delete()\r\n+                return JsonResponse({\r\n+                    'status': 'removed'\r\n+                })\r\n+                \r\n+        except CartItem.DoesNotExist:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': 'Item not found'\r\n+            })\r\n+            \r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+\r\n+@login_required\r\n+def clear_cart(request):\r\n+    \"\"\"View to clear all items from cart\"\"\"\r\n+    if request.method == 'POST':\r\n+        try:\r\n+            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+            cart.cart_items.all().delete()\r\n+            return JsonResponse({'status': 'success'})\r\n+        except ShoppingCart.DoesNotExist:\r\n+            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+@login_required\r\n def shoppingcart (request):\r\n    \r\n     \r\n     return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739394605662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,45 +100,79 @@\n         \"\"\"Get all items in the cart with their details.\"\"\"\r\n         return self.cart.cart_items.all().select_related('product')\r\n \r\n \r\n+# views.py\r\n from django.http import JsonResponse\r\n+from django.contrib.auth.decorators import login_required\r\n from django.views.decorators.http import require_http_methods\r\n-from django.contrib.auth.decorators import login_required\r\n+from .models import Product, ShoppingCart, CartItem\r\n \r\n @login_required\r\n @require_http_methods([\"POST\"])\r\n def add_to_cart(request):\r\n     try:\r\n         product_id = request.POST.get('product_id')\r\n         quantity = int(request.POST.get('quantity', 1))\r\n         \r\n-        cart_manager = CartManager(request.user)\r\n-        result = cart_manager.add_to_cart(product_id, quantity)\r\n+        # Vérifier si le produit existe\r\n+        product = Product.objects.get(id=product_id)\r\n         \r\n-        if result['status'] == 'success':\r\n+        # Vérifier le stock\r\n+        if product.stock_quantity < quantity:\r\n             return JsonResponse({\r\n-                'status': 'success',\r\n-                'message': result['message'],\r\n-                'cart_total': str(cart_manager.get_cart_total())\r\n+                'status': 'error',\r\n+                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n             })\r\n-        else:\r\n+            \r\n+        # Récupérer ou créer le panier\r\n+        cart, _ = ShoppingCart.objects.get_or_create(\r\n+            user=request.user,\r\n+            is_active=True\r\n+        )\r\n+        \r\n+        # Ajouter ou mettre à jour l'article dans le panier\r\n+        cart_item, created = CartItem.objects.get_or_create(\r\n+            cart=cart,\r\n+            product=product,\r\n+            defaults={'quantity': 0}\r\n+        )\r\n+        \r\n+        # Mettre à jour la quantité\r\n+        new_quantity = cart_item.quantity + quantity\r\n+        if new_quantity > product.stock_quantity:\r\n             return JsonResponse({\r\n                 'status': 'error',\r\n-                'message': result['message']\r\n-            }, status=400)\r\n+                'message': f'La quantité totale dépasse le stock disponible'\r\n+            })\r\n             \r\n+        cart_item.quantity = new_quantity\r\n+        cart_item.save()\r\n+        \r\n+        # Compter le nombre total d'articles dans le panier\r\n+        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'message': f'{product.name} a été ajouté au panier',\r\n+            'cart_count': cart_count\r\n+        })\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Produit non trouvé'\r\n+        })\r\n     except ValueError:\r\n         return JsonResponse({\r\n             'status': 'error',\r\n-            'message': 'Invalid quantity provided'\r\n-        }, status=400)\r\n+            'message': 'Quantité invalide'\r\n+        })\r\n     except Exception as e:\r\n         return JsonResponse({\r\n             'status': 'error',\r\n-            'message': 'An unexpected error occurred'\r\n-        }, status=500)\r\n-        \r\n+            'message': 'Une erreur est survenue'\r\n+        })\r\n # views.py\r\n from django.shortcuts import render, redirect\r\n from django.contrib.auth.decorators import login_required\r\n from django.http import JsonResponse\r\n"
                },
                {
                    "date": 1739394801520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,9 @@\n # views.py\r\n from django.http import JsonResponse\r\n from django.contrib.auth.decorators import login_required\r\n from django.views.decorators.http import require_http_methods\r\n-from .models import Product, ShoppingCart, CartItem\r\n-\r\n+ \r\n @login_required\r\n @require_http_methods([\"POST\"])\r\n def add_to_cart(request):\r\n     try:\r\n"
                },
                {
                    "date": 1739394957169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n             'subtotal': Decimal('0.00'),\r\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n \r\n @login_required\r\n def update_cart_item(request):\r\n     \"\"\"AJAX view to update cart item quantity\"\"\"\r\n"
                },
                {
                    "date": 1739395006414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n             'shipping_cost': Decimal('0.00'),  # Free shipping by default\r\n             'total': subtotal  # Will be updated if shipping is added\r\n         }\r\n         \r\n-        return render(request, 'cart/cart.html', context)\r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n         \r\n     except ShoppingCart.DoesNotExist:\r\n         # If no active cart exists, show empty cart\r\n         context = {\r\n@@ -268,9 +268,5 @@\n             return JsonResponse({'status': 'success'})\r\n         except ShoppingCart.DoesNotExist:\r\n             return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n     return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n-@login_required\r\n-def shoppingcart (request):\r\n-   \r\n-    \r\n-    return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739395585269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+from django.shortcuts import get_object_or_404, render\r\n+from e_commerce.models import *\r\n+from django.utils.decorators import method_decorator\r\n+from django.contrib.auth.decorators import login_required\r\n+\r\n+\r\n+\r\n+from django.shortcuts import get_object_or_404\r\n+from django.db import transaction\r\n+from django.core.exceptions import ValidationError\r\n+from decimal import Decimal\r\n+\r\n+class CartManager:\r\n+    def __init__(self, user):\r\n+        self.user = user\r\n+        self.cart = self._get_or_create_cart()\r\n+    \r\n+    def _get_or_create_cart(self):\r\n+        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n+        cart, created = ShoppingCart.objects.get_or_create(\r\n+            user=self.user,\r\n+            is_active=True\r\n+        )\r\n+        return cart\r\n+    \r\n+    @transaction.atomic\r\n+    def add_to_cart(self, product_id, quantity=1):\r\n+        \"\"\"\r\n+        Add a product to the cart or update its quantity if it already exists.\r\n+        \r\n+        Args:\r\n+            product_id: ID of the product to add\r\n+            quantity: Quantity to add (default=1)\r\n+            \r\n+        Returns:\r\n+            dict: Status of the operation and relevant messages\r\n+        \"\"\"\r\n+        try:\r\n+            # Validate inputs\r\n+            if quantity < 1:\r\n+                raise ValidationError(\"Quantity must be at least 1\")\r\n+                \r\n+            # Get the product\r\n+            product = get_object_or_404(Product, id=product_id)\r\n+            \r\n+            # Check if product is available\r\n+            if product.status != 'available':\r\n+                raise ValidationError(\"Product is not available\")\r\n+                \r\n+            # Check stock availability\r\n+            if product.stock_quantity < quantity:\r\n+                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n+            \r\n+            # Check if product already in cart\r\n+            cart_item, created = CartItem.objects.get_or_create(\r\n+                cart=self.cart,\r\n+                product=product,\r\n+                defaults={'quantity': 0}\r\n+            )\r\n+            \r\n+            # Update quantity\r\n+            new_quantity = cart_item.quantity + quantity\r\n+            \r\n+            # Verify total quantity doesn't exceed stock\r\n+            if new_quantity > product.stock_quantity:\r\n+                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n+            \r\n+            cart_item.quantity = new_quantity\r\n+            cart_item.save()\r\n+            \r\n+            return {\r\n+                'status': 'success',\r\n+                'message': f\"Added {quantity} x {product.name} to cart\",\r\n+                'cart_item': cart_item\r\n+            }\r\n+            \r\n+        except ValidationError as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': str(e)\r\n+            }\r\n+        except Exception as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': \"An unexpected error occurred\"\r\n+            }\r\n+    \r\n+    def get_cart_total(self):\r\n+        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n+        total = Decimal('0.0')\r\n+        for item in self.cart.cart_items.all():\r\n+            price = item.product.price\r\n+            if item.product.discount_percentage:\r\n+                discount = (item.product.discount_percentage / 100) * price\r\n+                price = price - discount\r\n+            total += price * item.quantity\r\n+        return total.quantize(Decimal('0.01'))\r\n+    \r\n+    def get_cart_items(self):\r\n+        \"\"\"Get all items in the cart with their details.\"\"\"\r\n+        return self.cart.cart_items.all().select_related('product')\r\n+\r\n+\r\n+# views.py\r\n+from django.http import JsonResponse\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.views.decorators.http import require_http_methods\r\n+ \r\n+@login_required\r\n+@require_http_methods([\"POST\"])\r\n+def add_to_cart(request):\r\n+    try:\r\n+        product_id = request.POST.get('product_id')\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+        # Vérifier si le produit existe\r\n+        product = Product.objects.get(id=product_id)\r\n+        \r\n+        # Vérifier le stock\r\n+        if product.stock_quantity < quantity:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n+            })\r\n+            \r\n+        # Récupérer ou créer le panier\r\n+        cart, _ = ShoppingCart.objects.get_or_create(\r\n+            user=request.user,\r\n+            is_active=True\r\n+        )\r\n+        \r\n+        # Ajouter ou mettre à jour l'article dans le panier\r\n+        cart_item, created = CartItem.objects.get_or_create(\r\n+            cart=cart,\r\n+            product=product,\r\n+            defaults={'quantity': 0}\r\n+        )\r\n+        \r\n+        # Mettre à jour la quantité\r\n+        new_quantity = cart_item.quantity + quantity\r\n+        if new_quantity > product.stock_quantity:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': f'La quantité totale dépasse le stock disponible'\r\n+            })\r\n+            \r\n+        cart_item.quantity = new_quantity\r\n+        cart_item.save()\r\n+        \r\n+        # Compter le nombre total d'articles dans le panier\r\n+        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'message': f'{product.name} a été ajouté au panier',\r\n+            'cart_count': cart_count\r\n+        })\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Produit non trouvé'\r\n+        })\r\n+    except ValueError:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Quantité invalide'\r\n+        })\r\n+    except Exception as e:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Une erreur est survenue'\r\n+        })\r\n+# views.py\r\n+from django.shortcuts import render, redirect\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.http import JsonResponse\r\n+from decimal import Decimal\r\n+ \r\n+\r\n+@login_required\r\n+def cart_view(request):\r\n+    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n+    try:\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart_items = cart.cart_items.select_related('product').all()\r\n+        \r\n+        # Calculer les totaux pour chaque article\r\n+        for item in cart_items:\r\n+            item.total = item.product.price * item.quantity\r\n+        \r\n+        # Calculer le sous-total\r\n+        subtotal = sum(item.total for item in cart_items)\r\n+        \r\n+        context = {\r\n+            'cart_items': cart_items,\r\n+            'subtotal': subtotal,\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n+        }\r\n+        \r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n+        \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # If no active cart exists, show empty cart\r\n+        context = {\r\n+            'cart_items': [],\r\n+            'subtotal': Decimal('0.00'),\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': Decimal('0.00')\r\n+        }\r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+@login_required\r\n+def update_cart_item(request):\r\n+    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n+    if request.method == 'POST':\r\n+        item_id = request.POST.get('item_id')\r\n+        quantity = int(request.POST.get('quantity', 0))\r\n+        \r\n+        try:\r\n+            cart_item = CartItem.objects.get(\r\n+                id=item_id,\r\n+                cart__user=request.user,\r\n+                cart__is_active=True\r\n+            )\r\n+            \r\n+            if quantity > 0:\r\n+                if quantity <= cart_item.product.stock_quantity:\r\n+                    cart_item.quantity = quantity\r\n+                    cart_item.save()\r\n+                    new_total = cart_item.quantity * cart_item.product.price\r\n+                    return JsonResponse({\r\n+                        'status': 'success',\r\n+                        'new_quantity': quantity,\r\n+                        'new_total': str(new_total)\r\n+                    })\r\n+                else:\r\n+                    return JsonResponse({\r\n+                        'status': 'error',\r\n+                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n+                    })\r\n+            else:\r\n+                cart_item.delete()\r\n+                return JsonResponse({\r\n+                    'status': 'removed'\r\n+                })\r\n+                \r\n+        except CartItem.DoesNotExist:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': 'Item not found'\r\n+            })\r\n+            \r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+\r\n+@login_required\r\n+def clear_cart(request):\r\n+    \"\"\"View to clear all items from cart\"\"\"\r\n+    if request.method == 'POST':\r\n+        try:\r\n+            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+            cart.cart_items.all().delete()\r\n+            return JsonResponse({'status': 'success'})\r\n+        except ShoppingCart.DoesNotExist:\r\n+            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739396999280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n             return JsonResponse({\r\n                 'status': 'error',\r\n                 'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n             })\r\n-            \r\n+        \r\n         # Récupérer ou créer le panier\r\n         cart, _ = ShoppingCart.objects.get_or_create(\r\n             user=request.user,\r\n             is_active=True\r\n@@ -142,13 +142,13 @@\n             return JsonResponse({\r\n                 'status': 'error',\r\n                 'message': f'La quantité totale dépasse le stock disponible'\r\n             })\r\n-            \r\n+        \r\n         cart_item.quantity = new_quantity\r\n         cart_item.save()\r\n         \r\n-        # Compter le nombre total d'articles dans le panier\r\n+        # Calculer le nombre total d'articles dans le panier\r\n         cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n         \r\n         return JsonResponse({\r\n             'status': 'success',\r\n@@ -264,277 +264,5 @@\n             return JsonResponse({'status': 'success'})\r\n         except ShoppingCart.DoesNotExist:\r\n             return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n     return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n- \n-from django.shortcuts import get_object_or_404, render\r\n-from e_commerce.models import *\r\n-from django.utils.decorators import method_decorator\r\n-from django.contrib.auth.decorators import login_required\r\n-\r\n-\r\n-\r\n-from django.shortcuts import get_object_or_404\r\n-from django.db import transaction\r\n-from django.core.exceptions import ValidationError\r\n-from decimal import Decimal\r\n-\r\n-class CartManager:\r\n-    def __init__(self, user):\r\n-        self.user = user\r\n-        self.cart = self._get_or_create_cart()\r\n-    \r\n-    def _get_or_create_cart(self):\r\n-        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n-        cart, created = ShoppingCart.objects.get_or_create(\r\n-            user=self.user,\r\n-            is_active=True\r\n-        )\r\n-        return cart\r\n-    \r\n-    @transaction.atomic\r\n-    def add_to_cart(self, product_id, quantity=1):\r\n-        \"\"\"\r\n-        Add a product to the cart or update its quantity if it already exists.\r\n-        \r\n-        Args:\r\n-            product_id: ID of the product to add\r\n-            quantity: Quantity to add (default=1)\r\n-            \r\n-        Returns:\r\n-            dict: Status of the operation and relevant messages\r\n-        \"\"\"\r\n-        try:\r\n-            # Validate inputs\r\n-            if quantity < 1:\r\n-                raise ValidationError(\"Quantity must be at least 1\")\r\n-                \r\n-            # Get the product\r\n-            product = get_object_or_404(Product, id=product_id)\r\n-            \r\n-            # Check if product is available\r\n-            if product.status != 'available':\r\n-                raise ValidationError(\"Product is not available\")\r\n-                \r\n-            # Check stock availability\r\n-            if product.stock_quantity < quantity:\r\n-                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n-            \r\n-            # Check if product already in cart\r\n-            cart_item, created = CartItem.objects.get_or_create(\r\n-                cart=self.cart,\r\n-                product=product,\r\n-                defaults={'quantity': 0}\r\n-            )\r\n-            \r\n-            # Update quantity\r\n-            new_quantity = cart_item.quantity + quantity\r\n-            \r\n-            # Verify total quantity doesn't exceed stock\r\n-            if new_quantity > product.stock_quantity:\r\n-                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n-            \r\n-            cart_item.quantity = new_quantity\r\n-            cart_item.save()\r\n-            \r\n-            return {\r\n-                'status': 'success',\r\n-                'message': f\"Added {quantity} x {product.name} to cart\",\r\n-                'cart_item': cart_item\r\n-            }\r\n-            \r\n-        except ValidationError as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': str(e)\r\n-            }\r\n-        except Exception as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': \"An unexpected error occurred\"\r\n-            }\r\n-    \r\n-    def get_cart_total(self):\r\n-        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n-        total = Decimal('0.0')\r\n-        for item in self.cart.cart_items.all():\r\n-            price = item.product.price\r\n-            if item.product.discount_percentage:\r\n-                discount = (item.product.discount_percentage / 100) * price\r\n-                price = price - discount\r\n-            total += price * item.quantity\r\n-        return total.quantize(Decimal('0.01'))\r\n-    \r\n-    def get_cart_items(self):\r\n-        \"\"\"Get all items in the cart with their details.\"\"\"\r\n-        return self.cart.cart_items.all().select_related('product')\r\n-\r\n-\r\n-# views.py\r\n-from django.http import JsonResponse\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.views.decorators.http import require_http_methods\r\n- \r\n-@login_required\r\n-@require_http_methods([\"POST\"])\r\n-def add_to_cart(request):\r\n-    try:\r\n-        product_id = request.POST.get('product_id')\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-        # Vérifier si le produit existe\r\n-        product = Product.objects.get(id=product_id)\r\n-        \r\n-        # Vérifier le stock\r\n-        if product.stock_quantity < quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n-            })\r\n-            \r\n-        # Récupérer ou créer le panier\r\n-        cart, _ = ShoppingCart.objects.get_or_create(\r\n-            user=request.user,\r\n-            is_active=True\r\n-        )\r\n-        \r\n-        # Ajouter ou mettre à jour l'article dans le panier\r\n-        cart_item, created = CartItem.objects.get_or_create(\r\n-            cart=cart,\r\n-            product=product,\r\n-            defaults={'quantity': 0}\r\n-        )\r\n-        \r\n-        # Mettre à jour la quantité\r\n-        new_quantity = cart_item.quantity + quantity\r\n-        if new_quantity > product.stock_quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'La quantité totale dépasse le stock disponible'\r\n-            })\r\n-            \r\n-        cart_item.quantity = new_quantity\r\n-        cart_item.save()\r\n-        \r\n-        # Compter le nombre total d'articles dans le panier\r\n-        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'message': f'{product.name} a été ajouté au panier',\r\n-            'cart_count': cart_count\r\n-        })\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Produit non trouvé'\r\n-        })\r\n-    except ValueError:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Quantité invalide'\r\n-        })\r\n-    except Exception as e:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Une erreur est survenue'\r\n-        })\r\n-# views.py\r\n-from django.shortcuts import render, redirect\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.http import JsonResponse\r\n-from decimal import Decimal\r\n- \r\n-\r\n-@login_required\r\n-def cart_view(request):\r\n-    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n-    try:\r\n-        # Get active cart for user\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        cart_items = cart.cart_items.select_related('product').all()\r\n-        \r\n-        # Calculate subtotal\r\n-        subtotal = sum(\r\n-            item.quantity * (\r\n-                item.product.price * (1 - item.product.discount_percentage/100)\r\n-                if item.product.discount_percentage\r\n-                else item.product.price\r\n-            )\r\n-            for item in cart_items\r\n-        )\r\n-        \r\n-        context = {\r\n-            'cart_items': cart_items,\r\n-            'subtotal': subtotal,\r\n-            'shipping_cost': Decimal('0.00'),  # Free shipping by default\r\n-            'total': subtotal  # Will be updated if shipping is added\r\n-        }\r\n-        \r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n-        \r\n-    except ShoppingCart.DoesNotExist:\r\n-        # If no active cart exists, show empty cart\r\n-        context = {\r\n-            'cart_items': [],\r\n-            'subtotal': Decimal('0.00'),\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': Decimal('0.00')\r\n-        }\r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-@login_required\r\n-def update_cart_item(request):\r\n-    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n-    if request.method == 'POST':\r\n-        item_id = request.POST.get('item_id')\r\n-        quantity = int(request.POST.get('quantity', 0))\r\n-        \r\n-        try:\r\n-            cart_item = CartItem.objects.get(\r\n-                id=item_id,\r\n-                cart__user=request.user,\r\n-                cart__is_active=True\r\n-            )\r\n-            \r\n-            if quantity > 0:\r\n-                if quantity <= cart_item.product.stock_quantity:\r\n-                    cart_item.quantity = quantity\r\n-                    cart_item.save()\r\n-                    new_total = cart_item.quantity * cart_item.product.price\r\n-                    return JsonResponse({\r\n-                        'status': 'success',\r\n-                        'new_quantity': quantity,\r\n-                        'new_total': str(new_total)\r\n-                    })\r\n-                else:\r\n-                    return JsonResponse({\r\n-                        'status': 'error',\r\n-                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n-                    })\r\n-            else:\r\n-                cart_item.delete()\r\n-                return JsonResponse({\r\n-                    'status': 'removed'\r\n-                })\r\n-                \r\n-        except CartItem.DoesNotExist:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': 'Item not found'\r\n-            })\r\n-            \r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n-\r\n-@login_required\r\n-def clear_cart(request):\r\n-    \"\"\"View to clear all items from cart\"\"\"\r\n-    if request.method == 'POST':\r\n-        try:\r\n-            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-            cart.cart_items.all().delete()\r\n-            return JsonResponse({'status': 'success'})\r\n-        except ShoppingCart.DoesNotExist:\r\n-            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739398140631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,178 +8,10 @@\n from django.shortcuts import get_object_or_404\r\n from django.db import transaction\r\n from django.core.exceptions import ValidationError\r\n from decimal import Decimal\r\n-\r\n-class CartManager:\r\n-    def __init__(self, user):\r\n-        self.user = user\r\n-        self.cart = self._get_or_create_cart()\r\n-    \r\n-    def _get_or_create_cart(self):\r\n-        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n-        cart, created = ShoppingCart.objects.get_or_create(\r\n-            user=self.user,\r\n-            is_active=True\r\n-        )\r\n-        return cart\r\n-    \r\n-    @transaction.atomic\r\n-    def add_to_cart(self, product_id, quantity=1):\r\n-        \"\"\"\r\n-        Add a product to the cart or update its quantity if it already exists.\r\n-        \r\n-        Args:\r\n-            product_id: ID of the product to add\r\n-            quantity: Quantity to add (default=1)\r\n-            \r\n-        Returns:\r\n-            dict: Status of the operation and relevant messages\r\n-        \"\"\"\r\n-        try:\r\n-            # Validate inputs\r\n-            if quantity < 1:\r\n-                raise ValidationError(\"Quantity must be at least 1\")\r\n-                \r\n-            # Get the product\r\n-            product = get_object_or_404(Product, id=product_id)\r\n-            \r\n-            # Check if product is available\r\n-            if product.status != 'available':\r\n-                raise ValidationError(\"Product is not available\")\r\n-                \r\n-            # Check stock availability\r\n-            if product.stock_quantity < quantity:\r\n-                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n-            \r\n-            # Check if product already in cart\r\n-            cart_item, created = CartItem.objects.get_or_create(\r\n-                cart=self.cart,\r\n-                product=product,\r\n-                defaults={'quantity': 0}\r\n-            )\r\n-            \r\n-            # Update quantity\r\n-            new_quantity = cart_item.quantity + quantity\r\n-            \r\n-            # Verify total quantity doesn't exceed stock\r\n-            if new_quantity > product.stock_quantity:\r\n-                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n-            \r\n-            cart_item.quantity = new_quantity\r\n-            cart_item.save()\r\n-            \r\n-            return {\r\n-                'status': 'success',\r\n-                'message': f\"Added {quantity} x {product.name} to cart\",\r\n-                'cart_item': cart_item\r\n-            }\r\n-            \r\n-        except ValidationError as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': str(e)\r\n-            }\r\n-        except Exception as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': \"An unexpected error occurred\"\r\n-            }\r\n-    \r\n-    def get_cart_total(self):\r\n-        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n-        total = Decimal('0.0')\r\n-        for item in self.cart.cart_items.all():\r\n-            price = item.product.price\r\n-            if item.product.discount_percentage:\r\n-                discount = (item.product.discount_percentage / 100) * price\r\n-                price = price - discount\r\n-            total += price * item.quantity\r\n-        return total.quantize(Decimal('0.01'))\r\n-    \r\n-    def get_cart_items(self):\r\n-        \"\"\"Get all items in the cart with their details.\"\"\"\r\n-        return self.cart.cart_items.all().select_related('product')\r\n-\r\n-\r\n-# views.py\r\n-from django.http import JsonResponse\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.views.decorators.http import require_http_methods\r\n  \r\n @login_required\r\n-@require_http_methods([\"POST\"])\r\n-def add_to_cart(request):\r\n-    try:\r\n-        product_id = request.POST.get('product_id')\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-        # Vérifier si le produit existe\r\n-        product = Product.objects.get(id=product_id)\r\n-        \r\n-        # Vérifier le stock\r\n-        if product.stock_quantity < quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n-            })\r\n-        \r\n-        # Récupérer ou créer le panier\r\n-        cart, _ = ShoppingCart.objects.get_or_create(\r\n-            user=request.user,\r\n-            is_active=True\r\n-        )\r\n-        \r\n-        # Ajouter ou mettre à jour l'article dans le panier\r\n-        cart_item, created = CartItem.objects.get_or_create(\r\n-            cart=cart,\r\n-            product=product,\r\n-            defaults={'quantity': 0}\r\n-        )\r\n-        \r\n-        # Mettre à jour la quantité\r\n-        new_quantity = cart_item.quantity + quantity\r\n-        if new_quantity > product.stock_quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'La quantité totale dépasse le stock disponible'\r\n-            })\r\n-        \r\n-        cart_item.quantity = new_quantity\r\n-        cart_item.save()\r\n-        \r\n-        # Calculer le nombre total d'articles dans le panier\r\n-        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'message': f'{product.name} a été ajouté au panier',\r\n-            'cart_count': cart_count\r\n-        })\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Produit non trouvé'\r\n-        })\r\n-    except ValueError:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Quantité invalide'\r\n-        })\r\n-    except Exception as e:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Une erreur est survenue'\r\n-        })\r\n-# views.py\r\n-from django.shortcuts import render, redirect\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.http import JsonResponse\r\n-from decimal import Decimal\r\n- \r\n-\r\n-@login_required\r\n def cart_view(request):\r\n     \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n@@ -209,60 +41,5 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-@login_required\r\n-def update_cart_item(request):\r\n-    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n-    if request.method == 'POST':\r\n-        item_id = request.POST.get('item_id')\r\n-        quantity = int(request.POST.get('quantity', 0))\r\n-        \r\n-        try:\r\n-            cart_item = CartItem.objects.get(\r\n-                id=item_id,\r\n-                cart__user=request.user,\r\n-                cart__is_active=True\r\n-            )\r\n-            \r\n-            if quantity > 0:\r\n-                if quantity <= cart_item.product.stock_quantity:\r\n-                    cart_item.quantity = quantity\r\n-                    cart_item.save()\r\n-                    new_total = cart_item.quantity * cart_item.product.price\r\n-                    return JsonResponse({\r\n-                        'status': 'success',\r\n-                        'new_quantity': quantity,\r\n-                        'new_total': str(new_total)\r\n-                    })\r\n-                else:\r\n-                    return JsonResponse({\r\n-                        'status': 'error',\r\n-                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n-                    })\r\n-            else:\r\n-                cart_item.delete()\r\n-                return JsonResponse({\r\n-                    'status': 'removed'\r\n-                })\r\n-                \r\n-        except CartItem.DoesNotExist:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': 'Item not found'\r\n-            })\r\n-            \r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n-\r\n-@login_required\r\n-def clear_cart(request):\r\n-    \"\"\"View to clear all items from cart\"\"\"\r\n-    if request.method == 'POST':\r\n-        try:\r\n-            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-            cart.cart_items.all().delete()\r\n-            return JsonResponse({'status': 'success'})\r\n-        except ShoppingCart.DoesNotExist:\r\n-            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739398189537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,7 @@\n from django.shortcuts import get_object_or_404, render\r\n from e_commerce.models import *\r\n-from django.utils.decorators import method_decorator\r\n from django.contrib.auth.decorators import login_required\r\n-\r\n-\r\n-\r\n-from django.shortcuts import get_object_or_404\r\n-from django.db import transaction\r\n-from django.core.exceptions import ValidationError\r\n from decimal import Decimal\r\n  \r\n @login_required\r\n def cart_view(request):\r\n"
                }
            ],
            "date": 1739307266102,
            "name": "Commit-0",
            "content": "from django.shortcuts import get_object_or_404, render\r\nfrom e_commerce.models import Product\r\nfrom django.utils.decorators import method_decorator\r\nfrom django.contrib.auth.decorators import login_required\r\n\r\n\r\n@login_required\r\ndef favoris (request):\r\n   \r\n    \r\n    return render(request, 'home/favoris.html')"
        }
    ]
}