{
    "sourceFile": "e_commerce/views/shoppingcart.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 85,
            "patches": [
                {
                    "date": 1739307266102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739307334919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,8 @@\n from django.contrib.auth.decorators import login_required\r\n \r\n \r\n @login_required\r\n-def favoris (request):\r\n+def shoppingcart (request):\r\n    \r\n     \r\n\\ No newline at end of file\n-    return render(request, 'home/favoris.html')\n+    return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739393532742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,106 @@\n from django.shortcuts import get_object_or_404, render\r\n-from e_commerce.models import Product\r\n+from e_commerce.models import *\r\n from django.utils.decorators import method_decorator\r\n from django.contrib.auth.decorators import login_required\r\n \r\n \r\n+\r\n+from django.shortcuts import get_object_or_404\r\n+from django.db import transaction\r\n+from django.core.exceptions import ValidationError\r\n+from decimal import Decimal\r\n+\r\n+class CartManager:\r\n+    def __init__(self, user):\r\n+        self.user = user\r\n+        self.cart = self._get_or_create_cart()\r\n+    \r\n+    def _get_or_create_cart(self):\r\n+        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n+        cart, created = ShoppingCart.objects.get_or_create(\r\n+            user=self.user,\r\n+            is_active=True\r\n+        )\r\n+        return cart\r\n+    \r\n+    @transaction.atomic\r\n+    def add_to_cart(self, product_id, quantity=1):\r\n+        \"\"\"\r\n+        Add a product to the cart or update its quantity if it already exists.\r\n+        \r\n+        Args:\r\n+            product_id: ID of the product to add\r\n+            quantity: Quantity to add (default=1)\r\n+            \r\n+        Returns:\r\n+            dict: Status of the operation and relevant messages\r\n+        \"\"\"\r\n+        try:\r\n+            # Validate inputs\r\n+            if quantity < 1:\r\n+                raise ValidationError(\"Quantity must be at least 1\")\r\n+                \r\n+            # Get the product\r\n+            product = get_object_or_404(Product, id=product_id)\r\n+            \r\n+            # Check if product is available\r\n+            if product.status != 'available':\r\n+                raise ValidationError(\"Product is not available\")\r\n+                \r\n+            # Check stock availability\r\n+            if product.stock_quantity < quantity:\r\n+                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n+            \r\n+            # Check if product already in cart\r\n+            cart_item, created = CartItem.objects.get_or_create(\r\n+                cart=self.cart,\r\n+                product=product,\r\n+                defaults={'quantity': 0}\r\n+            )\r\n+            \r\n+            # Update quantity\r\n+            new_quantity = cart_item.quantity + quantity\r\n+            \r\n+            # Verify total quantity doesn't exceed stock\r\n+            if new_quantity > product.stock_quantity:\r\n+                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n+            \r\n+            cart_item.quantity = new_quantity\r\n+            cart_item.save()\r\n+            \r\n+            return {\r\n+                'status': 'success',\r\n+                'message': f\"Added {quantity} x {product.name} to cart\",\r\n+                'cart_item': cart_item\r\n+            }\r\n+            \r\n+        except ValidationError as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': str(e)\r\n+            }\r\n+        except Exception as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': \"An unexpected error occurred\"\r\n+            }\r\n+    \r\n+    def get_cart_total(self):\r\n+        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n+        total = Decimal('0.0')\r\n+        for item in self.cart.cart_items.all():\r\n+            price = item.product.price\r\n+            if item.product.discount_percentage:\r\n+                discount = (item.product.discount_percentage / 100) * price\r\n+                price = price - discount\r\n+            total += price * item.quantity\r\n+        return total.quantize(Decimal('0.01'))\r\n+    \r\n+    def get_cart_items(self):\r\n+        \"\"\"Get all items in the cart with their details.\"\"\"\r\n+        return self.cart.cart_items.all().select_related('product')\r\n+\r\n @login_required\r\n def shoppingcart (request):\r\n    \r\n     \r\n"
                },
                {
                    "date": 1739393556935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,46 @@\n     def get_cart_items(self):\r\n         \"\"\"Get all items in the cart with their details.\"\"\"\r\n         return self.cart.cart_items.all().select_related('product')\r\n \r\n+\r\n+from django.http import JsonResponse\r\n+from django.views.decorators.http import require_http_methods\r\n+from django.contrib.auth.decorators import login_required\r\n+\r\n @login_required\r\n+@require_http_methods([\"POST\"])\r\n+def add_to_cart(request):\r\n+    try:\r\n+        product_id = request.POST.get('product_id')\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+        cart_manager = CartManager(request.user)\r\n+        result = cart_manager.add_to_cart(product_id, quantity)\r\n+        \r\n+        if result['status'] == 'success':\r\n+            return JsonResponse({\r\n+                'status': 'success',\r\n+                'message': result['message'],\r\n+                'cart_total': str(cart_manager.get_cart_total())\r\n+            })\r\n+        else:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': result['message']\r\n+            }, status=400)\r\n+            \r\n+    except ValueError:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Invalid quantity provided'\r\n+        }, status=400)\r\n+    except Exception as e:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'An unexpected error occurred'\r\n+        }, status=500)\r\n+@login_required\r\n def shoppingcart (request):\r\n    \r\n     \r\n     return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739394020680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,108 @@\n         return JsonResponse({\r\n             'status': 'error',\r\n             'message': 'An unexpected error occurred'\r\n         }, status=500)\r\n+        \r\n+# views.py\r\n+from django.shortcuts import render, redirect\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.http import JsonResponse\r\n+from decimal import Decimal\r\n+ \r\n+\r\n @login_required\r\n+def cart_view(request):\r\n+    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n+    try:\r\n+        # Get active cart for user\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart_items = cart.cart_items.select_related('product').all()\r\n+        \r\n+        # Calculate subtotal\r\n+        subtotal = sum(\r\n+            item.quantity * (\r\n+                item.product.price * (1 - item.product.discount_percentage/100)\r\n+                if item.product.discount_percentage\r\n+                else item.product.price\r\n+            )\r\n+            for item in cart_items\r\n+        )\r\n+        \r\n+        context = {\r\n+            'cart_items': cart_items,\r\n+            'subtotal': subtotal,\r\n+            'shipping_cost': Decimal('0.00'),  # Free shipping by default\r\n+            'total': subtotal  # Will be updated if shipping is added\r\n+        }\r\n+        \r\n+        return render(request, 'cart/cart.html', context)\r\n+        \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # If no active cart exists, show empty cart\r\n+        context = {\r\n+            'cart_items': [],\r\n+            'subtotal': Decimal('0.00'),\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': Decimal('0.00')\r\n+        }\r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+@login_required\r\n+def update_cart_item(request):\r\n+    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n+    if request.method == 'POST':\r\n+        item_id = request.POST.get('item_id')\r\n+        quantity = int(request.POST.get('quantity', 0))\r\n+        \r\n+        try:\r\n+            cart_item = CartItem.objects.get(\r\n+                id=item_id,\r\n+                cart__user=request.user,\r\n+                cart__is_active=True\r\n+            )\r\n+            \r\n+            if quantity > 0:\r\n+                if quantity <= cart_item.product.stock_quantity:\r\n+                    cart_item.quantity = quantity\r\n+                    cart_item.save()\r\n+                    new_total = cart_item.quantity * cart_item.product.price\r\n+                    return JsonResponse({\r\n+                        'status': 'success',\r\n+                        'new_quantity': quantity,\r\n+                        'new_total': str(new_total)\r\n+                    })\r\n+                else:\r\n+                    return JsonResponse({\r\n+                        'status': 'error',\r\n+                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n+                    })\r\n+            else:\r\n+                cart_item.delete()\r\n+                return JsonResponse({\r\n+                    'status': 'removed'\r\n+                })\r\n+                \r\n+        except CartItem.DoesNotExist:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': 'Item not found'\r\n+            })\r\n+            \r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+\r\n+@login_required\r\n+def clear_cart(request):\r\n+    \"\"\"View to clear all items from cart\"\"\"\r\n+    if request.method == 'POST':\r\n+        try:\r\n+            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+            cart.cart_items.all().delete()\r\n+            return JsonResponse({'status': 'success'})\r\n+        except ShoppingCart.DoesNotExist:\r\n+            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+@login_required\r\n def shoppingcart (request):\r\n    \r\n     \r\n     return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739394605662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,45 +100,79 @@\n         \"\"\"Get all items in the cart with their details.\"\"\"\r\n         return self.cart.cart_items.all().select_related('product')\r\n \r\n \r\n+# views.py\r\n from django.http import JsonResponse\r\n+from django.contrib.auth.decorators import login_required\r\n from django.views.decorators.http import require_http_methods\r\n-from django.contrib.auth.decorators import login_required\r\n+from .models import Product, ShoppingCart, CartItem\r\n \r\n @login_required\r\n @require_http_methods([\"POST\"])\r\n def add_to_cart(request):\r\n     try:\r\n         product_id = request.POST.get('product_id')\r\n         quantity = int(request.POST.get('quantity', 1))\r\n         \r\n-        cart_manager = CartManager(request.user)\r\n-        result = cart_manager.add_to_cart(product_id, quantity)\r\n+        # Vérifier si le produit existe\r\n+        product = Product.objects.get(id=product_id)\r\n         \r\n-        if result['status'] == 'success':\r\n+        # Vérifier le stock\r\n+        if product.stock_quantity < quantity:\r\n             return JsonResponse({\r\n-                'status': 'success',\r\n-                'message': result['message'],\r\n-                'cart_total': str(cart_manager.get_cart_total())\r\n+                'status': 'error',\r\n+                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n             })\r\n-        else:\r\n+            \r\n+        # Récupérer ou créer le panier\r\n+        cart, _ = ShoppingCart.objects.get_or_create(\r\n+            user=request.user,\r\n+            is_active=True\r\n+        )\r\n+        \r\n+        # Ajouter ou mettre à jour l'article dans le panier\r\n+        cart_item, created = CartItem.objects.get_or_create(\r\n+            cart=cart,\r\n+            product=product,\r\n+            defaults={'quantity': 0}\r\n+        )\r\n+        \r\n+        # Mettre à jour la quantité\r\n+        new_quantity = cart_item.quantity + quantity\r\n+        if new_quantity > product.stock_quantity:\r\n             return JsonResponse({\r\n                 'status': 'error',\r\n-                'message': result['message']\r\n-            }, status=400)\r\n+                'message': f'La quantité totale dépasse le stock disponible'\r\n+            })\r\n             \r\n+        cart_item.quantity = new_quantity\r\n+        cart_item.save()\r\n+        \r\n+        # Compter le nombre total d'articles dans le panier\r\n+        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'message': f'{product.name} a été ajouté au panier',\r\n+            'cart_count': cart_count\r\n+        })\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Produit non trouvé'\r\n+        })\r\n     except ValueError:\r\n         return JsonResponse({\r\n             'status': 'error',\r\n-            'message': 'Invalid quantity provided'\r\n-        }, status=400)\r\n+            'message': 'Quantité invalide'\r\n+        })\r\n     except Exception as e:\r\n         return JsonResponse({\r\n             'status': 'error',\r\n-            'message': 'An unexpected error occurred'\r\n-        }, status=500)\r\n-        \r\n+            'message': 'Une erreur est survenue'\r\n+        })\r\n # views.py\r\n from django.shortcuts import render, redirect\r\n from django.contrib.auth.decorators import login_required\r\n from django.http import JsonResponse\r\n"
                },
                {
                    "date": 1739394801520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,9 @@\n # views.py\r\n from django.http import JsonResponse\r\n from django.contrib.auth.decorators import login_required\r\n from django.views.decorators.http import require_http_methods\r\n-from .models import Product, ShoppingCart, CartItem\r\n-\r\n+ \r\n @login_required\r\n @require_http_methods([\"POST\"])\r\n def add_to_cart(request):\r\n     try:\r\n"
                },
                {
                    "date": 1739394957169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n             'subtotal': Decimal('0.00'),\r\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n \r\n @login_required\r\n def update_cart_item(request):\r\n     \"\"\"AJAX view to update cart item quantity\"\"\"\r\n"
                },
                {
                    "date": 1739395006414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n             'shipping_cost': Decimal('0.00'),  # Free shipping by default\r\n             'total': subtotal  # Will be updated if shipping is added\r\n         }\r\n         \r\n-        return render(request, 'cart/cart.html', context)\r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n         \r\n     except ShoppingCart.DoesNotExist:\r\n         # If no active cart exists, show empty cart\r\n         context = {\r\n@@ -268,9 +268,5 @@\n             return JsonResponse({'status': 'success'})\r\n         except ShoppingCart.DoesNotExist:\r\n             return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n     return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n-@login_required\r\n-def shoppingcart (request):\r\n-   \r\n-    \r\n-    return render(request, 'home/ShoppingCart.html')\n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739395585269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,268 @@\n+from django.shortcuts import get_object_or_404, render\r\n+from e_commerce.models import *\r\n+from django.utils.decorators import method_decorator\r\n+from django.contrib.auth.decorators import login_required\r\n+\r\n+\r\n+\r\n+from django.shortcuts import get_object_or_404\r\n+from django.db import transaction\r\n+from django.core.exceptions import ValidationError\r\n+from decimal import Decimal\r\n+\r\n+class CartManager:\r\n+    def __init__(self, user):\r\n+        self.user = user\r\n+        self.cart = self._get_or_create_cart()\r\n+    \r\n+    def _get_or_create_cart(self):\r\n+        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n+        cart, created = ShoppingCart.objects.get_or_create(\r\n+            user=self.user,\r\n+            is_active=True\r\n+        )\r\n+        return cart\r\n+    \r\n+    @transaction.atomic\r\n+    def add_to_cart(self, product_id, quantity=1):\r\n+        \"\"\"\r\n+        Add a product to the cart or update its quantity if it already exists.\r\n+        \r\n+        Args:\r\n+            product_id: ID of the product to add\r\n+            quantity: Quantity to add (default=1)\r\n+            \r\n+        Returns:\r\n+            dict: Status of the operation and relevant messages\r\n+        \"\"\"\r\n+        try:\r\n+            # Validate inputs\r\n+            if quantity < 1:\r\n+                raise ValidationError(\"Quantity must be at least 1\")\r\n+                \r\n+            # Get the product\r\n+            product = get_object_or_404(Product, id=product_id)\r\n+            \r\n+            # Check if product is available\r\n+            if product.status != 'available':\r\n+                raise ValidationError(\"Product is not available\")\r\n+                \r\n+            # Check stock availability\r\n+            if product.stock_quantity < quantity:\r\n+                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n+            \r\n+            # Check if product already in cart\r\n+            cart_item, created = CartItem.objects.get_or_create(\r\n+                cart=self.cart,\r\n+                product=product,\r\n+                defaults={'quantity': 0}\r\n+            )\r\n+            \r\n+            # Update quantity\r\n+            new_quantity = cart_item.quantity + quantity\r\n+            \r\n+            # Verify total quantity doesn't exceed stock\r\n+            if new_quantity > product.stock_quantity:\r\n+                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n+            \r\n+            cart_item.quantity = new_quantity\r\n+            cart_item.save()\r\n+            \r\n+            return {\r\n+                'status': 'success',\r\n+                'message': f\"Added {quantity} x {product.name} to cart\",\r\n+                'cart_item': cart_item\r\n+            }\r\n+            \r\n+        except ValidationError as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': str(e)\r\n+            }\r\n+        except Exception as e:\r\n+            return {\r\n+                'status': 'error',\r\n+                'message': \"An unexpected error occurred\"\r\n+            }\r\n+    \r\n+    def get_cart_total(self):\r\n+        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n+        total = Decimal('0.0')\r\n+        for item in self.cart.cart_items.all():\r\n+            price = item.product.price\r\n+            if item.product.discount_percentage:\r\n+                discount = (item.product.discount_percentage / 100) * price\r\n+                price = price - discount\r\n+            total += price * item.quantity\r\n+        return total.quantize(Decimal('0.01'))\r\n+    \r\n+    def get_cart_items(self):\r\n+        \"\"\"Get all items in the cart with their details.\"\"\"\r\n+        return self.cart.cart_items.all().select_related('product')\r\n+\r\n+\r\n+# views.py\r\n+from django.http import JsonResponse\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.views.decorators.http import require_http_methods\r\n+ \r\n+@login_required\r\n+@require_http_methods([\"POST\"])\r\n+def add_to_cart(request):\r\n+    try:\r\n+        product_id = request.POST.get('product_id')\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+        # Vérifier si le produit existe\r\n+        product = Product.objects.get(id=product_id)\r\n+        \r\n+        # Vérifier le stock\r\n+        if product.stock_quantity < quantity:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n+            })\r\n+            \r\n+        # Récupérer ou créer le panier\r\n+        cart, _ = ShoppingCart.objects.get_or_create(\r\n+            user=request.user,\r\n+            is_active=True\r\n+        )\r\n+        \r\n+        # Ajouter ou mettre à jour l'article dans le panier\r\n+        cart_item, created = CartItem.objects.get_or_create(\r\n+            cart=cart,\r\n+            product=product,\r\n+            defaults={'quantity': 0}\r\n+        )\r\n+        \r\n+        # Mettre à jour la quantité\r\n+        new_quantity = cart_item.quantity + quantity\r\n+        if new_quantity > product.stock_quantity:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': f'La quantité totale dépasse le stock disponible'\r\n+            })\r\n+            \r\n+        cart_item.quantity = new_quantity\r\n+        cart_item.save()\r\n+        \r\n+        # Compter le nombre total d'articles dans le panier\r\n+        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'message': f'{product.name} a été ajouté au panier',\r\n+            'cart_count': cart_count\r\n+        })\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Produit non trouvé'\r\n+        })\r\n+    except ValueError:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Quantité invalide'\r\n+        })\r\n+    except Exception as e:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Une erreur est survenue'\r\n+        })\r\n+# views.py\r\n+from django.shortcuts import render, redirect\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.http import JsonResponse\r\n+from decimal import Decimal\r\n+ \r\n+\r\n+@login_required\r\n+def cart_view(request):\r\n+    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n+    try:\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart_items = cart.cart_items.select_related('product').all()\r\n+        \r\n+        # Calculer les totaux pour chaque article\r\n+        for item in cart_items:\r\n+            item.total = item.product.price * item.quantity\r\n+        \r\n+        # Calculer le sous-total\r\n+        subtotal = sum(item.total for item in cart_items)\r\n+        \r\n+        context = {\r\n+            'cart_items': cart_items,\r\n+            'subtotal': subtotal,\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n+        }\r\n+        \r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n+        \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # If no active cart exists, show empty cart\r\n+        context = {\r\n+            'cart_items': [],\r\n+            'subtotal': Decimal('0.00'),\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': Decimal('0.00')\r\n+        }\r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+@login_required\r\n+def update_cart_item(request):\r\n+    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n+    if request.method == 'POST':\r\n+        item_id = request.POST.get('item_id')\r\n+        quantity = int(request.POST.get('quantity', 0))\r\n+        \r\n+        try:\r\n+            cart_item = CartItem.objects.get(\r\n+                id=item_id,\r\n+                cart__user=request.user,\r\n+                cart__is_active=True\r\n+            )\r\n+            \r\n+            if quantity > 0:\r\n+                if quantity <= cart_item.product.stock_quantity:\r\n+                    cart_item.quantity = quantity\r\n+                    cart_item.save()\r\n+                    new_total = cart_item.quantity * cart_item.product.price\r\n+                    return JsonResponse({\r\n+                        'status': 'success',\r\n+                        'new_quantity': quantity,\r\n+                        'new_total': str(new_total)\r\n+                    })\r\n+                else:\r\n+                    return JsonResponse({\r\n+                        'status': 'error',\r\n+                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n+                    })\r\n+            else:\r\n+                cart_item.delete()\r\n+                return JsonResponse({\r\n+                    'status': 'removed'\r\n+                })\r\n+                \r\n+        except CartItem.DoesNotExist:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': 'Item not found'\r\n+            })\r\n+            \r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+\r\n+@login_required\r\n+def clear_cart(request):\r\n+    \"\"\"View to clear all items from cart\"\"\"\r\n+    if request.method == 'POST':\r\n+        try:\r\n+            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+            cart.cart_items.all().delete()\r\n+            return JsonResponse({'status': 'success'})\r\n+        except ShoppingCart.DoesNotExist:\r\n+            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n+    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739396999280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n             return JsonResponse({\r\n                 'status': 'error',\r\n                 'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n             })\r\n-            \r\n+        \r\n         # Récupérer ou créer le panier\r\n         cart, _ = ShoppingCart.objects.get_or_create(\r\n             user=request.user,\r\n             is_active=True\r\n@@ -142,13 +142,13 @@\n             return JsonResponse({\r\n                 'status': 'error',\r\n                 'message': f'La quantité totale dépasse le stock disponible'\r\n             })\r\n-            \r\n+        \r\n         cart_item.quantity = new_quantity\r\n         cart_item.save()\r\n         \r\n-        # Compter le nombre total d'articles dans le panier\r\n+        # Calculer le nombre total d'articles dans le panier\r\n         cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n         \r\n         return JsonResponse({\r\n             'status': 'success',\r\n@@ -264,277 +264,5 @@\n             return JsonResponse({'status': 'success'})\r\n         except ShoppingCart.DoesNotExist:\r\n             return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n     return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n- \n-from django.shortcuts import get_object_or_404, render\r\n-from e_commerce.models import *\r\n-from django.utils.decorators import method_decorator\r\n-from django.contrib.auth.decorators import login_required\r\n-\r\n-\r\n-\r\n-from django.shortcuts import get_object_or_404\r\n-from django.db import transaction\r\n-from django.core.exceptions import ValidationError\r\n-from decimal import Decimal\r\n-\r\n-class CartManager:\r\n-    def __init__(self, user):\r\n-        self.user = user\r\n-        self.cart = self._get_or_create_cart()\r\n-    \r\n-    def _get_or_create_cart(self):\r\n-        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n-        cart, created = ShoppingCart.objects.get_or_create(\r\n-            user=self.user,\r\n-            is_active=True\r\n-        )\r\n-        return cart\r\n-    \r\n-    @transaction.atomic\r\n-    def add_to_cart(self, product_id, quantity=1):\r\n-        \"\"\"\r\n-        Add a product to the cart or update its quantity if it already exists.\r\n-        \r\n-        Args:\r\n-            product_id: ID of the product to add\r\n-            quantity: Quantity to add (default=1)\r\n-            \r\n-        Returns:\r\n-            dict: Status of the operation and relevant messages\r\n-        \"\"\"\r\n-        try:\r\n-            # Validate inputs\r\n-            if quantity < 1:\r\n-                raise ValidationError(\"Quantity must be at least 1\")\r\n-                \r\n-            # Get the product\r\n-            product = get_object_or_404(Product, id=product_id)\r\n-            \r\n-            # Check if product is available\r\n-            if product.status != 'available':\r\n-                raise ValidationError(\"Product is not available\")\r\n-                \r\n-            # Check stock availability\r\n-            if product.stock_quantity < quantity:\r\n-                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n-            \r\n-            # Check if product already in cart\r\n-            cart_item, created = CartItem.objects.get_or_create(\r\n-                cart=self.cart,\r\n-                product=product,\r\n-                defaults={'quantity': 0}\r\n-            )\r\n-            \r\n-            # Update quantity\r\n-            new_quantity = cart_item.quantity + quantity\r\n-            \r\n-            # Verify total quantity doesn't exceed stock\r\n-            if new_quantity > product.stock_quantity:\r\n-                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n-            \r\n-            cart_item.quantity = new_quantity\r\n-            cart_item.save()\r\n-            \r\n-            return {\r\n-                'status': 'success',\r\n-                'message': f\"Added {quantity} x {product.name} to cart\",\r\n-                'cart_item': cart_item\r\n-            }\r\n-            \r\n-        except ValidationError as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': str(e)\r\n-            }\r\n-        except Exception as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': \"An unexpected error occurred\"\r\n-            }\r\n-    \r\n-    def get_cart_total(self):\r\n-        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n-        total = Decimal('0.0')\r\n-        for item in self.cart.cart_items.all():\r\n-            price = item.product.price\r\n-            if item.product.discount_percentage:\r\n-                discount = (item.product.discount_percentage / 100) * price\r\n-                price = price - discount\r\n-            total += price * item.quantity\r\n-        return total.quantize(Decimal('0.01'))\r\n-    \r\n-    def get_cart_items(self):\r\n-        \"\"\"Get all items in the cart with their details.\"\"\"\r\n-        return self.cart.cart_items.all().select_related('product')\r\n-\r\n-\r\n-# views.py\r\n-from django.http import JsonResponse\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.views.decorators.http import require_http_methods\r\n- \r\n-@login_required\r\n-@require_http_methods([\"POST\"])\r\n-def add_to_cart(request):\r\n-    try:\r\n-        product_id = request.POST.get('product_id')\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-        # Vérifier si le produit existe\r\n-        product = Product.objects.get(id=product_id)\r\n-        \r\n-        # Vérifier le stock\r\n-        if product.stock_quantity < quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n-            })\r\n-            \r\n-        # Récupérer ou créer le panier\r\n-        cart, _ = ShoppingCart.objects.get_or_create(\r\n-            user=request.user,\r\n-            is_active=True\r\n-        )\r\n-        \r\n-        # Ajouter ou mettre à jour l'article dans le panier\r\n-        cart_item, created = CartItem.objects.get_or_create(\r\n-            cart=cart,\r\n-            product=product,\r\n-            defaults={'quantity': 0}\r\n-        )\r\n-        \r\n-        # Mettre à jour la quantité\r\n-        new_quantity = cart_item.quantity + quantity\r\n-        if new_quantity > product.stock_quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'La quantité totale dépasse le stock disponible'\r\n-            })\r\n-            \r\n-        cart_item.quantity = new_quantity\r\n-        cart_item.save()\r\n-        \r\n-        # Compter le nombre total d'articles dans le panier\r\n-        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'message': f'{product.name} a été ajouté au panier',\r\n-            'cart_count': cart_count\r\n-        })\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Produit non trouvé'\r\n-        })\r\n-    except ValueError:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Quantité invalide'\r\n-        })\r\n-    except Exception as e:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Une erreur est survenue'\r\n-        })\r\n-# views.py\r\n-from django.shortcuts import render, redirect\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.http import JsonResponse\r\n-from decimal import Decimal\r\n- \r\n-\r\n-@login_required\r\n-def cart_view(request):\r\n-    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n-    try:\r\n-        # Get active cart for user\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        cart_items = cart.cart_items.select_related('product').all()\r\n-        \r\n-        # Calculate subtotal\r\n-        subtotal = sum(\r\n-            item.quantity * (\r\n-                item.product.price * (1 - item.product.discount_percentage/100)\r\n-                if item.product.discount_percentage\r\n-                else item.product.price\r\n-            )\r\n-            for item in cart_items\r\n-        )\r\n-        \r\n-        context = {\r\n-            'cart_items': cart_items,\r\n-            'subtotal': subtotal,\r\n-            'shipping_cost': Decimal('0.00'),  # Free shipping by default\r\n-            'total': subtotal  # Will be updated if shipping is added\r\n-        }\r\n-        \r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n-        \r\n-    except ShoppingCart.DoesNotExist:\r\n-        # If no active cart exists, show empty cart\r\n-        context = {\r\n-            'cart_items': [],\r\n-            'subtotal': Decimal('0.00'),\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': Decimal('0.00')\r\n-        }\r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-@login_required\r\n-def update_cart_item(request):\r\n-    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n-    if request.method == 'POST':\r\n-        item_id = request.POST.get('item_id')\r\n-        quantity = int(request.POST.get('quantity', 0))\r\n-        \r\n-        try:\r\n-            cart_item = CartItem.objects.get(\r\n-                id=item_id,\r\n-                cart__user=request.user,\r\n-                cart__is_active=True\r\n-            )\r\n-            \r\n-            if quantity > 0:\r\n-                if quantity <= cart_item.product.stock_quantity:\r\n-                    cart_item.quantity = quantity\r\n-                    cart_item.save()\r\n-                    new_total = cart_item.quantity * cart_item.product.price\r\n-                    return JsonResponse({\r\n-                        'status': 'success',\r\n-                        'new_quantity': quantity,\r\n-                        'new_total': str(new_total)\r\n-                    })\r\n-                else:\r\n-                    return JsonResponse({\r\n-                        'status': 'error',\r\n-                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n-                    })\r\n-            else:\r\n-                cart_item.delete()\r\n-                return JsonResponse({\r\n-                    'status': 'removed'\r\n-                })\r\n-                \r\n-        except CartItem.DoesNotExist:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': 'Item not found'\r\n-            })\r\n-            \r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n-\r\n-@login_required\r\n-def clear_cart(request):\r\n-    \"\"\"View to clear all items from cart\"\"\"\r\n-    if request.method == 'POST':\r\n-        try:\r\n-            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-            cart.cart_items.all().delete()\r\n-            return JsonResponse({'status': 'success'})\r\n-        except ShoppingCart.DoesNotExist:\r\n-            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739398140631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,178 +8,10 @@\n from django.shortcuts import get_object_or_404\r\n from django.db import transaction\r\n from django.core.exceptions import ValidationError\r\n from decimal import Decimal\r\n-\r\n-class CartManager:\r\n-    def __init__(self, user):\r\n-        self.user = user\r\n-        self.cart = self._get_or_create_cart()\r\n-    \r\n-    def _get_or_create_cart(self):\r\n-        \"\"\"Get the user's active cart or create a new one if none exists.\"\"\"\r\n-        cart, created = ShoppingCart.objects.get_or_create(\r\n-            user=self.user,\r\n-            is_active=True\r\n-        )\r\n-        return cart\r\n-    \r\n-    @transaction.atomic\r\n-    def add_to_cart(self, product_id, quantity=1):\r\n-        \"\"\"\r\n-        Add a product to the cart or update its quantity if it already exists.\r\n-        \r\n-        Args:\r\n-            product_id: ID of the product to add\r\n-            quantity: Quantity to add (default=1)\r\n-            \r\n-        Returns:\r\n-            dict: Status of the operation and relevant messages\r\n-        \"\"\"\r\n-        try:\r\n-            # Validate inputs\r\n-            if quantity < 1:\r\n-                raise ValidationError(\"Quantity must be at least 1\")\r\n-                \r\n-            # Get the product\r\n-            product = get_object_or_404(Product, id=product_id)\r\n-            \r\n-            # Check if product is available\r\n-            if product.status != 'available':\r\n-                raise ValidationError(\"Product is not available\")\r\n-                \r\n-            # Check stock availability\r\n-            if product.stock_quantity < quantity:\r\n-                raise ValidationError(f\"Only {product.stock_quantity} items available in stock\")\r\n-            \r\n-            # Check if product already in cart\r\n-            cart_item, created = CartItem.objects.get_or_create(\r\n-                cart=self.cart,\r\n-                product=product,\r\n-                defaults={'quantity': 0}\r\n-            )\r\n-            \r\n-            # Update quantity\r\n-            new_quantity = cart_item.quantity + quantity\r\n-            \r\n-            # Verify total quantity doesn't exceed stock\r\n-            if new_quantity > product.stock_quantity:\r\n-                raise ValidationError(f\"Cannot add {quantity} more items. Only {product.stock_quantity - cart_item.quantity} additional items available\")\r\n-            \r\n-            cart_item.quantity = new_quantity\r\n-            cart_item.save()\r\n-            \r\n-            return {\r\n-                'status': 'success',\r\n-                'message': f\"Added {quantity} x {product.name} to cart\",\r\n-                'cart_item': cart_item\r\n-            }\r\n-            \r\n-        except ValidationError as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': str(e)\r\n-            }\r\n-        except Exception as e:\r\n-            return {\r\n-                'status': 'error',\r\n-                'message': \"An unexpected error occurred\"\r\n-            }\r\n-    \r\n-    def get_cart_total(self):\r\n-        \"\"\"Calculate the total price of all items in the cart.\"\"\"\r\n-        total = Decimal('0.0')\r\n-        for item in self.cart.cart_items.all():\r\n-            price = item.product.price\r\n-            if item.product.discount_percentage:\r\n-                discount = (item.product.discount_percentage / 100) * price\r\n-                price = price - discount\r\n-            total += price * item.quantity\r\n-        return total.quantize(Decimal('0.01'))\r\n-    \r\n-    def get_cart_items(self):\r\n-        \"\"\"Get all items in the cart with their details.\"\"\"\r\n-        return self.cart.cart_items.all().select_related('product')\r\n-\r\n-\r\n-# views.py\r\n-from django.http import JsonResponse\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.views.decorators.http import require_http_methods\r\n  \r\n @login_required\r\n-@require_http_methods([\"POST\"])\r\n-def add_to_cart(request):\r\n-    try:\r\n-        product_id = request.POST.get('product_id')\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-        # Vérifier si le produit existe\r\n-        product = Product.objects.get(id=product_id)\r\n-        \r\n-        # Vérifier le stock\r\n-        if product.stock_quantity < quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'Stock insuffisant. Seulement {product.stock_quantity} disponible(s)'\r\n-            })\r\n-        \r\n-        # Récupérer ou créer le panier\r\n-        cart, _ = ShoppingCart.objects.get_or_create(\r\n-            user=request.user,\r\n-            is_active=True\r\n-        )\r\n-        \r\n-        # Ajouter ou mettre à jour l'article dans le panier\r\n-        cart_item, created = CartItem.objects.get_or_create(\r\n-            cart=cart,\r\n-            product=product,\r\n-            defaults={'quantity': 0}\r\n-        )\r\n-        \r\n-        # Mettre à jour la quantité\r\n-        new_quantity = cart_item.quantity + quantity\r\n-        if new_quantity > product.stock_quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': f'La quantité totale dépasse le stock disponible'\r\n-            })\r\n-        \r\n-        cart_item.quantity = new_quantity\r\n-        cart_item.save()\r\n-        \r\n-        # Calculer le nombre total d'articles dans le panier\r\n-        cart_count = sum(item.quantity for item in cart.cart_items.all())\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'message': f'{product.name} a été ajouté au panier',\r\n-            'cart_count': cart_count\r\n-        })\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Produit non trouvé'\r\n-        })\r\n-    except ValueError:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Quantité invalide'\r\n-        })\r\n-    except Exception as e:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Une erreur est survenue'\r\n-        })\r\n-# views.py\r\n-from django.shortcuts import render, redirect\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.http import JsonResponse\r\n-from decimal import Decimal\r\n- \r\n-\r\n-@login_required\r\n def cart_view(request):\r\n     \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n@@ -209,60 +41,5 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-@login_required\r\n-def update_cart_item(request):\r\n-    \"\"\"AJAX view to update cart item quantity\"\"\"\r\n-    if request.method == 'POST':\r\n-        item_id = request.POST.get('item_id')\r\n-        quantity = int(request.POST.get('quantity', 0))\r\n-        \r\n-        try:\r\n-            cart_item = CartItem.objects.get(\r\n-                id=item_id,\r\n-                cart__user=request.user,\r\n-                cart__is_active=True\r\n-            )\r\n-            \r\n-            if quantity > 0:\r\n-                if quantity <= cart_item.product.stock_quantity:\r\n-                    cart_item.quantity = quantity\r\n-                    cart_item.save()\r\n-                    new_total = cart_item.quantity * cart_item.product.price\r\n-                    return JsonResponse({\r\n-                        'status': 'success',\r\n-                        'new_quantity': quantity,\r\n-                        'new_total': str(new_total)\r\n-                    })\r\n-                else:\r\n-                    return JsonResponse({\r\n-                        'status': 'error',\r\n-                        'message': f'Only {cart_item.product.stock_quantity} items available'\r\n-                    })\r\n-            else:\r\n-                cart_item.delete()\r\n-                return JsonResponse({\r\n-                    'status': 'removed'\r\n-                })\r\n-                \r\n-        except CartItem.DoesNotExist:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': 'Item not found'\r\n-            })\r\n-            \r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n-\r\n-@login_required\r\n-def clear_cart(request):\r\n-    \"\"\"View to clear all items from cart\"\"\"\r\n-    if request.method == 'POST':\r\n-        try:\r\n-            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-            cart.cart_items.all().delete()\r\n-            return JsonResponse({'status': 'success'})\r\n-        except ShoppingCart.DoesNotExist:\r\n-            return JsonResponse({'status': 'error', 'message': 'Cart not found'})\r\n-    return JsonResponse({'status': 'error', 'message': 'Invalid request'})\r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739398189537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,7 @@\n from django.shortcuts import get_object_or_404, render\r\n from e_commerce.models import *\r\n-from django.utils.decorators import method_decorator\r\n from django.contrib.auth.decorators import login_required\r\n-\r\n-\r\n-\r\n-from django.shortcuts import get_object_or_404\r\n-from django.db import transaction\r\n-from django.core.exceptions import ValidationError\r\n from decimal import Decimal\r\n  \r\n @login_required\r\n def cart_view(request):\r\n"
                },
                {
                    "date": 1739826800650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,48 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n- \n\\ No newline at end of file\n+\r\n+\r\n+from django.shortcuts import get_object_or_404\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.http import JsonResponse\r\n+ \r\n+\r\n+@login_required\r\n+def add_to_cart(request, product_id):\r\n+    \"\"\"\r\n+    Function to add a product to the user's shopping cart.\r\n+    If the product is already in the cart, it increases the quantity.\r\n+    \"\"\"\r\n+    if request.method == 'POST':\r\n+        product = get_object_or_404(Product, id=product_id)\r\n+        \r\n+        # Get or create the active cart for this user\r\n+        cart, created = ShoppingCart.objects.get_or_create(\r\n+            user=request.user,\r\n+            is_active=True\r\n+        )\r\n+        \r\n+        # Check if this product is already in the cart\r\n+        cart_item, item_created = CartItem.objects.get_or_create(\r\n+            cart=cart,\r\n+            product=product,\r\n+            defaults={'quantity': 1}\r\n+        )\r\n+        \r\n+        # If the item already existed, increase the quantity\r\n+        if not item_created:\r\n+            cart_item.quantity += 1\r\n+            cart_item.save()\r\n+        \r\n+        return JsonResponse({\r\n+            'success': True,\r\n+            'message': f\"{product.name} a été ajouté à votre panier\",\r\n+            'cart_count': CartItem.objects.filter(cart=cart).count()\r\n+        })\r\n+    \r\n+    return JsonResponse({\r\n+        'success': False,\r\n+        'message': \"Méthode non autorisée\"\r\n+    }, status=405)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739827759107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,5 +77,51 @@\n     \r\n     return JsonResponse({\r\n         'success': False,\r\n         'message': \"Méthode non autorisée\"\r\n-    }, status=405)\n\\ No newline at end of file\n+    }, status=405)\r\n+    \r\n+    \r\n+\r\n+@login_required\r\n+def update_cart_item(request, item_id):\r\n+    if request.method == 'POST':\r\n+        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        if quantity > 0:\r\n+            cart_item.quantity = quantity\r\n+            cart_item.save()\r\n+        return JsonResponse({'success': True})\r\n+    return JsonResponse({'success': False}, status=405)\r\n+\r\n+@login_required\r\n+def remove_cart_item(request, item_id):\r\n+    if request.method == 'POST':\r\n+        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n+        cart_item.delete()\r\n+        return JsonResponse({'success': True})\r\n+    return JsonResponse({'success': False}, status=405)\r\n+\r\n+@login_required\r\n+def clear_cart(request):\r\n+    if request.method == 'POST':\r\n+        cart = ShoppingCart.objects.filter(user=request.user, is_active=True).first()\r\n+        if cart:\r\n+            CartItem.objects.filter(cart=cart).delete()\r\n+        return JsonResponse({'success': True})\r\n+    return JsonResponse({'success': False}, status=405)\r\n+\r\n+@login_required\r\n+def update_cart(request):\r\n+    if request.method == 'POST':\r\n+        import json\r\n+        data = json.loads(request.body)\r\n+        items = data.get('items', [])\r\n+        cart = ShoppingCart.objects.filter(user=request.user, is_active=True).first()\r\n+        if cart:\r\n+            for item in items:\r\n+                cart_item = CartItem.objects.filter(id=item['id'], cart=cart).first()\r\n+                if cart_item and int(item['quantity']) > 0:\r\n+                    cart_item.quantity = int(item['quantity'])\r\n+                    cart_item.save()\r\n+        return JsonResponse({'success': True})\r\n+    return JsonResponse({'success': False}, status=405)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739828015726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,94 +34,5 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-\r\n-from django.shortcuts import get_object_or_404\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.http import JsonResponse\r\n- \r\n-\r\n-@login_required\r\n-def add_to_cart(request, product_id):\r\n-    \"\"\"\r\n-    Function to add a product to the user's shopping cart.\r\n-    If the product is already in the cart, it increases the quantity.\r\n-    \"\"\"\r\n-    if request.method == 'POST':\r\n-        product = get_object_or_404(Product, id=product_id)\r\n-        \r\n-        # Get or create the active cart for this user\r\n-        cart, created = ShoppingCart.objects.get_or_create(\r\n-            user=request.user,\r\n-            is_active=True\r\n-        )\r\n-        \r\n-        # Check if this product is already in the cart\r\n-        cart_item, item_created = CartItem.objects.get_or_create(\r\n-            cart=cart,\r\n-            product=product,\r\n-            defaults={'quantity': 1}\r\n-        )\r\n-        \r\n-        # If the item already existed, increase the quantity\r\n-        if not item_created:\r\n-            cart_item.quantity += 1\r\n-            cart_item.save()\r\n-        \r\n-        return JsonResponse({\r\n-            'success': True,\r\n-            'message': f\"{product.name} a été ajouté à votre panier\",\r\n-            'cart_count': CartItem.objects.filter(cart=cart).count()\r\n-        })\r\n-    \r\n-    return JsonResponse({\r\n-        'success': False,\r\n-        'message': \"Méthode non autorisée\"\r\n-    }, status=405)\r\n-    \r\n-    \r\n-\r\n-@login_required\r\n-def update_cart_item(request, item_id):\r\n-    if request.method == 'POST':\r\n-        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n-        if quantity > 0:\r\n-            cart_item.quantity = quantity\r\n-            cart_item.save()\r\n-        return JsonResponse({'success': True})\r\n-    return JsonResponse({'success': False}, status=405)\r\n-\r\n-@login_required\r\n-def remove_cart_item(request, item_id):\r\n-    if request.method == 'POST':\r\n-        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n-        cart_item.delete()\r\n-        return JsonResponse({'success': True})\r\n-    return JsonResponse({'success': False}, status=405)\r\n-\r\n-@login_required\r\n-def clear_cart(request):\r\n-    if request.method == 'POST':\r\n-        cart = ShoppingCart.objects.filter(user=request.user, is_active=True).first()\r\n-        if cart:\r\n-            CartItem.objects.filter(cart=cart).delete()\r\n-        return JsonResponse({'success': True})\r\n-    return JsonResponse({'success': False}, status=405)\r\n-\r\n-@login_required\r\n-def update_cart(request):\r\n-    if request.method == 'POST':\r\n-        import json\r\n-        data = json.loads(request.body)\r\n-        items = data.get('items', [])\r\n-        cart = ShoppingCart.objects.filter(user=request.user, is_active=True).first()\r\n-        if cart:\r\n-            for item in items:\r\n-                cart_item = CartItem.objects.filter(id=item['id'], cart=cart).first()\r\n-                if cart_item and int(item['quantity']) > 0:\r\n-                    cart_item.quantity = int(item['quantity'])\r\n-                    cart_item.save()\r\n-        return JsonResponse({'success': True})\r\n-    return JsonResponse({'success': False}, status=405)\n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739828111534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,5 +34,4 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n- \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739828232287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,4 +34,25 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+\r\n+@method_decorator(login_required, name='dispatch')\r\n+class DossierDeleteView( DeleteView):\r\n+    model = Dossier\r\n+    template_name = \"pages/Dossier/Dossier_confirm_delete.html\"\r\n+    success_url = reverse_lazy('Dossier_list')\r\n+    form_invalid_message = _(\"Oups, quelque chose s'est mal passé lors de la suppression!\")\r\n+\r\n+    def delete(self, request, *args, **kwargs):\r\n+        messages.success(self.request, _(\"Le Dossier a été supprimé avec succès!\"))\r\n+        return super().delete(request, *args, **kwargs)\r\n+\r\n+    def get_object(self, **kwargs):\r\n+        pk = self.kwargs.get('pk')\r\n+        return get_object_or_404(Dossier, pk=pk)\r\n+\r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        context['method'] = \"delete\"\r\n+        return context \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739828272450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n from django.shortcuts import get_object_or_404, render\r\n from e_commerce.models import *\r\n from django.contrib.auth.decorators import login_required\r\n from decimal import Decimal\r\n- \r\n+from django.utils.decorators import method_decorator\r\n+from django.contrib.auth.decorators import login_required\r\n @login_required\r\n def cart_view(request):\r\n     \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n     try:\r\n"
                },
                {
                    "date": 1739828306453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n from django.contrib.auth.decorators import login_required\r\n from decimal import Decimal\r\n from django.utils.decorators import method_decorator\r\n from django.contrib.auth.decorators import login_required\r\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView,DetailView\r\n+\r\n @login_required\r\n def cart_view(request):\r\n     \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n     try:\r\n@@ -39,9 +41,9 @@\n \r\n \r\n @method_decorator(login_required, name='dispatch')\r\n class DossierDeleteView( DeleteView):\r\n-    model = Dossier\r\n+    model = \r\n     template_name = \"pages/Dossier/Dossier_confirm_delete.html\"\r\n     success_url = reverse_lazy('Dossier_list')\r\n     form_invalid_message = _(\"Oups, quelque chose s'est mal passé lors de la suppression!\")\r\n \r\n"
                },
                {
                    "date": 1739828430745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,24 +38,5 @@\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n-\r\n-@method_decorator(login_required, name='dispatch')\r\n-class DossierDeleteView( DeleteView):\r\n-    model = \r\n-    template_name = \"pages/Dossier/Dossier_confirm_delete.html\"\r\n-    success_url = reverse_lazy('Dossier_list')\r\n-    form_invalid_message = _(\"Oups, quelque chose s'est mal passé lors de la suppression!\")\r\n-\r\n-    def delete(self, request, *args, **kwargs):\r\n-        messages.success(self.request, _(\"Le Dossier a été supprimé avec succès!\"))\r\n-        return super().delete(request, *args, **kwargs)\r\n-\r\n-    def get_object(self, **kwargs):\r\n-        pk = self.kwargs.get('pk')\r\n-        return get_object_or_404(Dossier, pk=pk)\r\n-\r\n-    def get_context_data(self, **kwargs):\r\n-        context = super().get_context_data(**kwargs)\r\n-        context['method'] = \"delete\"\r\n-        return context \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739828652100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,5 +38,14 @@\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n- \n\\ No newline at end of file\n+\r\n+# Function to remove a specific item from the cart\r\n+def remove_item_from_cart(cart, product):\r\n+    try:\r\n+        # Find the cart item matching the cart and product\r\n+        cart_item = CartItem.objects.get(cart=cart, product=product)\r\n+        cart_item.delete()\r\n+        return True  # Successfully removed the item\r\n+    except CartItem.DoesNotExist:\r\n+        return False  # Item not found in the cart\r\n"
                },
                {
                    "date": 1739828857866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+from django.shortcuts import get_object_or_404, render\r\n+from e_commerce.models import *\r\n+from django.contrib.auth.decorators import login_required\r\n+from decimal import Decimal\r\n+from django.utils.decorators import method_decorator\r\n+from django.contrib.auth.decorators import login_required\r\n+from django.views.generic import ListView, CreateView,UpdateView,DeleteView,DetailView\r\n+\r\n+@login_required\r\n+def cart_view(request):\r\n+    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n+    try:\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart_items = cart.cart_items.select_related('product').all()\r\n+        \r\n+        # Calculer les totaux pour chaque article\r\n+        for item in cart_items:\r\n+            item.total = item.product.price * item.quantity\r\n+        \r\n+        # Calculer le sous-total\r\n+        subtotal = sum(item.total for item in cart_items)\r\n+        \r\n+        context = {\r\n+            'cart_items': cart_items,\r\n+            'subtotal': subtotal,\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n+        }\r\n+        \r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n+        \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # If no active cart exists, show empty cart\r\n+        context = {\r\n+            'cart_items': [],\r\n+            'subtotal': Decimal('0.00'),\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': Decimal('0.00')\r\n+        }\r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+\r\n+# Function to remove a specific item from the cart\r\n+def remove_item_from_cart(cart, product):\r\n+    try:\r\n+        # Find the cart item matching the cart and product\r\n+        cart_item = CartItem.objects.get(cart=cart, product=product)\r\n+        cart_item.delete()\r\n+        return True  # Successfully removed the item\r\n+    except CartItem.DoesNotExist:\r\n+        return False  # Item not found in the cart\r\n+\r\n+\r\n+# Function to clear the entire cart\r\n+def clear_cart(cart):\r\n+    # Delete all items related to the cart\r\n+    cart.cart_items.all().delete()\r\n+    return True  # Cart is cleared\r\n"
                },
                {
                    "date": 1739829184282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,71 +39,20 @@\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n \r\n-# Function to remove a specific item from the cart\r\n-def remove_item_from_cart(cart, product):\r\n+from django.http import JsonResponse\r\n+ \r\n+def remove_item_from_cart(request, item_id):\r\n     try:\r\n-        # Find the cart item matching the cart and product\r\n-        cart_item = CartItem.objects.get(cart=cart, product=product)\r\n+        cart_item = CartItem.objects.get(id=item_id)\r\n         cart_item.delete()\r\n-        return True  # Successfully removed the item\r\n+        return JsonResponse({'status': 'success'})\r\n     except CartItem.DoesNotExist:\r\n-        return False  # Item not found in the cart\r\n+        return JsonResponse({'status': 'error'}, status=400)\r\n \r\n \r\n # Function to clear the entire cart\r\n def clear_cart(cart):\r\n     # Delete all items related to the cart\r\n     cart.cart_items.all().delete()\r\n     return True  # Cart is cleared\r\n-from django.shortcuts import get_object_or_404, render\r\n-from e_commerce.models import *\r\n-from django.contrib.auth.decorators import login_required\r\n-from decimal import Decimal\r\n-from django.utils.decorators import method_decorator\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView,DetailView\r\n-\r\n-@login_required\r\n-def cart_view(request):\r\n-    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n-    try:\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        cart_items = cart.cart_items.select_related('product').all()\r\n-        \r\n-        # Calculer les totaux pour chaque article\r\n-        for item in cart_items:\r\n-            item.total = item.product.price * item.quantity\r\n-        \r\n-        # Calculer le sous-total\r\n-        subtotal = sum(item.total for item in cart_items)\r\n-        \r\n-        context = {\r\n-            'cart_items': cart_items,\r\n-            'subtotal': subtotal,\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n-        }\r\n-        \r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n-        \r\n-    except ShoppingCart.DoesNotExist:\r\n-        # If no active cart exists, show empty cart\r\n-        context = {\r\n-            'cart_items': [],\r\n-            'subtotal': Decimal('0.00'),\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': Decimal('0.00')\r\n-        }\r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-\r\n-# Function to remove a specific item from the cart\r\n-def remove_item_from_cart(cart, product):\r\n-    try:\r\n-        # Find the cart item matching the cart and product\r\n-        cart_item = CartItem.objects.get(cart=cart, product=product)\r\n-        cart_item.delete()\r\n-        return True  # Successfully removed the item\r\n-    except CartItem.DoesNotExist:\r\n-        return False  # Item not found in the cart\r\n"
                },
                {
                    "date": 1739829197302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,24 @@\n     except CartItem.DoesNotExist:\r\n         return JsonResponse({'status': 'error'}, status=400)\r\n \r\n \r\n+\r\n+ \r\n+def update_cart_item_quantity(request, item_id):\r\n+    if request.method == 'POST':\r\n+        new_quantity = int(request.POST.get('quantity'))\r\n+        try:\r\n+            cart_item = CartItem.objects.get(id=item_id)\r\n+            if new_quantity > 0 and new_quantity <= cart_item.product.stock_quantity:\r\n+                cart_item.quantity = new_quantity\r\n+                cart_item.save()\r\n+                return JsonResponse({'status': 'success'})\r\n+            else:\r\n+                return JsonResponse({'status': 'error', 'message': 'Invalid quantity'}, status=400)\r\n+        except CartItem.DoesNotExist:\r\n+            return JsonResponse({'status': 'error', 'message': 'Item not found'}, status=400)\r\n+\r\n # Function to clear the entire cart\r\n def clear_cart(cart):\r\n     # Delete all items related to the cart\r\n     cart.cart_items.all().delete()\r\n"
                },
                {
                    "date": 1739829210879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,14 @@\n             else:\r\n                 return JsonResponse({'status': 'error', 'message': 'Invalid quantity'}, status=400)\r\n         except CartItem.DoesNotExist:\r\n             return JsonResponse({'status': 'error', 'message': 'Item not found'}, status=400)\r\n+ \r\n \r\n-# Function to clear the entire cart\r\n-def clear_cart(cart):\r\n-    # Delete all items related to the cart\r\n-    cart.cart_items.all().delete()\r\n-    return True  # Cart is cleared\r\n+def clear_cart(request):\r\n+    if request.method == 'POST':\r\n+        try:\r\n+            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+            cart.cart_items.all().delete()\r\n+            return JsonResponse({'status': 'success'})\r\n+        except ShoppingCart.DoesNotExist:\r\n+            return JsonResponse({'status': 'error'}, status=400)\r\n"
                },
                {
                    "date": 1739829607137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,9 @@\n from django.shortcuts import get_object_or_404, render\r\n from e_commerce.models import *\r\n from django.contrib.auth.decorators import login_required\r\n from decimal import Decimal\r\n-from django.utils.decorators import method_decorator\r\n-from django.contrib.auth.decorators import login_required\r\n-from django.views.generic import ListView, CreateView,UpdateView,DeleteView,DetailView\r\n-\r\n+ \r\n @login_required\r\n def cart_view(request):\r\n     \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n     try:\r\n@@ -37,42 +34,5 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-\r\n-from django.http import JsonResponse\r\n- \r\n-def remove_item_from_cart(request, item_id):\r\n-    try:\r\n-        cart_item = CartItem.objects.get(id=item_id)\r\n-        cart_item.delete()\r\n-        return JsonResponse({'status': 'success'})\r\n-    except CartItem.DoesNotExist:\r\n-        return JsonResponse({'status': 'error'}, status=400)\r\n-\r\n-\r\n-\r\n- \r\n-def update_cart_item_quantity(request, item_id):\r\n-    if request.method == 'POST':\r\n-        new_quantity = int(request.POST.get('quantity'))\r\n-        try:\r\n-            cart_item = CartItem.objects.get(id=item_id)\r\n-            if new_quantity > 0 and new_quantity <= cart_item.product.stock_quantity:\r\n-                cart_item.quantity = new_quantity\r\n-                cart_item.save()\r\n-                return JsonResponse({'status': 'success'})\r\n-            else:\r\n-                return JsonResponse({'status': 'error', 'message': 'Invalid quantity'}, status=400)\r\n-        except CartItem.DoesNotExist:\r\n-            return JsonResponse({'status': 'error', 'message': 'Item not found'}, status=400)\r\n- \r\n-\r\n-def clear_cart(request):\r\n-    if request.method == 'POST':\r\n-        try:\r\n-            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-            cart.cart_items.all().delete()\r\n-            return JsonResponse({'status': 'success'})\r\n-        except ShoppingCart.DoesNotExist:\r\n-            return JsonResponse({'status': 'error'}, status=400)\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739868247186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from django.shortcuts import get_object_or_404, render\r\n+from django.shortcuts import get_object_or_404, redirect, render\r\n from e_commerce.models import *\r\n from django.contrib.auth.decorators import login_required\r\n from decimal import Decimal\r\n  \r\n@@ -34,5 +34,62 @@\n             'shipping_cost': Decimal('0.00'),\r\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n- \n\\ No newline at end of file\n+\r\n+@login_required\r\n+def add_to_cart(request, product_id):\r\n+    \"\"\"View to add a product to the cart\"\"\"\r\n+    try:\r\n+        product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        \r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product, shopping_cart=cart).first()\r\n+        \r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                shopping_cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        return redirect('cart_view')\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return redirect('home')\r\n+    \r\n+@login_required\r\n+def remove_from_cart(request, cart_item_id):\r\n+    \"\"\"View to remove a product from the cart\"\"\"\r\n+    try:\r\n+        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+        cart_item.delete()\r\n+        return redirect('cart_view')\r\n+        \r\n+    except CartItem.DoesNotExist:\r\n+        return redirect('home')\r\n+    \r\n+@login_required\r\n+def update_cart_item(request, cart_item_id):\r\n+    \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n+    try:\r\n+        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+        if quantity < 1:\r\n+            cart_item.delete()\r\n+            \r\n+        else:\r\n+            cart_item.quantity = quantity\r\n+            cart_item.save()\r\n+            \r\n+        return redirect('cart_view')\r\n+        \r\n+    except CartItem.DoesNotExist:\r\n+        return redirect('home')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739869117037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n                 shopping_cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n-        return redirect('cart_view')\r\n+        return redirect('home')\r\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('home')\r\n     \r\n"
                },
                {
                    "date": 1739869452603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,35 +35,51 @@\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n+from django.http import JsonResponse\r\n+\r\n @login_required\r\n def add_to_cart(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n+    if request.method != 'POST':\r\n+        return JsonResponse({'error': 'Méthode non autorisée'}, status=405)\r\n+        \r\n     try:\r\n         product = Product.objects.get(id=product_id)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product, shopping_cart=cart).first()\r\n+        # Vérifier si l'utilisateur a un panier actif\r\n+        cart, created = ShoppingCart.objects.get_or_create(\r\n+            user=request.user,\r\n+            is_active=True\r\n+        )\r\n         \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                shopping_cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        return redirect('home')\r\n+        # Vérifier si le produit existe déjà dans le panier\r\n+        cart_item, created = CartItem.objects.get_or_create(\r\n+            product=product,\r\n+            shopping_cart=cart,\r\n+            defaults={'quantity': 0}\r\n+        )\r\n         \r\n+        # Incrémenter la quantité\r\n+        cart_item.quantity += 1\r\n+        cart_item.save()\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'message': 'Produit ajouté au panier'\r\n+        })\r\n+        \r\n     except Product.DoesNotExist:\r\n-        return redirect('home')\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': 'Produit non trouvé'\r\n+        }, status=404)\r\n+    except Exception as e:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': str(e)\r\n+        }, status=500)\r\n     \r\n @login_required\r\n def remove_from_cart(request, cart_item_id):\r\n     \"\"\"View to remove a product from the cart\"\"\"\r\n"
                },
                {
                    "date": 1739870631904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,12 @@\n     if request.method != 'POST':\r\n         return JsonResponse({'error': 'Méthode non autorisée'}, status=405)\r\n         \r\n     try:\r\n+       # Convertir la chaîne UUID en objet UUID si nécessaire\r\n+        if isinstance(product_id, str):\r\n+            product_id = UUID(product_id)\r\n+            \r\n         product = Product.objects.get(id=product_id)\r\n         \r\n         # Vérifier si l'utilisateur a un panier actif\r\n         cart, created = ShoppingCart.objects.get_or_create(\r\n"
                },
                {
                    "date": 1739870674782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n from django.http import JsonResponse\r\n+from uuid import UUID\r\n \r\n @login_required\r\n def add_to_cart(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n"
                },
                {
                    "date": 1739872614077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,56 +35,35 @@\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n-from django.http import JsonResponse\r\n-from uuid import UUID\r\n-\r\n @login_required\r\n def add_to_cart(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n-    if request.method != 'POST':\r\n-        return JsonResponse({'error': 'Méthode non autorisée'}, status=405)\r\n-        \r\n     try:\r\n-       # Convertir la chaîne UUID en objet UUID si nécessaire\r\n-        if isinstance(product_id, str):\r\n-            product_id = UUID(product_id)\r\n-            \r\n         product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n-        # Vérifier si l'utilisateur a un panier actif\r\n-        cart, created = ShoppingCart.objects.get_or_create(\r\n-            user=request.user,\r\n-            is_active=True\r\n-        )\r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product, shopping_cart=cart).first()\r\n         \r\n-        # Vérifier si le produit existe déjà dans le panier\r\n-        cart_item, created = CartItem.objects.get_or_create(\r\n-            product=product,\r\n-            shopping_cart=cart,\r\n-            defaults={'quantity': 0}\r\n-        )\r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                shopping_cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        return redirect('home')\r\n         \r\n-        # Incrémenter la quantité\r\n-        cart_item.quantity += 1\r\n-        cart_item.save()\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'message': 'Produit ajouté au panier'\r\n-        })\r\n-        \r\n     except Product.DoesNotExist:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': 'Produit non trouvé'\r\n-        }, status=404)\r\n-    except Exception as e:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': str(e)\r\n-        }, status=500)\r\n+        return redirect('home')\r\n     \r\n @login_required\r\n def remove_from_cart(request, cart_item_id):\r\n     \"\"\"View to remove a product from the cart\"\"\"\r\n"
                },
                {
                    "date": 1739872933824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product, shopping_cart=cart).first()\r\n+        existing_item = CartItem.objects.filter(product=product, ShoppingCart=cart).first()\r\n         \r\n         if existing_item:\r\n             # If the product exists, increase the quantity\r\n             existing_item.quantity += 1\r\n"
                },
                {
                    "date": 1739872949468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product, ShoppingCart=cart).first()\r\n+        existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n         \r\n         if existing_item:\r\n             # If the product exists, increase the quantity\r\n             existing_item.quantity += 1\r\n"
                },
                {
                    "date": 1739872959547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n                 shopping_cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n-        return redirect('home')\r\n+        return redirect('Home')\r\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('home')\r\n     \r\n"
                },
                {
                    "date": 1739872966115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,95 @@\n+from django.shortcuts import get_object_or_404, redirect, render\r\n+from e_commerce.models import *\r\n+from django.contrib.auth.decorators import login_required\r\n+from decimal import Decimal\r\n+ \r\n+@login_required\r\n+def cart_view(request):\r\n+    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n+    try:\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart_items = cart.cart_items.select_related('product').all()\r\n+        \r\n+        # Calculer les totaux pour chaque article\r\n+        for item in cart_items:\r\n+            item.total = item.product.price * item.quantity\r\n+        \r\n+        # Calculer le sous-total\r\n+        subtotal = sum(item.total for item in cart_items)\r\n+        \r\n+        context = {\r\n+            'cart_items': cart_items,\r\n+            'subtotal': subtotal,\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n+        }\r\n+        \r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n+        \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # If no active cart exists, show empty cart\r\n+        context = {\r\n+            'cart_items': [],\r\n+            'subtotal': Decimal('0.00'),\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': Decimal('0.00')\r\n+        }\r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+@login_required\r\n+def add_to_cart(request, product_id):\r\n+    \"\"\"View to add a product to the cart\"\"\"\r\n+    try:\r\n+        product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        \r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n+        \r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                shopping_cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        return redirect('Home')\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return redirect('Home')\r\n+    \r\n+@login_required\r\n+def remove_from_cart(request, cart_item_id):\r\n+    \"\"\"View to remove a product from the cart\"\"\"\r\n+    try:\r\n+        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+        cart_item.delete()\r\n+        return redirect('cart_view')\r\n+        \r\n+    except CartItem.DoesNotExist:\r\n+        return redirect('home')\r\n+    \r\n+@login_required\r\n+def update_cart_item(request, cart_item_id):\r\n+    \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n+    try:\r\n+        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+        if quantity < 1:\r\n+            cart_item.delete()\r\n+            \r\n+        else:\r\n+            cart_item.quantity = quantity\r\n+            cart_item.save()\r\n+            \r\n+        return redirect('cart_view')\r\n+        \r\n+    except CartItem.DoesNotExist:\r\n+        return redirect('home')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739873095610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n+        existing_item = CartItem.objects.filter(product=product, shopping_cart=cart).first()\r\n         \r\n         if existing_item:\r\n             # If the product exists, increase the quantity\r\n             existing_item.quantity += 1\r\n@@ -91,100 +91,5 @@\n             \r\n         return redirect('cart_view')\r\n         \r\n     except CartItem.DoesNotExist:\r\n-        return redirect('home')\n-from django.shortcuts import get_object_or_404, redirect, render\r\n-from e_commerce.models import *\r\n-from django.contrib.auth.decorators import login_required\r\n-from decimal import Decimal\r\n- \r\n-@login_required\r\n-def cart_view(request):\r\n-    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n-    try:\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        cart_items = cart.cart_items.select_related('product').all()\r\n-        \r\n-        # Calculer les totaux pour chaque article\r\n-        for item in cart_items:\r\n-            item.total = item.product.price * item.quantity\r\n-        \r\n-        # Calculer le sous-total\r\n-        subtotal = sum(item.total for item in cart_items)\r\n-        \r\n-        context = {\r\n-            'cart_items': cart_items,\r\n-            'subtotal': subtotal,\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n-        }\r\n-        \r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n-        \r\n-    except ShoppingCart.DoesNotExist:\r\n-        # If no active cart exists, show empty cart\r\n-        context = {\r\n-            'cart_items': [],\r\n-            'subtotal': Decimal('0.00'),\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': Decimal('0.00')\r\n-        }\r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-@login_required\r\n-def add_to_cart(request, product_id):\r\n-    \"\"\"View to add a product to the cart\"\"\"\r\n-    try:\r\n-        product = Product.objects.get(id=product_id)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n-        \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                shopping_cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        return redirect('Home')\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return redirect('home')\r\n-    \r\n-@login_required\r\n-def remove_from_cart(request, cart_item_id):\r\n-    \"\"\"View to remove a product from the cart\"\"\"\r\n-    try:\r\n-        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-        cart_item.delete()\r\n-        return redirect('cart_view')\r\n-        \r\n-    except CartItem.DoesNotExist:\r\n-        return redirect('home')\r\n-    \r\n-@login_required\r\n-def update_cart_item(request, cart_item_id):\r\n-    \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n-    try:\r\n-        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-        if quantity < 1:\r\n-            cart_item.delete()\r\n-            \r\n-        else:\r\n-            cart_item.quantity = quantity\r\n-            cart_item.save()\r\n-            \r\n-        return redirect('cart_view')\r\n-        \r\n-    except CartItem.DoesNotExist:\r\n         return redirect('home')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739873120817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product, shopping_cart=cart).first()\r\n+        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n         \r\n         if existing_item:\r\n             # If the product exists, increase the quantity\r\n             existing_item.quantity += 1\r\n@@ -54,9 +54,9 @@\n         else:\r\n             # If the product doesn't exist, create a new CartItem\r\n             CartItem.objects.create(\r\n                 product=product,\r\n-                shopping_cart=cart,\r\n+                cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n         return redirect('Home')\r\n"
                },
                {
                    "date": 1739873773396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n @login_required\r\n-def add_to_cart(request, product_id):\r\n+def add_to_cart_detail(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n@@ -63,33 +63,35 @@\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('Home')\r\n     \r\n-@login_required\r\n-def remove_from_cart(request, cart_item_id):\r\n-    \"\"\"View to remove a product from the cart\"\"\"\r\n-    try:\r\n-        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-        cart_item.delete()\r\n-        return redirect('cart_view')\r\n+    \r\n+    \r\n+# @login_required\r\n+# def remove_from_cart(request, cart_item_id):\r\n+#     \"\"\"View to remove a product from the cart\"\"\"\r\n+#     try:\r\n+#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+#         cart_item.delete()\r\n+#         return redirect('cart_view')\r\n         \r\n-    except CartItem.DoesNotExist:\r\n-        return redirect('home')\r\n+#     except CartItem.DoesNotExist:\r\n+#         return redirect('home')\r\n     \r\n-@login_required\r\n-def update_cart_item(request, cart_item_id):\r\n-    \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n-    try:\r\n-        cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n+# @login_required\r\n\\ No newline at end of file\n+# def update_cart_item(request, cart_item_id):\r\n+#     \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n+#     try:\r\n+#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+#         quantity = int(request.POST.get('quantity', 1))\r\n         \r\n-        if quantity < 1:\r\n-            cart_item.delete()\r\n+#         if quantity < 1:\r\n+#             cart_item.delete()\r\n             \r\n-        else:\r\n-            cart_item.quantity = quantity\r\n-            cart_item.save()\r\n+#         else:\r\n+#             cart_item.quantity = quantity\r\n+#             cart_item.save()\r\n             \r\n-        return redirect('cart_view')\r\n+#         return redirect('cart_view')\r\n         \r\n-    except CartItem.DoesNotExist:\r\n-        return redirect('home')\n+#     except CartItem.DoesNotExist:\r\n+#         return redirect('home')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739873819849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n @login_required\r\n-def add_to_cart_detail(request, product_id):\r\n+def add_to_cart_favoris(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n@@ -58,12 +58,12 @@\n                 cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n-        return redirect('Home')\r\n+        return redirect('favoris')\r\n         \r\n     except Product.DoesNotExist:\r\n-        return redirect('Home')\r\n+        return redirect('favoris')\r\n     \r\n     \r\n     \r\n # @login_required\r\n"
                },
                {
                    "date": 1739873933282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,10 @@\n                 cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n+        messages.error(request, \"Tous les conteneurs doivent avoir le statut 'habillage et empotage' avant de soumettre le dossier.\")\r\n+\r\n         return redirect('favoris')\r\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('favoris')\r\n"
                },
                {
                    "date": 1739874056100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n from django.shortcuts import get_object_or_404, redirect, render\r\n from e_commerce.models import *\r\n from django.contrib.auth.decorators import login_required\r\n from decimal import Decimal\r\n- \r\n+from django.contrib import messages\r\n+\r\n @login_required\r\n def cart_view(request):\r\n     \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n     try:\r\n@@ -58,9 +59,9 @@\n                 cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n-        messages.error(request, \"Tous les conteneurs doivent avoir le statut 'habillage et empotage' avant de soumettre le dossier.\")\r\n+        messages.success(request, f\"{product} a ete ajouter avec success \")\r\n \r\n         return redirect('favoris')\r\n         \r\n     except Product.DoesNotExist:\r\n"
                },
                {
                    "date": 1739874566884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+from django.shortcuts import get_object_or_404, redirect, render\r\n+from e_commerce.models import *\r\n+from django.contrib.auth.decorators import login_required\r\n+from decimal import Decimal\r\n+from django.contrib import messages\r\n+\r\n+@login_required\r\n+def cart_view(request):\r\n+    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n+    try:\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart_items = cart.cart_items.select_related('product').all()\r\n+        \r\n+        # Calculer les totaux pour chaque article\r\n+        for item in cart_items:\r\n+            item.total = item.product.price * item.quantity\r\n+        \r\n+        # Calculer le sous-total\r\n+        subtotal = sum(item.total for item in cart_items)\r\n+        \r\n+        context = {\r\n+            'cart_items': cart_items,\r\n+            'subtotal': subtotal,\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n+        }\r\n+        \r\n+        return render(request, 'home/ShoppingCart.html', context)\r\n+        \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # If no active cart exists, show empty cart\r\n+        context = {\r\n+            'cart_items': [],\r\n+            'subtotal': Decimal('0.00'),\r\n+            'shipping_cost': Decimal('0.00'),\r\n+            'total': Decimal('0.00')\r\n+        }\r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n+@login_required\r\n+def add_to_cart_favoris(request, product_id):\r\n+    \"\"\"View to add a product to the cart\"\"\"\r\n+    try:\r\n+        product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        \r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n+        \r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        messages.success(request, f\"{product} a ete ajouter avec success \")\r\n+\r\n+        return redirect('favoris')\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return redirect('favoris')\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_favoris(request, product_id):\r\n+    \"\"\"View to add a product to the cart\"\"\"\r\n+    try:\r\n+        product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        \r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n+        \r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        messages.success(request, f\"{product} a ete ajouter avec success \")\r\n+\r\n+        return redirect('favoris')\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return redirect('favoris') \r\n+    \r\n+    \r\n+# @login_required\r\n+# def remove_from_cart(request, cart_item_id):\r\n+#     \"\"\"View to remove a product from the cart\"\"\"\r\n+#     try:\r\n+#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+#         cart_item.delete()\r\n+#         return redirect('cart_view')\r\n+        \r\n+#     except CartItem.DoesNotExist:\r\n+#         return redirect('home')\r\n+    \r\n+# @login_required\r\n+# def update_cart_item(request, cart_item_id):\r\n+#     \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n+#     try:\r\n+#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n+#         quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+#         if quantity < 1:\r\n+#             cart_item.delete()\r\n+            \r\n+#         else:\r\n+#             cart_item.quantity = quantity\r\n+#             cart_item.save()\r\n+            \r\n+#         return redirect('cart_view')\r\n+        \r\n+#     except CartItem.DoesNotExist:\r\n+#         return redirect('home')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739874589908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n         return redirect('favoris')\r\n \r\n \r\n @login_required\r\n-def add_to_cart_favoris(request, product_id):\r\n+def add_to_cart_home(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n@@ -92,12 +92,12 @@\n             )\r\n             \r\n         messages.success(request, f\"{product} a ete ajouter avec success \")\r\n \r\n-        return redirect('favoris')\r\n+        return redirect('Home')\r\n         \r\n     except Product.DoesNotExist:\r\n-        return redirect('favoris') \r\n+        return redirect('Home') \r\n     \r\n     \r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n@@ -126,105 +126,5 @@\n             \r\n #         return redirect('cart_view')\r\n         \r\n #     except CartItem.DoesNotExist:\r\n-#         return redirect('home')\n-from django.shortcuts import get_object_or_404, redirect, render\r\n-from e_commerce.models import *\r\n-from django.contrib.auth.decorators import login_required\r\n-from decimal import Decimal\r\n-from django.contrib import messages\r\n-\r\n-@login_required\r\n-def cart_view(request):\r\n-    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n-    try:\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        cart_items = cart.cart_items.select_related('product').all()\r\n-        \r\n-        # Calculer les totaux pour chaque article\r\n-        for item in cart_items:\r\n-            item.total = item.product.price * item.quantity\r\n-        \r\n-        # Calculer le sous-total\r\n-        subtotal = sum(item.total for item in cart_items)\r\n-        \r\n-        context = {\r\n-            'cart_items': cart_items,\r\n-            'subtotal': subtotal,\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n-        }\r\n-        \r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n-        \r\n-    except ShoppingCart.DoesNotExist:\r\n-        # If no active cart exists, show empty cart\r\n-        context = {\r\n-            'cart_items': [],\r\n-            'subtotal': Decimal('0.00'),\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': Decimal('0.00')\r\n-        }\r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n-@login_required\r\n-def add_to_cart_favoris(request, product_id):\r\n-    \"\"\"View to add a product to the cart\"\"\"\r\n-    try:\r\n-        product = Product.objects.get(id=product_id)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n-        \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        messages.success(request, f\"{product} a ete ajouter avec success \")\r\n-\r\n-        return redirect('favoris')\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return redirect('favoris')\r\n-    \r\n-    \r\n-    \r\n-# @login_required\r\n-# def remove_from_cart(request, cart_item_id):\r\n-#     \"\"\"View to remove a product from the cart\"\"\"\r\n-#     try:\r\n-#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-#         cart_item.delete()\r\n-#         return redirect('cart_view')\r\n-        \r\n-#     except CartItem.DoesNotExist:\r\n-#         return redirect('home')\r\n-    \r\n-# @login_required\r\n-# def update_cart_item(request, cart_item_id):\r\n-#     \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n-#     try:\r\n-#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-#         quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-#         if quantity < 1:\r\n-#             cart_item.delete()\r\n-            \r\n-#         else:\r\n-#             cart_item.quantity = quantity\r\n-#             cart_item.save()\r\n-            \r\n-#         return redirect('cart_view')\r\n-        \r\n-#     except CartItem.DoesNotExist:\r\n #         return redirect('home')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739874807979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n                 cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n-        messages.success(request, f\"{product} a ete ajouter avec success \")\r\n+        messages.success(request, f\"{product} ajouter au panier \")\r\n \r\n         return redirect('favoris')\r\n         \r\n     except Product.DoesNotExist:\r\n@@ -90,9 +90,9 @@\n                 cart=cart,\r\n                 quantity=1\r\n             )\r\n             \r\n-        messages.success(request, f\"{product} a ete ajouter avec success \")\r\n+        messages.success(request, f\"{product}  ajouter au panier \")\r\n \r\n         return redirect('Home')\r\n         \r\n     except Product.DoesNotExist:\r\n"
                },
                {
                    "date": 1739875335362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,41 @@\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('Home') \r\n     \r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_product(request, product_id):\r\n+    \"\"\"View to add a product to the cart\"\"\"\r\n+    try:\r\n+        product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        \r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n+        \r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        messages.success(request, f\"{product}  ajouter au panier \")\r\n+\r\n+        return redirect('Home')\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return redirect('Home') \r\n     \r\n+\r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n #     \"\"\"View to remove a product from the cart\"\"\"\r\n #     try:\r\n"
                },
                {
                    "date": 1739875456427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,12 +124,12 @@\n             )\r\n             \r\n         messages.success(request, f\"{product}  ajouter au panier \")\r\n \r\n-        return redirect('Home')\r\n+        return redirect('product')\r\n         \r\n     except Product.DoesNotExist:\r\n-        return redirect('Home') \r\n+        return redirect('product') \r\n     \r\n \r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n"
                },
                {
                    "date": 1739875543843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,10 +128,39 @@\n         return redirect('product')\r\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('product') \r\n-    \r\n \r\n+@login_required\r\n+def add_to_cart_detail(request, product_id):\r\n+    \"\"\"View to add a product to the cart\"\"\"\r\n+    try:\r\n+        product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        \r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n+        \r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        messages.success(request, f\"{product}  ajouter au panier \")\r\n+\r\n+        return redirect('product')\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return redirect('product') \r\n+\r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n #     \"\"\"View to remove a product from the cart\"\"\"\r\n #     try:\r\n"
                },
                {
                    "date": 1739875592823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,13 +154,42 @@\n             )\r\n             \r\n         messages.success(request, f\"{product}  ajouter au panier \")\r\n \r\n-        return redirect('product')\r\n+        return redirect('Detail')\r\n         \r\n     except Product.DoesNotExist:\r\n-        return redirect('product') \r\n+        return redirect('Detail') \r\n \r\n+@login_required\r\n+def add_to_cart_detail(request, product_id):\r\n+    \"\"\"View to add a product to the cart\"\"\"\r\n+    try:\r\n+        product = Product.objects.get(id=product_id)\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        \r\n+        # Check if the product already exists in the cart\r\n+        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n+        \r\n+        if existing_item:\r\n+            # If the product exists, increase the quantity\r\n+            existing_item.quantity += 1\r\n+            existing_item.save()\r\n+            \r\n+        else:\r\n+            # If the product doesn't exist, create a new CartItem\r\n+            CartItem.objects.create(\r\n+                product=product,\r\n+                cart=cart,\r\n+                quantity=1\r\n+            )\r\n+            \r\n+        messages.success(request, f\"{product}  ajouter au panier \")\r\n+\r\n+        return redirect('Detail')\r\n+        \r\n+    except Product.DoesNotExist:\r\n+        return redirect('Detail') \r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n #     \"\"\"View to remove a product from the cart\"\"\"\r\n #     try:\r\n"
                },
                {
                    "date": 1739875620570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n     except Product.DoesNotExist:\r\n         return redirect('Detail') \r\n \r\n @login_required\r\n-def add_to_cart_detail(request, product_id):\r\n+def add_to_cart_detail_product(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n         product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n@@ -184,12 +184,12 @@\n             )\r\n             \r\n         messages.success(request, f\"{product}  ajouter au panier \")\r\n \r\n-        return redirect('Detail')\r\n+        return redirect('Detail_product')\r\n         \r\n     except Product.DoesNotExist:\r\n-        return redirect('Detail') \r\n+        return redirect('Detail_product') \r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n #     \"\"\"View to remove a product from the cart\"\"\"\r\n #     try:\r\n"
                },
                {
                    "date": 1739875878850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,12 +130,12 @@\n     except Product.DoesNotExist:\r\n         return redirect('product') \r\n \r\n @login_required\r\n-def add_to_cart_detail(request, product_id):\r\n+def add_to_cart_detail(request, pk):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n-        product = Product.objects.get(id=product_id)\r\n+        product = Product.objects.get(id=pk)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n         existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n@@ -160,12 +160,12 @@\n     except Product.DoesNotExist:\r\n         return redirect('Detail') \r\n \r\n @login_required\r\n-def add_to_cart_detail_product(request, product_id):\r\n+def add_to_cart_detail_product(request, pk):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n-        product = Product.objects.get(id=product_id)\r\n+        product = Product.objects.get(id=pk)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n         existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n"
                },
                {
                    "date": 1739876338992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,12 +130,12 @@\n     except Product.DoesNotExist:\r\n         return redirect('product') \r\n \r\n @login_required\r\n-def add_to_cart_detail(request, pk):\r\n+def add_to_cart_detail(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n-        product = Product.objects.get(id=pk)\r\n+        product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n         existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n@@ -160,12 +160,12 @@\n     except Product.DoesNotExist:\r\n         return redirect('Detail') \r\n \r\n @login_required\r\n-def add_to_cart_detail_product(request, pk):\r\n+def add_to_cart_detail_product(request, product_id):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n-        product = Product.objects.get(id=pk)\r\n+        product = Product.objects.get(id=product_id)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n         existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n"
                },
                {
                    "date": 1739876622249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,12 +130,12 @@\n     except Product.DoesNotExist:\r\n         return redirect('product') \r\n \r\n @login_required\r\n-def add_to_cart_detail(request, product_id):\r\n+def add_to_cart_detail(request, pk):\r\n     \"\"\"View to add a product to the cart\"\"\"\r\n     try:\r\n-        product = Product.objects.get(id=product_id)\r\n+        product = Product.objects.get(id=pk)\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n         \r\n         # Check if the product already exists in the cart\r\n         existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n"
                },
                {
                    "date": 1739876705225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n             )\r\n             \r\n         messages.success(request, f\"{product}  ajouter au panier \")\r\n \r\n-        return redirect('Detail')\r\n+        return redirect('Home')\r\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('Detail') \r\n \r\n"
                },
                {
                    "date": 1739876866260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,67 +129,9 @@\n         \r\n     except Product.DoesNotExist:\r\n         return redirect('product') \r\n \r\n-@login_required\r\n-def add_to_cart_detail(request, pk):\r\n-    \"\"\"View to add a product to the cart\"\"\"\r\n-    try:\r\n-        product = Product.objects.get(id=pk)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n-        \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        messages.success(request, f\"{product}  ajouter au panier \")\r\n \r\n-        return redirect('Home')\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return redirect('Detail') \r\n-\r\n-@login_required\r\n-def add_to_cart_detail_product(request, product_id):\r\n-    \"\"\"View to add a product to the cart\"\"\"\r\n-    try:\r\n-        product = Product.objects.get(id=product_id)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n-        \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        messages.success(request, f\"{product}  ajouter au panier \")\r\n-\r\n-        return redirect('Detail_product')\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return redirect('Detail_product') \r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n #     \"\"\"View to remove a product from the cart\"\"\"\r\n #     try:\r\n"
                },
                {
                    "date": 1739876980944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,102 +36,51 @@\n             'total': Decimal('0.00')\r\n         }\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n+ \r\n+ \r\n+def add_to_cart(request, product_id, redirect_url):\r\n+    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n+    # Récupération du produit ou 404 si non trouvé\r\n+    product = get_object_or_404(Product, id=product_id)\r\n+\r\n+    # Récupération ou création du panier actif pour l'utilisateur\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+\r\n+    # Vérifier si l'élément existe déjà dans le panier\r\n+    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n+\r\n+    if existing_item:\r\n+        # Si l'élément existe, augmenter la quantité\r\n+        existing_item.quantity += 1\r\n+        existing_item.save()\r\n+    else:\r\n+        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n+        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n+\r\n+    # Affichage d'un message de succès\r\n+    messages.success(request, f\"{product} ajouté au panier\")\r\n+\r\n+    # Redirection vers la page spécifiée\r\n+    return redirect(redirect_url)\r\n+\r\n+\r\n @login_required\r\n def add_to_cart_favoris(request, product_id):\r\n-    \"\"\"View to add a product to the cart\"\"\"\r\n-    try:\r\n-        product = Product.objects.get(id=product_id)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n-        \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        messages.success(request, f\"{product} ajouter au panier \")\r\n+    return add_to_cart(request, product_id, 'favoris')\r\n \r\n-        return redirect('favoris')\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return redirect('favoris')\r\n \r\n-\r\n @login_required\r\n def add_to_cart_home(request, product_id):\r\n-    \"\"\"View to add a product to the cart\"\"\"\r\n-    try:\r\n-        product = Product.objects.get(id=product_id)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n-        \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        messages.success(request, f\"{product}  ajouter au panier \")\r\n+    return add_to_cart(request, product_id, 'Home')\r\n \r\n-        return redirect('Home')\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return redirect('Home') \r\n-    \r\n \r\n-\r\n @login_required\r\n def add_to_cart_product(request, product_id):\r\n-    \"\"\"View to add a product to the cart\"\"\"\r\n-    try:\r\n-        product = Product.objects.get(id=product_id)\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        \r\n-        # Check if the product already exists in the cart\r\n-        existing_item = CartItem.objects.filter(product=product,  cart=cart).first()\r\n-        \r\n-        if existing_item:\r\n-            # If the product exists, increase the quantity\r\n-            existing_item.quantity += 1\r\n-            existing_item.save()\r\n-            \r\n-        else:\r\n-            # If the product doesn't exist, create a new CartItem\r\n-            CartItem.objects.create(\r\n-                product=product,\r\n-                cart=cart,\r\n-                quantity=1\r\n-            )\r\n-            \r\n-        messages.success(request, f\"{product}  ajouter au panier \")\r\n+    return add_to_cart(request, product_id, 'product')\r\n \r\n-        return redirect('product')\r\n-        \r\n-    except Product.DoesNotExist:\r\n-        return redirect('product') \r\n \r\n-\r\n # @login_required\r\n # def remove_from_cart(request, cart_item_id):\r\n #     \"\"\"View to remove a product from the cart\"\"\"\r\n #     try:\r\n"
                },
                {
                    "date": 1739877147560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,34 +78,5 @@\n @login_required\r\n def add_to_cart_product(request, product_id):\r\n     return add_to_cart(request, product_id, 'product')\r\n \r\n-\r\n-# @login_required\r\n-# def remove_from_cart(request, cart_item_id):\r\n-#     \"\"\"View to remove a product from the cart\"\"\"\r\n-#     try:\r\n-#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-#         cart_item.delete()\r\n-#         return redirect('cart_view')\r\n-        \r\n-#     except CartItem.DoesNotExist:\r\n-#         return redirect('home')\r\n-    \r\n-# @login_required\r\n-# def update_cart_item(request, cart_item_id):\r\n-#     \"\"\"View to update the quantity of a product in the cart\"\"\"\r\n-#     try:\r\n-#         cart_item = get_object_or_404(CartItem, id=cart_item_id, shopping_cart__user=request.user, shopping_cart__is_active=True)\r\n-#         quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-#         if quantity < 1:\r\n-#             cart_item.delete()\r\n-            \r\n-#         else:\r\n-#             cart_item.quantity = quantity\r\n-#             cart_item.save()\r\n-            \r\n-#         return redirect('cart_view')\r\n-        \r\n-#     except CartItem.DoesNotExist:\r\n-#         return redirect('home')\n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739877868576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,39 +5,30 @@\n from django.contrib import messages\r\n \r\n @login_required\r\n def cart_view(request):\r\n-    \"\"\"View to display cart contents and handle cart updates\"\"\"\r\n-    try:\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        cart_items = cart.cart_items.select_related('product').all()\r\n+    \r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = cart.cart_items.select_related('product').all()\r\n+    number =CartItem.objects.count\r\n+    # Calculer les totaux pour chaque article\r\n+    for item in cart_items:\r\n+        item.total = item.product.price * item.quantity\r\n+    \r\n+    # Calculer le sous-total\r\n+    subtotal = sum(item.total for item in cart_items)\r\n+    \r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'shipping_cost': Decimal('0.00'),\r\n+        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n+        'number': number,\r\n         \r\n-        # Calculer les totaux pour chaque article\r\n-        for item in cart_items:\r\n-            item.total = item.product.price * item.quantity\r\n-        \r\n-        # Calculer le sous-total\r\n-        subtotal = sum(item.total for item in cart_items)\r\n-        \r\n-        context = {\r\n-            'cart_items': cart_items,\r\n-            'subtotal': subtotal,\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': subtotal  # Ajouter les frais d'expédition si nécessaire\r\n-        }\r\n-        \r\n-        return render(request, 'home/ShoppingCart.html', context)\r\n-        \r\n-    except ShoppingCart.DoesNotExist:\r\n-        # If no active cart exists, show empty cart\r\n-        context = {\r\n-            'cart_items': [],\r\n-            'subtotal': Decimal('0.00'),\r\n-            'shipping_cost': Decimal('0.00'),\r\n-            'total': Decimal('0.00')\r\n-        }\r\n+    }\r\n+    \r\n     return render(request, 'home/ShoppingCart.html', context)\r\n-\r\n+     \r\n  \r\n  \r\n def add_to_cart(request, product_id, redirect_url):\r\n     \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n"
                },
                {
                    "date": 1739879741336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,5 +69,35 @@\n @login_required\r\n def add_to_cart_product(request, product_id):\r\n     return add_to_cart(request, product_id, 'product')\r\n \r\n- \n\\ No newline at end of file\n+\r\n+\r\n+class CartItem(BaseModel):\r\n+    \r\n+    \"\"\"\r\n+    Model representing an item within a shopping cart.\r\n+    - `cart`: Foreign key linking the item to a specific shopping cart.\r\n+    - `product`: Foreign key linking the item to a specific product.\r\n+    - `quantity`: Quantity of the product within the cart.\r\n+    \"\"\"\r\n+    \r\n+    cart = models.ForeignKey(\r\n+        ShoppingCart, \r\n+        related_name='cart_items', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Shopping Cart\")\r\n+    )\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"Product\")\r\n+    )\r\n+    quantity = models.PositiveIntegerField(\r\n+        _(\"Product Quantity\"), \r\n+        default=1\r\n+    )\r\n+\r\n+    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n+    \r\n+    def __str__(self):\r\n+        return f\"{self.product.name} - {self.quantity}\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739879765211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,33 +71,4 @@\n     return add_to_cart(request, product_id, 'product')\r\n \r\n \r\n \r\n-class CartItem(BaseModel):\r\n-    \r\n-    \"\"\"\r\n-    Model representing an item within a shopping cart.\r\n-    - `cart`: Foreign key linking the item to a specific shopping cart.\r\n-    - `product`: Foreign key linking the item to a specific product.\r\n-    - `quantity`: Quantity of the product within the cart.\r\n-    \"\"\"\r\n-    \r\n-    cart = models.ForeignKey(\r\n-        ShoppingCart, \r\n-        related_name='cart_items', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Shopping Cart\")\r\n-    )\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"Product\")\r\n-    )\r\n-    quantity = models.PositiveIntegerField(\r\n-        _(\"Product Quantity\"), \r\n-        default=1\r\n-    )\r\n-\r\n-    history = HistoricalRecords(table_name='CartItem_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n-    \r\n-    def __str__(self):\r\n-        return f\"{self.product.name} - {self.quantity}\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739879777299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,4 +71,31 @@\n     return add_to_cart(request, product_id, 'product')\r\n \r\n \r\n \r\n+from django.http import JsonResponse\r\n+from django.views.decorators.http import require_POST\r\n+from django.views.decorators.csrf import csrf_exempt\r\n+import json\r\n+\r\n+@require_POST\r\n+@csrf_exempt\r\n+def update_cart(request):\r\n+    try:\r\n+        data = json.loads(request.body)\r\n+        item_id = data.get('item_id')\r\n+        quantity = int(data.get('quantity', 1))\r\n+        \r\n+        cart_item = CartItem.objects.get(id=item_id)\r\n+        cart_item.quantity = quantity\r\n+        cart_item.save()\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'message': 'Quantité mise à jour',\r\n+            'new_total': cart_item.product.price * quantity\r\n+        })\r\n+    except Exception as e:\r\n+        return JsonResponse({\r\n+            'status': 'error',\r\n+            'message': str(e)\r\n+        }, status=400)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739899832941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+from django.shortcuts import get_object_or_404, redirect, render\r\n+from e_commerce.models import *\r\n+from django.contrib.auth.decorators import login_required\r\n+from decimal import Decimal\r\n+from django.contrib import messages\r\n+\r\n+@login_required\r\n+def cart_view(request):\r\n+    \r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = cart.cart_items.select_related('product').all()\r\n+    number =CartItem.objects.count\r\n+    # Calculer les totaux pour chaque article\r\n+    for item in cart_items:\r\n+        item.total = item.product.price * item.quantity\r\n+    \r\n+    # Calculer le sous-total\r\n+    subtotal = sum(item.total for item in cart_items)\r\n+    \r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'shipping_cost': Decimal('0.00'),\r\n+        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n+        'number': number,\r\n+        \r\n+    }\r\n+    \r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+     \r\n+ \r\n+ \r\n+def add_to_cart(request, product_id, redirect_url):\r\n+    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n+    # Récupération du produit ou 404 si non trouvé\r\n+    product = get_object_or_404(Product, id=product_id)\r\n+\r\n+    # Récupération ou création du panier actif pour l'utilisateur\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+\r\n+    # Vérifier si l'élément existe déjà dans le panier\r\n+    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n+\r\n+    if existing_item:\r\n+        # Si l'élément existe, augmenter la quantité\r\n+        existing_item.quantity += 1\r\n+        existing_item.save()\r\n+    else:\r\n+        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n+        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n+\r\n+    # Affichage d'un message de succès\r\n+    messages.success(request, f\"{product} ajouté au panier\")\r\n+\r\n+    # Redirection vers la page spécifiée\r\n+    return redirect(redirect_url)\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_favoris(request, product_id):\r\n+    return add_to_cart(request, product_id, 'favoris')\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_home(request, product_id):\r\n+    return add_to_cart(request, product_id, 'Home')\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_product(request, product_id):\r\n+    return add_to_cart(request, product_id, 'product')\r\n+\r\n+\r\n+from django.shortcuts import get_object_or_404, redirect\r\n+from django.http import JsonResponse\r\n+from django.contrib import messages\r\n+\r\n+def update_cart_item_quantity(request):\r\n+    \"\"\"\r\n+    Update the quantity of a specific cart item via AJAX.\r\n+    Expects POST parameters: item_id and quantity\r\n+    \"\"\"\r\n+    if request.method == 'POST':\r\n+        item_id = request.POST.get('item_id')\r\n+        quantity = int(request.POST.get('quantity', 1))\r\n+        \r\n+        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n+        \r\n+        # Vérifier si la quantité demandée est disponible en stock\r\n+        if quantity > cart_item.product.stock_quantity:\r\n+            return JsonResponse({\r\n+                'status': 'error',\r\n+                'message': 'Quantité non disponible en stock'\r\n+            }, status=400)\r\n+        \r\n+        if quantity < 1:\r\n+            quantity = 1\r\n+        \r\n+        cart_item.quantity = quantity\r\n+        cart_item.calculate_total_price()  # Mettre à jour le prix total\r\n+        cart_item.save()\r\n+        \r\n+        # Calculer le nouveau sous-total du panier\r\n+        cart = cart_item.cart\r\n+        subtotal = sum(item.total_price for item in cart.cart_items.all())\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'item_total': cart_item.total_price,\r\n+            'subtotal': subtotal\r\n+        })\r\n+    \r\n+    return JsonResponse({'status': 'error'}, status=400)\r\n+\r\n+def remove_cart_item(request):\r\n+    \"\"\"\r\n+    Supprimer un élément spécifique du panier via AJAX.\r\n+    Attend le paramètre POST: item_id\r\n+    \"\"\"\r\n+    if request.method == 'POST':\r\n+        item_id = request.POST.get('item_id')\r\n+        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n+        \r\n+        cart = cart_item.cart\r\n+        cart_item.delete()\r\n+        \r\n+        # Calculer le nouveau sous-total\r\n+        subtotal = sum(item.total_price for item in cart.cart_items.all())\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'subtotal': subtotal\r\n+        })\r\n+    \r\n+    return JsonResponse({'status': 'error'}, status=400)\r\n+\r\n+def clear_cart(request):\r\n+    \"\"\"\r\n+    Vider complètement le panier via AJAX\r\n+    \"\"\"\r\n+    if request.method == 'POST':\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+        cart.cart_items.all().delete()\r\n+        \r\n+        return JsonResponse({\r\n+            'status': 'success',\r\n+            'subtotal': 0\r\n+        })\r\n+    \r\n+    return JsonResponse({'status': 'error'}, status=400)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739900141344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,182 +70,71 @@\n def add_to_cart_product(request, product_id):\r\n     return add_to_cart(request, product_id, 'product')\r\n \r\n \r\n+\r\n from django.shortcuts import get_object_or_404, redirect\r\n-from django.http import JsonResponse\r\n from django.contrib import messages\r\n+from django.urls import reverse\r\n+from django.views.decorators.http import require_http_methods\r\n \r\n-def update_cart_item_quantity(request):\r\n+@require_http_methods([\"GET\"])\r\n+def update_cart_item_quantity(request, item_id, quantity):\r\n     \"\"\"\r\n-    Update the quantity of a specific cart item via AJAX.\r\n-    Expects POST parameters: item_id and quantity\r\n+    Met à jour la quantité d'un article dans le panier via URL\r\n+    Example URL: /cart/update/5/2/ (met à jour l'article 5 avec quantité 2)\r\n     \"\"\"\r\n-    if request.method == 'POST':\r\n-        item_id = request.POST.get('item_id')\r\n-        quantity = int(request.POST.get('quantity', 1))\r\n-        \r\n-        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n-        \r\n-        # Vérifier si la quantité demandée est disponible en stock\r\n-        if quantity > cart_item.product.stock_quantity:\r\n-            return JsonResponse({\r\n-                'status': 'error',\r\n-                'message': 'Quantité non disponible en stock'\r\n-            }, status=400)\r\n-        \r\n+    cart_item = get_object_or_404(CartItem, \r\n+                                 id=item_id, \r\n+                                 cart__user=request.user)\r\n+    \r\n+    try:\r\n+        quantity = int(quantity)\r\n         if quantity < 1:\r\n             quantity = 1\r\n-        \r\n+            messages.warning(request, \"La quantité minimum est 1\")\r\n+            \r\n+        # Vérifier le stock disponible\r\n+        if quantity > cart_item.product.stock_quantity:\r\n+            messages.error(request, \r\n+                         f\"Désolé, seulement {cart_item.product.stock_quantity} articles disponibles\")\r\n+            quantity = cart_item.product.stock_quantity\r\n+            \r\n         cart_item.quantity = quantity\r\n-        cart_item.calculate_total_price()  # Mettre à jour le prix total\r\n+        cart_item.calculate_total_price()\r\n         cart_item.save()\r\n         \r\n-        # Calculer le nouveau sous-total du panier\r\n-        cart = cart_item.cart\r\n-        subtotal = sum(item.total_price for item in cart.cart_items.all())\r\n+        messages.success(request, \"Quantité mise à jour avec succès\")\r\n         \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'item_total': cart_item.total_price,\r\n-            'subtotal': subtotal\r\n-        })\r\n+    except ValueError:\r\n+        messages.error(request, \"Quantité invalide\")\r\n     \r\n-    return JsonResponse({'status': 'error'}, status=400)\r\n+    return redirect('cart_detail')\r\n \r\n-def remove_cart_item(request):\r\n+@require_http_methods([\"GET\"])\r\n+def remove_cart_item(request, item_id):\r\n     \"\"\"\r\n-    Supprimer un élément spécifique du panier via AJAX.\r\n-    Attend le paramètre POST: item_id\r\n+    Supprime un article spécifique du panier\r\n+    Example URL: /cart/remove/5/\r\n     \"\"\"\r\n-    if request.method == 'POST':\r\n-        item_id = request.POST.get('item_id')\r\n-        cart_item = get_object_or_404(CartItem, id=item_id, cart__user=request.user)\r\n-        \r\n-        cart = cart_item.cart\r\n-        cart_item.delete()\r\n-        \r\n-        # Calculer le nouveau sous-total\r\n-        subtotal = sum(item.total_price for item in cart.cart_items.all())\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'subtotal': subtotal\r\n-        })\r\n+    cart_item = get_object_or_404(CartItem, \r\n+                                 id=item_id, \r\n+                                 cart__user=request.user)\r\n     \r\n-    return JsonResponse({'status': 'error'}, status=400)\r\n+    product_name = cart_item.product.name\r\n+    cart_item.delete()\r\n+    \r\n+    messages.success(request, f\"{product_name} a été retiré du panier\")\r\n+    return redirect('cart_detail')\r\n \r\n+@require_http_methods([\"GET\"])\r\n def clear_cart(request):\r\n     \"\"\"\r\n-    Vider complètement le panier via AJAX\r\n+    Vide complètement le panier\r\n+    Example URL: /cart/clear/\r\n     \"\"\"\r\n-    if request.method == 'POST':\r\n-        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-        cart.cart_items.all().delete()\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'subtotal': 0\r\n-        })\r\n-    \r\n-    return JsonResponse({'status': 'error'}, status=400)\n-from django.shortcuts import get_object_or_404, redirect, render\r\n-from e_commerce.models import *\r\n-from django.contrib.auth.decorators import login_required\r\n-from decimal import Decimal\r\n-from django.contrib import messages\r\n-\r\n-@login_required\r\n-def cart_view(request):\r\n-    \r\n     cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = cart.cart_items.select_related('product').all()\r\n-    number =CartItem.objects.count\r\n-    # Calculer les totaux pour chaque article\r\n-    for item in cart_items:\r\n-        item.total = item.product.price * item.quantity\r\n+    cart.cart_items.all().delete()\r\n     \r\n-    # Calculer le sous-total\r\n-    subtotal = sum(item.total for item in cart_items)\r\n-    \r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'shipping_cost': Decimal('0.00'),\r\n-        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n-        'number': number,\r\n-        \r\n-    }\r\n-    \r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-     \r\n- \r\n- \r\n-def add_to_cart(request, product_id, redirect_url):\r\n-    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n-    # Récupération du produit ou 404 si non trouvé\r\n-    product = get_object_or_404(Product, id=product_id)\r\n-\r\n-    # Récupération ou création du panier actif pour l'utilisateur\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-\r\n-    # Vérifier si l'élément existe déjà dans le panier\r\n-    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n-\r\n-    if existing_item:\r\n-        # Si l'élément existe, augmenter la quantité\r\n-        existing_item.quantity += 1\r\n-        existing_item.save()\r\n-    else:\r\n-        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n-        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n-\r\n-    # Affichage d'un message de succès\r\n-    messages.success(request, f\"{product} ajouté au panier\")\r\n-\r\n-    # Redirection vers la page spécifiée\r\n-    return redirect(redirect_url)\r\n-\r\n-\r\n-@login_required\r\n\\ No newline at end of file\n-def add_to_cart_favoris(request, product_id):\r\n-    return add_to_cart(request, product_id, 'favoris')\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_home(request, product_id):\r\n-    return add_to_cart(request, product_id, 'Home')\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_product(request, product_id):\r\n-    return add_to_cart(request, product_id, 'product')\r\n-\r\n-\r\n-\r\n-from django.http import JsonResponse\r\n-from django.views.decorators.http import require_POST\r\n-from django.views.decorators.csrf import csrf_exempt\r\n-import json\r\n-\r\n-@require_POST\r\n-@csrf_exempt\r\n-def update_cart(request):\r\n-    try:\r\n-        data = json.loads(request.body)\r\n-        item_id = data.get('item_id')\r\n-        quantity = int(data.get('quantity', 1))\r\n-        \r\n-        cart_item = CartItem.objects.get(id=item_id)\r\n-        cart_item.quantity = quantity\r\n-        cart_item.save()\r\n-        \r\n-        return JsonResponse({\r\n-            'status': 'success',\r\n-            'message': 'Quantité mise à jour',\r\n-            'new_total': cart_item.product.price * quantity\r\n-        })\r\n-    except Exception as e:\r\n-        return JsonResponse({\r\n-            'status': 'error',\r\n-            'message': str(e)\r\n-        }, status=400)\n+    messages.success(request, \"Votre panier a été vidé\")\r\n+    return redirect('cart_detail')\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739900216631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+from django.shortcuts import get_object_or_404, redirect, render\r\n+from e_commerce.models import *\r\n+from django.contrib.auth.decorators import login_required\r\n+from decimal import Decimal\r\n+from django.contrib import messages\r\n+\r\n+@login_required\r\n+def cart_view(request):\r\n+    \r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = cart.cart_items.select_related('product').all()\r\n+    number =CartItem.objects.count\r\n+    # Calculer les totaux pour chaque article\r\n+    for item in cart_items:\r\n+        item.total = item.product.price * item.quantity\r\n+    \r\n+    # Calculer le sous-total\r\n+    subtotal = sum(item.total for item in cart_items)\r\n+    \r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'shipping_cost': Decimal('0.00'),\r\n+        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n+        'number': number,\r\n+        \r\n+    }\r\n+    \r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+     \r\n+ \r\n+ \r\n+def add_to_cart(request, product_id, redirect_url):\r\n+    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n+    # Récupération du produit ou 404 si non trouvé\r\n+    product = get_object_or_404(Product, id=product_id)\r\n+\r\n+    # Récupération ou création du panier actif pour l'utilisateur\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+\r\n+    # Vérifier si l'élément existe déjà dans le panier\r\n+    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n+\r\n+    if existing_item:\r\n+        # Si l'élément existe, augmenter la quantité\r\n+        existing_item.quantity += 1\r\n+        existing_item.save()\r\n+    else:\r\n+        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n+        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n+\r\n+    # Affichage d'un message de succès\r\n+    messages.success(request, f\"{product} ajouté au panier\")\r\n+\r\n+    # Redirection vers la page spécifiée\r\n+    return redirect(redirect_url)\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_favoris(request, product_id):\r\n+    return add_to_cart(request, product_id, 'favoris')\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_home(request, product_id):\r\n+    return add_to_cart(request, product_id, 'Home')\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_product(request, product_id):\r\n+    return add_to_cart(request, product_id, 'product')\r\n+\r\n+\r\n+\r\n+from django.shortcuts import get_object_or_404, redirect\r\n+from django.contrib import messages\r\n+from django.urls import reverse\r\n+from django.views.decorators.http import require_http_methods\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def update_cart_item_quantity(request, item_id, quantity):\r\n+    \"\"\"\r\n+    Met à jour la quantité d'un article dans le panier via URL\r\n+    Example URL: /cart/update/5/2/ (met à jour l'article 5 avec quantité 2)\r\n+    \"\"\"\r\n+    cart_item = get_object_or_404(CartItem, \r\n+                                 id=item_id, \r\n+                                 cart__user=request.user)\r\n+    \r\n+    try:\r\n+        quantity = int(quantity)\r\n+        if quantity < 1:\r\n+            quantity = 1\r\n+            messages.warning(request, \"La quantité minimum est 1\")\r\n+            \r\n+        # Vérifier le stock disponible\r\n+        if quantity > cart_item.product.stock_quantity:\r\n+            messages.error(request, \r\n+                         f\"Désolé, seulement {cart_item.product.stock_quantity} articles disponibles\")\r\n+            quantity = cart_item.product.stock_quantity\r\n+            \r\n+        cart_item.quantity = quantity\r\n+        cart_item.calculate_total_price()\r\n+        cart_item.save()\r\n+        \r\n+        messages.success(request, \"Quantité mise à jour avec succès\")\r\n+        \r\n+    except ValueError:\r\n+        messages.error(request, \"Quantité invalide\")\r\n+    \r\n+    return redirect('cart')\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def remove_cart_item(request, item_id):\r\n+    \"\"\"\r\n+    Supprime un article spécifique du panier\r\n+    Example URL: /cart/remove/5/\r\n+    \"\"\"\r\n+    cart_item = get_object_or_404(CartItem, \r\n+                                 id=item_id, \r\n+                                 cart__user=request.user)\r\n+    \r\n+    product_name = cart_item.product.name\r\n+    cart_item.delete()\r\n+    \r\n+    messages.success(request, f\"{product_name} a été retiré du panier\")\r\n+    return redirect('cart')\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def clear_cart(request):\r\n+    \"\"\"\r\n+    Vide complètement le panier\r\n+    Example URL: /cart/clear/\r\n+    \"\"\"\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart.cart_items.all().delete()\r\n+    \r\n+    messages.success(request, \"Votre panier a été vidé\")\r\n+    return redirect('cart')\r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1739900617831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,20 +75,21 @@\n from django.shortcuts import get_object_or_404, redirect\r\n from django.contrib import messages\r\n from django.urls import reverse\r\n from django.views.decorators.http import require_http_methods\r\n+import uuid\r\n \r\n @require_http_methods([\"GET\"])\r\n def update_cart_item_quantity(request, item_id, quantity):\r\n     \"\"\"\r\n     Met à jour la quantité d'un article dans le panier via URL\r\n-    Example URL: /cart/update/5/2/ (met à jour l'article 5 avec quantité 2)\r\n+    L'item_id est maintenant un UUID\r\n     \"\"\"\r\n-    cart_item = get_object_or_404(CartItem, \r\n-                                 id=item_id, \r\n-                                 cart__user=request.user)\r\n-    \r\n     try:\r\n+        cart_item = get_object_or_404(CartItem, \r\n+                                     id=item_id, \r\n+                                     cart__user=request.user)\r\n+        \r\n         quantity = int(quantity)\r\n         if quantity < 1:\r\n             quantity = 1\r\n             messages.warning(request, \"La quantité minimum est 1\")\r\n@@ -106,35 +107,39 @@\n         messages.success(request, \"Quantité mise à jour avec succès\")\r\n         \r\n     except ValueError:\r\n         messages.error(request, \"Quantité invalide\")\r\n+    except uuid.uuid4:\r\n+        messages.error(request, \"Article non trouvé\")\r\n     \r\n     return redirect('cart')\r\n \r\n @require_http_methods([\"GET\"])\r\n def remove_cart_item(request, item_id):\r\n     \"\"\"\r\n     Supprime un article spécifique du panier\r\n-    Example URL: /cart/remove/5/\r\n+    L'item_id est maintenant un UUID\r\n     \"\"\"\r\n-    cart_item = get_object_or_404(CartItem, \r\n-                                 id=item_id, \r\n-                                 cart__user=request.user)\r\n+    try:\r\n+        cart_item = get_object_or_404(CartItem, \r\n+                                     id=item_id, \r\n+                                     cart__user=request.user)\r\n+        \r\n+        product_name = cart_item.product.name\r\n+        cart_item.delete()\r\n+        \r\n+        messages.success(request, f\"{product_name} a été retiré du panier\")\r\n+    except uuid.uuid4:\r\n+        messages.error(request, \"Article non trouvé\")\r\n     \r\n-    product_name = cart_item.product.name\r\n-    cart_item.delete()\r\n-    \r\n-    messages.success(request, f\"{product_name} a été retiré du panier\")\r\n\\ No newline at end of file\n     return redirect('cart')\r\n \r\n @require_http_methods([\"GET\"])\r\n def clear_cart(request):\r\n     \"\"\"\r\n     Vide complètement le panier\r\n-    Example URL: /cart/clear/\r\n     \"\"\"\r\n     cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n     cart.cart_items.all().delete()\r\n     \r\n     messages.success(request, \"Votre panier a été vidé\")\r\n-    return redirect('cart')\r\n- \n+    return redirect('cart')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739901535537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,145 +141,5 @@\n     cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n     cart.cart_items.all().delete()\r\n     \r\n     messages.success(request, \"Votre panier a été vidé\")\r\n-    return redirect('cart')\n-from django.shortcuts import get_object_or_404, redirect, render\r\n-from e_commerce.models import *\r\n-from django.contrib.auth.decorators import login_required\r\n-from decimal import Decimal\r\n-from django.contrib import messages\r\n-\r\n-@login_required\r\n-def cart_view(request):\r\n-    \r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = cart.cart_items.select_related('product').all()\r\n-    number =CartItem.objects.count\r\n-    # Calculer les totaux pour chaque article\r\n-    for item in cart_items:\r\n-        item.total = item.product.price * item.quantity\r\n-    \r\n-    # Calculer le sous-total\r\n-    subtotal = sum(item.total for item in cart_items)\r\n-    \r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'shipping_cost': Decimal('0.00'),\r\n-        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n-        'number': number,\r\n-        \r\n-    }\r\n-    \r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-     \r\n- \r\n- \r\n-def add_to_cart(request, product_id, redirect_url):\r\n-    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n-    # Récupération du produit ou 404 si non trouvé\r\n-    product = get_object_or_404(Product, id=product_id)\r\n-\r\n-    # Récupération ou création du panier actif pour l'utilisateur\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-\r\n-    # Vérifier si l'élément existe déjà dans le panier\r\n-    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n-\r\n-    if existing_item:\r\n-        # Si l'élément existe, augmenter la quantité\r\n-        existing_item.quantity += 1\r\n-        existing_item.save()\r\n-    else:\r\n-        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n-        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n-\r\n-    # Affichage d'un message de succès\r\n-    messages.success(request, f\"{product} ajouté au panier\")\r\n-\r\n-    # Redirection vers la page spécifiée\r\n-    return redirect(redirect_url)\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_favoris(request, product_id):\r\n-    return add_to_cart(request, product_id, 'favoris')\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_home(request, product_id):\r\n-    return add_to_cart(request, product_id, 'Home')\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_product(request, product_id):\r\n-    return add_to_cart(request, product_id, 'product')\r\n-\r\n-\r\n-\r\n-from django.shortcuts import get_object_or_404, redirect\r\n-from django.contrib import messages\r\n-from django.urls import reverse\r\n-from django.views.decorators.http import require_http_methods\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def update_cart_item_quantity(request, item_id, quantity):\r\n-    \"\"\"\r\n-    Met à jour la quantité d'un article dans le panier via URL\r\n-    Example URL: /cart/update/5/2/ (met à jour l'article 5 avec quantité 2)\r\n-    \"\"\"\r\n-    cart_item = get_object_or_404(CartItem, \r\n-                                 id=item_id, \r\n-                                 cart__user=request.user)\r\n-    \r\n-    try:\r\n-        quantity = int(quantity)\r\n-        if quantity < 1:\r\n-            quantity = 1\r\n-            messages.warning(request, \"La quantité minimum est 1\")\r\n-            \r\n-        # Vérifier le stock disponible\r\n-        if quantity > cart_item.product.stock_quantity:\r\n-            messages.error(request, \r\n-                         f\"Désolé, seulement {cart_item.product.stock_quantity} articles disponibles\")\r\n-            quantity = cart_item.product.stock_quantity\r\n-            \r\n-        cart_item.quantity = quantity\r\n-        cart_item.calculate_total_price()\r\n-        cart_item.save()\r\n-        \r\n-        messages.success(request, \"Quantité mise à jour avec succès\")\r\n-        \r\n-    except ValueError:\r\n-        messages.error(request, \"Quantité invalide\")\r\n-    \r\n-    return redirect('cart_detail')\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def remove_cart_item(request, item_id):\r\n-    \"\"\"\r\n-    Supprime un article spécifique du panier\r\n-    Example URL: /cart/remove/5/\r\n-    \"\"\"\r\n-    cart_item = get_object_or_404(CartItem, \r\n-                                 id=item_id, \r\n-                                 cart__user=request.user)\r\n-    \r\n-    product_name = cart_item.product.name\r\n-    cart_item.delete()\r\n-    \r\n-    messages.success(request, f\"{product_name} a été retiré du panier\")\r\n-    return redirect('cart_detail')\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def clear_cart(request):\r\n-    \"\"\"\r\n-    Vide complètement le panier\r\n-    Example URL: /cart/clear/\r\n-    \"\"\"\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart.cart_items.all().delete()\r\n-    \r\n-    messages.success(request, \"Votre panier a été vidé\")\r\n-    return redirect('cart_detail')\r\n- \n\\ No newline at end of file\n+    return redirect('cart')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739901897875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+from django.shortcuts import get_object_or_404, redirect, render\r\n+from e_commerce.models import *\r\n+from django.contrib.auth.decorators import login_required\r\n+from decimal import Decimal\r\n+from django.contrib import messages\r\n+\r\n+@login_required\r\n+def cart_view(request):\r\n+    \r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = cart.cart_items.select_related('product').all()\r\n+    number =CartItem.objects.count\r\n+    # Calculer les totaux pour chaque article\r\n+    for item in cart_items:\r\n+        item.total = item.product.price * item.quantity\r\n+    \r\n+    # Calculer le sous-total\r\n+    subtotal = sum(item.total for item in cart_items)\r\n+    \r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'shipping_cost': Decimal('0.00'),\r\n+        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n+        'number': number,\r\n+        \r\n+    }\r\n+    \r\n+    return render(request, 'home/ShoppingCart.html', context)\r\n+     \r\n+ \r\n+ \r\n+def add_to_cart(request, product_id, redirect_url):\r\n+    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n+    # Récupération du produit ou 404 si non trouvé\r\n+    product = get_object_or_404(Product, id=product_id)\r\n+\r\n+    # Récupération ou création du panier actif pour l'utilisateur\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+\r\n+    # Vérifier si l'élément existe déjà dans le panier\r\n+    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n+\r\n+    if existing_item:\r\n+        # Si l'élément existe, augmenter la quantité\r\n+        existing_item.quantity += 1\r\n+        existing_item.save()\r\n+    else:\r\n+        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n+        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n+\r\n+    # Affichage d'un message de succès\r\n+    messages.success(request, f\"{product} ajouté au panier\")\r\n+\r\n+    # Redirection vers la page spécifiée\r\n+    return redirect(redirect_url)\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_favoris(request, product_id):\r\n+    return add_to_cart(request, product_id, 'favoris')\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_home(request, product_id):\r\n+    return add_to_cart(request, product_id, 'Home')\r\n+\r\n+\r\n+@login_required\r\n+def add_to_cart_product(request, product_id):\r\n+    return add_to_cart(request, product_id, 'product')\r\n+\r\n+\r\n+\r\n+from django.shortcuts import get_object_or_404, redirect\r\n+from django.contrib import messages\r\n+from django.urls import reverse\r\n+from django.views.decorators.http import require_http_methods\r\n+import uuid\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def update_cart_item_quantity(request, item_id, quantity):\r\n+    \"\"\"\r\n+    Met à jour la quantité d'un article dans le panier via URL\r\n+    L'item_id est maintenant un UUID\r\n+    \"\"\"\r\n+    try:\r\n+        cart_item = get_object_or_404(CartItem, \r\n+                                     id=item_id, \r\n+                                     cart__user=request.user)\r\n+        \r\n+        quantity = int(quantity)\r\n+        if quantity < 1:\r\n+            quantity = 1\r\n+            messages.warning(request, \"La quantité minimum est 1\")\r\n+            \r\n+        # Vérifier le stock disponible\r\n+        if quantity > cart_item.product.stock_quantity:\r\n+            messages.error(request, \r\n+                         f\"Désolé, seulement {cart_item.product.stock_quantity} articles disponibles\")\r\n+            quantity = cart_item.product.stock_quantity\r\n+            \r\n+        cart_item.quantity = quantity\r\n+        cart_item.calculate_total_price()\r\n+        cart_item.save()\r\n+        \r\n+        messages.success(request, \"Quantité mise à jour avec succès\")\r\n+        \r\n+    except ValueError:\r\n+        messages.error(request, \"Quantité invalide\")\r\n+    except uuid.uuid4:\r\n+        messages.error(request, \"Article non trouvé\")\r\n+    \r\n+    return redirect('cart',item_id=item_id, quantity=quantity)\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def remove_cart_item(request, item_id):\r\n+    \"\"\"\r\n+    Supprime un article spécifique du panier\r\n+    L'item_id est maintenant un UUID\r\n+    \"\"\"\r\n+    try:\r\n+        cart_item = get_object_or_404(CartItem, \r\n+                                     id=item_id, \r\n+                                     cart__user=request.user)\r\n+        \r\n+        product_name = cart_item.product.name\r\n+        cart_item.delete()\r\n+        \r\n+        messages.success(request, f\"{product_name} a été retiré du panier\")\r\n+    except uuid.uuid4:\r\n+        messages.error(request, \"Article non trouvé\")\r\n+    \r\n+    return redirect('cart')\r\n+\r\n+@require_http_methods([\"GET\"])\r\n+def clear_cart(request):\r\n+    \"\"\"\r\n+    Vide complètement le panier\r\n+    \"\"\"\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart.cart_items.all().delete()\r\n+    \r\n+    messages.success(request, \"Votre panier a été vidé\")\r\n+    return redirect('cart')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739902070273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n         messages.error(request, \"Quantité invalide\")\r\n     except uuid.uuid4:\r\n         messages.error(request, \"Article non trouvé\")\r\n     \r\n-    return redirect('cart',item_id=item_id, quantity=quantity)\r\n+    return redirect('cart')\r\n \r\n @require_http_methods([\"GET\"])\r\n def remove_cart_item(request, item_id):\r\n     \"\"\"\r\n"
                },
                {
                    "date": 1739902674714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,175 +5,31 @@\n from django.contrib import messages\r\n \r\n @login_required\r\n def cart_view(request):\r\n-    \r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = cart.cart_items.select_related('product').all()\r\n-    number =CartItem.objects.count\r\n-    # Calculer les totaux pour chaque article\r\n-    for item in cart_items:\r\n-        item.total = item.product.price * item.quantity\r\n-    \r\n-    # Calculer le sous-total\r\n-    subtotal = sum(item.total for item in cart_items)\r\n-    \r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'shipping_cost': Decimal('0.00'),\r\n-        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n-        'number': number,\r\n-        \r\n-    }\r\n-    \r\n-    return render(request, 'home/ShoppingCart.html', context)\r\n-     \r\n- \r\n- \r\n-def add_to_cart(request, product_id, redirect_url):\r\n-    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n-    # Récupération du produit ou 404 si non trouvé\r\n-    product = get_object_or_404(Product, id=product_id)\r\n-\r\n-    # Récupération ou création du panier actif pour l'utilisateur\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-\r\n-    # Vérifier si l'élément existe déjà dans le panier\r\n-    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n-\r\n-    if existing_item:\r\n-        # Si l'élément existe, augmenter la quantité\r\n-        existing_item.quantity += 1\r\n-        existing_item.save()\r\n-    else:\r\n-        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n-        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n-\r\n-    # Affichage d'un message de succès\r\n-    messages.success(request, f\"{product} ajouté au panier\")\r\n-\r\n-    # Redirection vers la page spécifiée\r\n-    return redirect(redirect_url)\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_favoris(request, product_id):\r\n-    return add_to_cart(request, product_id, 'favoris')\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_home(request, product_id):\r\n-    return add_to_cart(request, product_id, 'Home')\r\n-\r\n-\r\n-@login_required\r\n-def add_to_cart_product(request, product_id):\r\n-    return add_to_cart(request, product_id, 'product')\r\n-\r\n-\r\n-\r\n-from django.shortcuts import get_object_or_404, redirect\r\n-from django.contrib import messages\r\n-from django.urls import reverse\r\n-from django.views.decorators.http import require_http_methods\r\n-import uuid\r\n-\r\n-@require_http_methods([\"GET\"])\r\n-def update_cart_item_quantity(request, item_id, quantity):\r\n-    \"\"\"\r\n-    Met à jour la quantité d'un article dans le panier via URL\r\n-    L'item_id est maintenant un UUID\r\n-    \"\"\"\r\n     try:\r\n-        cart_item = get_object_or_404(CartItem, \r\n-                                     id=item_id, \r\n-                                     cart__user=request.user)\r\n-        \r\n-        quantity = int(quantity)\r\n-        if quantity < 1:\r\n-            quantity = 1\r\n-            messages.warning(request, \"La quantité minimum est 1\")\r\n-            \r\n-        # Vérifier le stock disponible\r\n-        if quantity > cart_item.product.stock_quantity:\r\n-            messages.error(request, \r\n-                         f\"Désolé, seulement {cart_item.product.stock_quantity} articles disponibles\")\r\n-            quantity = cart_item.product.stock_quantity\r\n-            \r\n-        cart_item.quantity = quantity\r\n-        cart_item.calculate_total_price()\r\n-        cart_item.save()\r\n-        \r\n-        messages.success(request, \"Quantité mise à jour avec succès\")\r\n-        \r\n-    except ValueError:\r\n-        messages.error(request, \"Quantité invalide\")\r\n-    except uuid.uuid4:\r\n-        messages.error(request, \"Article non trouvé\")\r\n-    \r\n-    return redirect('cart')\r\n+        cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    except ShoppingCart.DoesNotExist:\r\n+        cart = None\r\n \r\n-@require_http_methods([\"GET\"])\r\n-def remove_cart_item(request, item_id):\r\n-    \"\"\"\r\n-    Supprime un article spécifique du panier\r\n-    L'item_id est maintenant un UUID\r\n-    \"\"\"\r\n-    try:\r\n-        cart_item = get_object_or_404(CartItem, \r\n-                                     id=item_id, \r\n-                                     cart__user=request.user)\r\n-        \r\n-        product_name = cart_item.product.name\r\n-        cart_item.delete()\r\n-        \r\n-        messages.success(request, f\"{product_name} a été retiré du panier\")\r\n-    except uuid.uuid4:\r\n-        messages.error(request, \"Article non trouvé\")\r\n-    \r\n-    return redirect('cart')\r\n+    cart_items = cart.cart_items.select_related('product').all() if cart else []\r\n \r\n-@require_http_methods([\"GET\"])\r\n-def clear_cart(request):\r\n-    \"\"\"\r\n-    Vide complètement le panier\r\n-    \"\"\"\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart.cart_items.all().delete()\r\n-    \r\n-    messages.success(request, \"Votre panier a été vidé\")\r\n-    return redirect('cart')\n-from django.shortcuts import get_object_or_404, redirect, render\r\n-from e_commerce.models import *\r\n-from django.contrib.auth.decorators import login_required\r\n-from decimal import Decimal\r\n-from django.contrib import messages\r\n-\r\n-@login_required\r\n-def cart_view(request):\r\n-    \r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = cart.cart_items.select_related('product').all()\r\n-    number =CartItem.objects.count\r\n     # Calculer les totaux pour chaque article\r\n     for item in cart_items:\r\n         item.total = item.product.price * item.quantity\r\n-    \r\n+\r\n     # Calculer le sous-total\r\n     subtotal = sum(item.total for item in cart_items)\r\n-    \r\n+\r\n     context = {\r\n         'cart_items': cart_items,\r\n         'subtotal': subtotal,\r\n         'shipping_cost': Decimal('0.00'),\r\n-        'total': subtotal  ,# Ajouter les frais d'expédition si nécessaire\r\n-        'number': number,\r\n-        \r\n+        'total': subtotal,  # Ajouter les frais d'expédition si nécessaire\r\n+        'number': CartItem.objects.count(),  # Correction ici\r\n     }\r\n-    \r\n+\r\n     return render(request, 'home/ShoppingCart.html', context)\r\n-     \r\n  \r\n  \r\n def add_to_cart(request, product_id, redirect_url):\r\n     \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n"
                },
                {
                    "date": 1739903120332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         \r\n         product_name = cart_item.product.name\r\n         cart_item.delete()\r\n         \r\n-        messages.success(request, f\"{product_name} a été retiré du panier\")\r\n+        messages.error(request, f\"{product_name} a été retiré du panier\")\r\n     except uuid.uuid4:\r\n         messages.error(request, \"Article non trouvé\")\r\n     \r\n     return redirect('cart')\r\n@@ -141,6 +141,6 @@\n     \"\"\"\r\n     cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n     cart.cart_items.all().delete()\r\n     \r\n-    messages.success(request, \"Votre panier a été vidé\")\r\n+    messages.error(request, \"Votre panier a été vidé\")\r\n     return redirect('cart')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739909679330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,13 @@\n from django.contrib import messages\r\n \r\n @login_required\r\n def cart_view(request):\r\n+    \r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(user=request.user).count()\r\n+    else:\r\n+        number = 0 \r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n     except ShoppingCart.DoesNotExist:\r\n         cart = None\r\n@@ -24,9 +29,9 @@\n         'cart_items': cart_items,\r\n         'subtotal': subtotal,\r\n         'shipping_cost': Decimal('0.00'),\r\n         'total': subtotal,  # Ajouter les frais d'expédition si nécessaire\r\n-        'number': CartItem.objects.count(),  # Correction ici\r\n+        'number': number,  # Correction ici\r\n     }\r\n \r\n     return render(request, 'home/ShoppingCart.html', context)\r\n  \r\n"
                },
                {
                    "date": 1739909694225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n @login_required\r\n def cart_view(request):\r\n     \r\n     if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(user=request.user).count()\r\n+        number = CartItem.objects.filter( user=request.user ).count()\r\n     else:\r\n         number = 0 \r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n"
                },
                {
                    "date": 1739909699443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n @login_required\r\n def cart_view(request):\r\n     \r\n     if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter( user=request.user ).count()\r\n+        number = CartItem.objects.filter(  ).count()\r\n     else:\r\n         number = 0 \r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n"
                },
                {
                    "date": 1739909723592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,10 @@\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(  ).count()\r\n     else:\r\n         number = 0 \r\n+        \r\n+        \r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n     except ShoppingCart.DoesNotExist:\r\n         cart = None\r\n"
                },
                {
                    "date": 1739909836625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,12 @@\n @login_required\r\n def cart_view(request):\r\n     \r\n     if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(  ).count()\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n     else:\r\n-        number = 0 \r\n+        number = 0\r\n+\r\n         \r\n         \r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n"
                },
                {
                    "date": 1739916578059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,8 @@\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n     else:\r\n         number = 0\r\n \r\n-        \r\n-        \r\n     try:\r\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n     except ShoppingCart.DoesNotExist:\r\n         cart = None\r\n"
                },
                {
                    "date": 1740067349965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         'shipping_cost': Decimal('0.00'),\r\n         'total': subtotal,  # Ajouter les frais d'expédition si nécessaire\r\n         'number': number,  # Correction ici\r\n     }\r\n-\r\n+    \r\n     return render(request, 'home/ShoppingCart.html', context)\r\n  \r\n  \r\n def add_to_cart(request, product_id, redirect_url):\r\n"
                },
                {
                    "date": 1740067415314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n     except ShoppingCart.DoesNotExist:\r\n         cart = None\r\n \r\n-    cart_items = cart.cart_items.select_related('product').all() if cart else []\r\n+    cart_items = cart.cart_items.select_related('product').order_by('created_at') if cart else []\r\n \r\n     # Calculer les totaux pour chaque article\r\n     for item in cart_items:\r\n         item.total = item.product.price * item.quantity\r\n@@ -34,8 +34,9 @@\n         'number': number,  # Correction ici\r\n     }\r\n     \r\n     return render(request, 'home/ShoppingCart.html', context)\r\n+\r\n  \r\n  \r\n def add_to_cart(request, product_id, redirect_url):\r\n     \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n"
                },
                {
                    "date": 1740068562950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         existing_item.quantity += 1\r\n         existing_item.save()\r\n     else:\r\n         # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n-        CartItem.objects.create(product=product, cart=cart, quantity=1)\r\n+        CartItem.objects.create(product=product, cart=cart, quantity=1,pr)\r\n \r\n     # Affichage d'un message de succès\r\n     messages.success(request, f\"{product} ajouté au panier\")\r\n \r\n"
                },
                {
                    "date": 1740068579548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         existing_item.quantity += 1\r\n         existing_item.save()\r\n     else:\r\n         # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n-        CartItem.objects.create(product=product, cart=cart, quantity=1,pr)\r\n+        CartItem.objects.create(product=product, cart=cart, quantity=1,total_price=product.price)\r\n \r\n     # Affichage d'un message de succès\r\n     messages.success(request, f\"{product} ajouté au panier\")\r\n \r\n"
                },
                {
                    "date": 1740134930300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from e_commerce.models import *\r\n from django.contrib.auth.decorators import login_required\r\n from decimal import Decimal\r\n from django.contrib import messages\r\n-\r\n+from django.db import transaction\r\n @login_required\r\n def cart_view(request):\r\n     \r\n     if request.user.is_authenticated:\r\n@@ -37,50 +37,94 @@\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n  \r\n  \r\n+ \r\n+\r\n+ \r\n def add_to_cart(request, product_id, redirect_url):\r\n-    \"\"\"Fonction générique pour ajouter un produit au panier\"\"\"\r\n-    # Récupération du produit ou 404 si non trouvé\r\n-    product = get_object_or_404(Product, id=product_id)\r\n-\r\n-    # Récupération ou création du panier actif pour l'utilisateur\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-\r\n-    # Vérifier si l'élément existe déjà dans le panier\r\n-    existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n-\r\n-    if existing_item:\r\n-        # Si l'élément existe, augmenter la quantité\r\n-        existing_item.quantity += 1\r\n-        existing_item.save()\r\n-    else:\r\n-        # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n-        CartItem.objects.create(product=product, cart=cart, quantity=1,total_price=product.price)\r\n-\r\n-    # Affichage d'un message de succès\r\n-    messages.success(request, f\"{product} ajouté au panier\")\r\n-\r\n+    \"\"\"Fonction générique pour ajouter un produit au panier avec gestion du stock\"\"\"\r\n+    try:\r\n+        with transaction.atomic():  # Utilisation d'une transaction pour garantir l'intégrité\r\n+            # Récupération du produit ou 404 si non trouvé\r\n+            product = get_object_or_404(Product, id=product_id)\r\n+            \r\n+            # Vérification du stock\r\n+            if product.stock_quantity <= 0:\r\n+                messages.error(request, f\"Désolé, {product} n'est plus en stock.\")\r\n+                return redirect(redirect_url)\r\n+            \r\n+            # Récupération ou création du panier actif pour l'utilisateur\r\n+            cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+            \r\n+            # Vérifier si l'élément existe déjà dans le panier\r\n+            existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n+            \r\n+            if existing_item:\r\n+                # Vérifier si l'augmentation de quantité est possible\r\n+                if existing_item.quantity + 1 > product.stock_quantity:\r\n+                    messages.warning(request, f\"Stock insuffisant pour {product}\")\r\n+                    return redirect(redirect_url)\r\n+                \r\n+                # Si l'élément existe, augmenter la quantité\r\n+                existing_item.quantity += 1\r\n+                existing_item.calculate_total_price()  # Recalculer le prix total\r\n+                existing_item.save()\r\n+                \r\n+                # Créer le mouvement de stock\r\n+                StockMovement.objects.create(\r\n+                    product=product,\r\n+                    quantity=1,\r\n+                    movement_type='OUT',\r\n+                    reason=\"Ajout au panier - Quantité augmentée\",\r\n+                    reference=f\"CART-{cart.id}\"\r\n+                )\r\n+            else:\r\n+                # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n+                cart_item = CartItem.objects.create(\r\n+                    product=product,\r\n+                    cart=cart,\r\n+                    quantity=1,\r\n+                    total_price=product.price\r\n+                )\r\n+                \r\n+                # Créer le mouvement de stock\r\n+                StockMovement.objects.create(\r\n+                    product=product,\r\n+                    quantity=1,\r\n+                    movement_type='OUT',\r\n+                    reason=\"Ajout au panier - Nouvel article\",\r\n+                    reference=f\"CART-{cart.id}\"\r\n+                )\r\n+            \r\n+            # Affichage d'un message de succès\r\n+            messages.success(request, f\"{product} ajouté au panier\")\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        # Si le panier n'existe pas, le créer\r\n+        cart = ShoppingCart.objects.create(user=request.user, is_active=True)\r\n+        messages.info(request, \"Un nouveau panier a été créé pour vous\")\r\n+        # Réessayer l'ajout\r\n+        return add_to_cart(request, product_id, redirect_url)\r\n+        \r\n+    except Exception as e:\r\n+        # En cas d'erreur inattendue\r\n+        messages.error(request, \"Une erreur est survenue lors de l'ajout au panier\")\r\n+        \r\n     # Redirection vers la page spécifiée\r\n     return redirect(redirect_url)\r\n \r\n-\r\n @login_required\r\n def add_to_cart_favoris(request, product_id):\r\n     return add_to_cart(request, product_id, 'favoris')\r\n \r\n-\r\n @login_required\r\n def add_to_cart_home(request, product_id):\r\n     return add_to_cart(request, product_id, 'Home')\r\n \r\n-\r\n @login_required\r\n def add_to_cart_product(request, product_id):\r\n     return add_to_cart(request, product_id, 'product')\r\n-\r\n-\r\n-\r\n from django.shortcuts import get_object_or_404, redirect\r\n from django.contrib import messages\r\n from django.urls import reverse\r\n from django.views.decorators.http import require_http_methods\r\n"
                },
                {
                    "date": 1740135138538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from e_commerce.models import *\r\n from django.contrib.auth.decorators import login_required\r\n from decimal import Decimal\r\n from django.contrib import messages\r\n-from django.db import transaction\r\n+from django.db import IntegrityError, transaction\r\n @login_required\r\n def cart_view(request):\r\n     \r\n     if request.user.is_authenticated:\r\n@@ -35,28 +35,28 @@\n     }\r\n     \r\n     return render(request, 'home/ShoppingCart.html', context)\r\n \r\n- \r\n- \r\n- \r\n-\r\n- \r\n def add_to_cart(request, product_id, redirect_url):\r\n     \"\"\"Fonction générique pour ajouter un produit au panier avec gestion du stock\"\"\"\r\n     try:\r\n-        with transaction.atomic():  # Utilisation d'une transaction pour garantir l'intégrité\r\n-            # Récupération du produit ou 404 si non trouvé\r\n-            product = get_object_or_404(Product, id=product_id)\r\n-            \r\n-            # Vérification du stock\r\n-            if product.stock_quantity <= 0:\r\n-                messages.error(request, f\"Désolé, {product} n'est plus en stock.\")\r\n-                return redirect(redirect_url)\r\n-            \r\n-            # Récupération ou création du panier actif pour l'utilisateur\r\n+        # Récupération du produit ou 404 si non trouvé\r\n+        product = get_object_or_404(Product, id=product_id)\r\n+        \r\n+        # Vérification du stock\r\n+        if product.stock_quantity <= 0:\r\n+            messages.error(request, f\"Désolé, {product} n'est plus en stock.\")\r\n+            return redirect(redirect_url)\r\n+        \r\n+        try:\r\n+            # Récupération du panier actif pour l'utilisateur\r\n             cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-            \r\n+        except ShoppingCart.DoesNotExist:\r\n+            # Si le panier n'existe pas, le créer\r\n+            cart = ShoppingCart.objects.create(user=request.user, is_active=True)\r\n+            messages.info(request, \"Un nouveau panier a été créé pour vous\")\r\n+\r\n+        with transaction.atomic():\r\n             # Vérifier si l'élément existe déjà dans le panier\r\n             existing_item = CartItem.objects.filter(product=product, cart=cart).first()\r\n             \r\n             if existing_item:\r\n@@ -66,52 +66,49 @@\n                     return redirect(redirect_url)\r\n                 \r\n                 # Si l'élément existe, augmenter la quantité\r\n                 existing_item.quantity += 1\r\n-                existing_item.calculate_total_price()  # Recalculer le prix total\r\n+                existing_item.total_price = existing_item.quantity * product.price\r\n                 existing_item.save()\r\n                 \r\n-                # Créer le mouvement de stock\r\n-                StockMovement.objects.create(\r\n-                    product=product,\r\n-                    quantity=1,\r\n-                    movement_type='OUT',\r\n-                    reason=\"Ajout au panier - Quantité augmentée\",\r\n-                    reference=f\"CART-{cart.id}\"\r\n-                )\r\n             else:\r\n                 # Si l'élément n'existe pas, créer un nouvel élément dans le panier\r\n-                cart_item = CartItem.objects.create(\r\n+                CartItem.objects.create(\r\n                     product=product,\r\n                     cart=cart,\r\n                     quantity=1,\r\n                     total_price=product.price\r\n                 )\r\n-                \r\n-                # Créer le mouvement de stock\r\n-                StockMovement.objects.create(\r\n-                    product=product,\r\n-                    quantity=1,\r\n-                    movement_type='OUT',\r\n-                    reason=\"Ajout au panier - Nouvel article\",\r\n-                    reference=f\"CART-{cart.id}\"\r\n-                )\r\n             \r\n-            # Affichage d'un message de succès\r\n+            # Créer le mouvement de stock\r\n+            StockMovement.objects.create(\r\n+                product=product,\r\n+                quantity=1,\r\n+                movement_type='OUT',\r\n+                reason=\"Ajout au panier\",\r\n+                reference=f\"CART-{cart.id}\"\r\n+            )\r\n+            \r\n             messages.success(request, f\"{product} ajouté au panier\")\r\n             \r\n-    except ShoppingCart.DoesNotExist:\r\n-        # Si le panier n'existe pas, le créer\r\n-        cart = ShoppingCart.objects.create(user=request.user, is_active=True)\r\n-        messages.info(request, \"Un nouveau panier a été créé pour vous\")\r\n-        # Réessayer l'ajout\r\n-        return add_to_cart(request, product_id, redirect_url)\r\n+    except Product.DoesNotExist:\r\n+        messages.error(request, \"Le produit demandé n'existe pas.\")\r\n+        return redirect(redirect_url)\r\n         \r\n+    except ValueError as e:\r\n+        messages.error(request, f\"Erreur de validation: {str(e)}\")\r\n+        return redirect(redirect_url)\r\n+        \r\n+    except IntegrityError as e:\r\n+        messages.error(request, \"Erreur d'intégrité de la base de données.\")\r\n+        return redirect(redirect_url)\r\n+        \r\n     except Exception as e:\r\n-        # En cas d'erreur inattendue\r\n-        messages.error(request, \"Une erreur est survenue lors de l'ajout au panier\")\r\n-        \r\n-    # Redirection vers la page spécifiée\r\n+        # Log l'erreur pour le débogage\r\n+        print(f\"Erreur inattendue: {type(e).__name__} - {str(e)}\")\r\n+        messages.error(request, f\"Une erreur est survenue: {type(e).__name__}\")\r\n+        return redirect(redirect_url)\r\n+\r\n     return redirect(redirect_url)\r\n \r\n @login_required\r\n def add_to_cart_favoris(request, product_id):\r\n"
                },
                {
                    "date": 1740135868229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n         \r\n     except ValueError as e:\r\n         messages.error(request, f\"Erreur de validation: {str(e)}\")\r\n         return redirect(redirect_url)\r\n-        \r\n+            \r\n     except IntegrityError as e:\r\n         messages.error(request, \"Erreur d'intégrité de la base de données.\")\r\n         return redirect(redirect_url)\r\n         \r\n"
                },
                {
                    "date": 1740136974711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,16 +78,9 @@\n                     quantity=1,\r\n                     total_price=product.price\r\n                 )\r\n             \r\n-            # Créer le mouvement de stock\r\n-            StockMovement.objects.create(\r\n-                product=product,\r\n-                quantity=1,\r\n-                movement_type='OUT',\r\n-                reason=\"Ajout au panier\",\r\n-                reference=f\"CART-{cart.id}\"\r\n-            )\r\n+             \r\n             \r\n             messages.success(request, f\"{product} ajouté au panier\")\r\n             \r\n     except Product.DoesNotExist:\r\n@@ -96,9 +89,9 @@\n         \r\n     except ValueError as e:\r\n         messages.error(request, f\"Erreur de validation: {str(e)}\")\r\n         return redirect(redirect_url)\r\n-            \r\n+\r\n     except IntegrityError as e:\r\n         messages.error(request, \"Erreur d'intégrité de la base de données.\")\r\n         return redirect(redirect_url)\r\n         \r\n"
                },
                {
                    "date": 1740326633692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,9 @@\n                     cart=cart,\r\n                     quantity=1,\r\n                     total_price=product.price\r\n                 )\r\n-            \r\n-             \r\n-            \r\n+ \r\n             messages.success(request, f\"{product} ajouté au panier\")\r\n             \r\n     except Product.DoesNotExist:\r\n         messages.error(request, \"Le produit demandé n'existe pas.\")\r\n"
                }
            ],
            "date": 1739307266102,
            "name": "Commit-0",
            "content": "from django.shortcuts import get_object_or_404, render\r\nfrom e_commerce.models import Product\r\nfrom django.utils.decorators import method_decorator\r\nfrom django.contrib.auth.decorators import login_required\r\n\r\n\r\n@login_required\r\ndef favoris (request):\r\n   \r\n    \r\n    return render(request, 'home/favoris.html')"
        }
    ]
}