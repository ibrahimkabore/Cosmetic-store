{
    "sourceFile": "e_commerce/views/auth.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1739205970231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739206022044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.shortcuts import render, redirect\r\n from django.contrib.auth import login,logout,get_backends\r\n-from conteneurs.forms import *\r\n+from e_commerce.forms import *\r\n from django.shortcuts import redirect\r\n-from conteneurs.models import VerificationCode\r\n+from e_commerce.models import VerificationCode\r\n from django.contrib.auth.decorators import login_required\r\n # view de creation de compte \r\n from django.contrib.auth.models import User\r\n from django.contrib.auth.backends import ModelBackend\r\n"
                },
                {
                    "date": 1739206743923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,15 +42,15 @@\n     ('secretaire', 'Secrétaire'),\r\n     ('chef', 'Chef'),\r\n ]\r\n     if request.method == 'POST':\r\n-        form = PersonnelForm(request.POST , request.FILES)\r\n+        form = CustomUserForm(request.POST , request.FILES)\r\n         if form.is_valid():\r\n             user = form.save()\r\n             login(request, user, backend='django.contrib.auth.backends.ModelBackend')\r\n             return redirect('verify')  # Rediriger vers la page de vérification\r\n     else:\r\n-        form = PersonnelForm()\r\n+        form = CustomUserForm()\r\n     return render(request, 'registration/register.html', {'form': form, 'USER_TYPE_CHOICES': USER_TYPE_CHOICES})\r\n \r\n # view de verification de creation de compte \r\n \r\n@@ -95,9 +95,9 @@\n def two_factor_method(request):\r\n     if 'pre_2fa_user_id' not in request.session:\r\n         return redirect('login')\r\n     \r\n-    user = Personnel.objects.get(id=request.session['pre_2fa_user_id'])\r\n+    user = CustomUser.objects.get(id=request.session['pre_2fa_user_id'])\r\n     \r\n     if request.method == 'POST':\r\n         form = TwoFactorMethodForm(request.POST)\r\n         if form.is_valid():\r\n@@ -145,9 +145,9 @@\n def email_verification(request):\r\n     if 'pre_2fa_user_id' not in request.session or '2fa_email_code' not in request.session:\r\n         return redirect('login')\r\n     \r\n-    user = Personnel.objects.get(id=request.session['pre_2fa_user_id'])\r\n+    user = CustomUser.objects.get(id=request.session['pre_2fa_user_id'])\r\n     \r\n     if request.method == 'POST':\r\n         form = EmailVerificationForm(request.POST)\r\n         if form.is_valid():\r\n@@ -168,9 +168,9 @@\n def google_auth_verification(request):\r\n     if 'pre_2fa_user_id' not in request.session:\r\n         return redirect('login')\r\n     \r\n-    user = Personnel.objects.get(id=request.session['pre_2fa_user_id'])\r\n+    user = CustomUser.objects.get(id=request.session['pre_2fa_user_id'])\r\n     \r\n     if request.method == 'POST':\r\n         form = GoogleAuthVerificationForm(request.POST)\r\n         if form.is_valid():\r\n@@ -202,9 +202,9 @@\n     template_name = 'registration/rest/password_reset.html'\r\n \r\n     def form_valid(self, form):\r\n         email = form.cleaned_data.get('email')\r\n-        if not Personnel.objects.filter(email=email).exists():\r\n+        if not CustomUser.objects.filter(email=email).exists():\r\n             messages.error(self.request, \"Cet email n'est associé à aucun compte utilisateur.\")\r\n             return self.form_invalid(form)\r\n         return super().form_valid(form)\r\n \r\n"
                },
                {
                    "date": 1739211747071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,25 +33,22 @@\n     \r\n        \r\n def register(request):\r\n     \r\n-    USER_TYPE_CHOICES = [\r\n-    ('Votre_fonction', 'Selectionne votre fonction'),\r\n-\r\n-    ('agent_selection', 'Agent selection' ),\r\n-    ('agent_acconage', 'Agent  habillage et empotage'),\r\n-    ('secretaire', 'Secrétaire'),\r\n-    ('chef', 'Chef'),\r\n-]\r\n+    GENDER_CHOICES = [\r\n+        ('H', _('Homme')),\r\n+        ('F', _('Femme')),\r\n+        ('A', _('Autre'))\r\n+    ]\r\n     if request.method == 'POST':\r\n         form = CustomUserForm(request.POST , request.FILES)\r\n         if form.is_valid():\r\n             user = form.save()\r\n             login(request, user, backend='django.contrib.auth.backends.ModelBackend')\r\n             return redirect('verify')  # Rediriger vers la page de vérification\r\n     else:\r\n         form = CustomUserForm()\r\n-    return render(request, 'registration/register.html', {'form': form, 'USER_TYPE_CHOICES': USER_TYPE_CHOICES})\r\n+    return render(request, 'registration/register.html', {'form': form, 'GENDER_CHOICES': GENDER_CHOICES})\r\n \r\n # view de verification de creation de compte \r\n \r\n def verify(request):\r\n"
                },
                {
                    "date": 1739211771489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from django.contrib.auth.models import User\r\n from django.contrib.auth.backends import ModelBackend\r\n from django.db.models import Q\r\n from django.contrib import messages\r\n- \r\n+from django.utils.translation import gettext_lazy as _\r\n from django.contrib.auth import views as auth_views\r\n  \r\n \r\n import random\r\n"
                },
                {
                    "date": 1739225319221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,39 +72,41 @@\n                 form.add_error('code', 'Code invalide')\r\n     else:\r\n         form = VerificationForm()\r\n     return render(request, 'registration/verify.html', {'form': form})\r\n-\r\n-\"\"\"\r\n-# view de connexion \"\"\"\r\n def user_login(request):\r\n     if request.method == 'POST':\r\n         form = LoginForm(request, data=request.POST)\r\n         if form.is_valid():\r\n             user = form.get_user()\r\n-            # Store user in session for two-factor process\r\n-            request.session['pre_2fa_user_id'] = user.id\r\n+            # Convertir l'UUID en string pour le stockage dans la session\r\n+            request.session['pre_2fa_user_id'] = str(user.id)\r\n             return redirect('two_factor_method')\r\n     else:\r\n         form = LoginForm()\r\n     return render(request, 'registration/login.html', {'form': form})\r\n \r\n-\r\n def two_factor_method(request):\r\n     if 'pre_2fa_user_id' not in request.session:\r\n         return redirect('login')\r\n     \r\n-    user = CustomUser.objects.get(id=request.session['pre_2fa_user_id'])\r\n-    \r\n+    try:\r\n+        # Convertir le string en UUID pour la requête\r\n+        user_id = UUID(request.session['pre_2fa_user_id'])\r\n+        user = CustomUser.objects.get(id=user_id)\r\n+    except (ValueError, CustomUser.DoesNotExist):\r\n+        # Gérer les cas d'erreur (UUID invalide ou utilisateur non trouvé)\r\n+        del request.session['pre_2fa_user_id']\r\n+        return redirect('login')\r\n+   \r\n     if request.method == 'POST':\r\n         form = TwoFactorMethodForm(request.POST)\r\n         if form.is_valid():\r\n             method = form.cleaned_data['two_factor_method']\r\n             user.two_factor_method = method\r\n             user.save()\r\n-            \r\n+           \r\n             if method == 'email':\r\n-                # Generate and send email code\r\n                 code = str(random.randint(100000, 999999))\r\n                 request.session['2fa_email_code'] = code\r\n                 send_mail(\r\n                     'Two-Factor Authentication Code',\r\n@@ -113,31 +115,28 @@\n                     [user.email],\r\n                     fail_silently=False,\r\n                 )\r\n                 return redirect('email_verification')\r\n-            \r\n+           \r\n             elif method == 'google_auth':\r\n-                # Generate Google Authenticator secret\r\n                 secret = user.generate_google_auth_secret()\r\n-                \r\n-                # Generate QR code\r\n                 totp = pyotp.TOTP(secret)\r\n                 qr = qrcode.QRCode(version=1, box_size=10, border=5)\r\n                 qr.add_data(totp.provisioning_uri(name=user.username, issuer_name='suivi empotage'))\r\n                 qr.make(fit=True)\r\n-                \r\n+               \r\n                 img = qr.make_image(fill_color=\"black\", back_color=\"white\")\r\n                 buffered = io.BytesIO()\r\n                 img.save(buffered, format=\"PNG\")\r\n                 qr_code = base64.b64encode(buffered.getvalue()).decode()\r\n-                \r\n+               \r\n                 return render(request, 'registration/google_auth_setup.html', {\r\n                     'qr_code': qr_code,\r\n                     'secret': secret\r\n                 })\r\n     else:\r\n         form = TwoFactorMethodForm()\r\n-    \r\n+   \r\n     return render(request, 'registration/two_factor_method.html', {'form': form})\r\n \r\n def email_verification(request):\r\n     if 'pre_2fa_user_id' not in request.session or '2fa_email_code' not in request.session:\r\n"
                },
                {
                    "date": 1739225331891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from django.contrib import messages\r\n from django.utils.translation import gettext_lazy as _\r\n from django.contrib.auth import views as auth_views\r\n  \r\n-\r\n+from uuid import UUID\r\n import random\r\n from django.core.mail import send_mail\r\n import pyotp\r\n import qrcode\r\n"
                },
                {
                    "date": 1739225403665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,12 +120,12 @@\n             elif method == 'google_auth':\r\n                 secret = user.generate_google_auth_secret()\r\n                 totp = pyotp.TOTP(secret)\r\n                 qr = qrcode.QRCode(version=1, box_size=10, border=5)\r\n-                qr.add_data(totp.provisioning_uri(name=user.username, issuer_name='suivi empotage'))\r\n+                qr.add_data(totp.provisioning_uri(name=user.username, issuer_name='Ghisilaine Cosmetic'))\r\n                 qr.make(fit=True)\r\n                \r\n-                img = qr.make_image(fill_color=\"black\", back_color=\"white\")\r\n+                img = qr.make_image(fill_color=\"black\", back_color=\"red\")\r\n                 buffered = io.BytesIO()\r\n                 img.save(buffered, format=\"PNG\")\r\n                 qr_code = base64.b64encode(buffered.getvalue()).decode()\r\n                \r\n"
                },
                {
                    "date": 1739225533586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n                 # Specify the backend explicitly\r\n                 login(request, user, backend='django.contrib.auth.backends.ModelBackend')\r\n                 del request.session['pre_2fa_user_id']\r\n                 del request.session['2fa_email_code']\r\n-                return redirect('index')\r\n+                return redirect('Home')\r\n             else:\r\n                 messages.error(request, 'Invalid verification code')\r\n     else:\r\n         form = EmailVerificationForm()\r\n@@ -174,9 +174,9 @@\n             if user.verify_google_auth_code(code):\r\n                 # Specify the backend explicitly\r\n                 login(request, user, backend='django.contrib.auth.backends.ModelBackend')\r\n                 del request.session['pre_2fa_user_id']\r\n-                return redirect('index')\r\n+                return redirect('Home')\r\n             else:\r\n                 messages.error(request, 'Invalid authentication code')\r\n     else:\r\n         form = GoogleAuthVerificationForm()\r\n@@ -188,9 +188,9 @@\n     logout(request)\r\n     # Redirige l'utilisateur vers une page après la déconnexion (par exemple la page d'accueil)\r\n     messages.add_message(request, messages.SUCCESS, \" A bientot  \" )\r\n \r\n-    return redirect('login')\r\n+    return redirect('Home')\r\n \r\n #view reste password\r\n \r\n \r\n"
                },
                {
                    "date": 1739355633318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n         if form.is_valid():\r\n             user = form.get_user()\r\n             # Convertir l'UUID en string pour le stockage dans la session\r\n             request.session['pre_2fa_user_id'] = str(user.id)\r\n-            return redirect('two_factor_method')\r\n+            return redirect('Home')\r\n     else:\r\n         form = LoginForm()\r\n     return render(request, 'registration/login.html', {'form': form})\r\n \r\n"
                },
                {
                    "date": 1739355802703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n         if form.is_valid():\r\n             user = form.get_user()\r\n             # Convertir l'UUID en string pour le stockage dans la session\r\n             request.session['pre_2fa_user_id'] = str(user.id)\r\n-            return redirect('Home')\r\n+            return redirect('two_factor_method')\r\n     else:\r\n         form = LoginForm()\r\n     return render(request, 'registration/login.html', {'form': form})\r\n \r\n"
                },
                {
                    "date": 1739356271895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,13 @@\n     if request.method == 'POST':\r\n         form = LoginForm(request, data=request.POST)\r\n         if form.is_valid():\r\n             user = form.get_user()\r\n-            # Convertir l'UUID en string pour le stockage dans la session\r\n+            # Ajouter un print de débug\r\n+            print(\"User ID being stored:\", str(user.id))\r\n             request.session['pre_2fa_user_id'] = str(user.id)\r\n+            # Vérifier que la session est sauvegardée\r\n+            print(\"Session after storage:\", request.session.get('pre_2fa_user_id'))\r\n             return redirect('two_factor_method')\r\n     else:\r\n         form = LoginForm()\r\n     return render(request, 'registration/login.html', {'form': form})\r\n"
                },
                {
                    "date": 1739356285499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,9 @@\n         form = LoginForm()\r\n     return render(request, 'registration/login.html', {'form': form})\r\n \r\n def two_factor_method(request):\r\n+    print(\"Session at start:\", request.session.get('pre_2fa_user_id'))\r\n     if 'pre_2fa_user_id' not in request.session:\r\n         return redirect('login')\r\n     \r\n     try:\r\n"
                },
                {
                    "date": 1739356296390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n                 form.add_error('code', 'Code invalide')\r\n     else:\r\n         form = VerificationForm()\r\n     return render(request, 'registration/verify.html', {'form': form})\r\n+\r\n def user_login(request):\r\n     if request.method == 'POST':\r\n         form = LoginForm(request, data=request.POST)\r\n         if form.is_valid():\r\n"
                },
                {
                    "date": 1739356354456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,9 @@\n \r\n def two_factor_method(request):\r\n     print(\"Session at start:\", request.session.get('pre_2fa_user_id'))\r\n     if 'pre_2fa_user_id' not in request.session:\r\n+        print(\"No pre_2fa_user_id in session\")\r\n         return redirect('login')\r\n     \r\n     try:\r\n         # Convertir le string en UUID pour la requête\r\n"
                },
                {
                    "date": 1739356379502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,13 +95,14 @@\n         print(\"No pre_2fa_user_id in session\")\r\n         return redirect('login')\r\n     \r\n     try:\r\n-        # Convertir le string en UUID pour la requête\r\n-        user_id = UUID(request.session['pre_2fa_user_id'])\r\n+       user_id = UUID(request.session['pre_2fa_user_id'])\r\n+        print(\"UUID conversion successful:\", user_id)\r\n         user = CustomUser.objects.get(id=user_id)\r\n-    except (ValueError, CustomUser.DoesNotExist):\r\n-        # Gérer les cas d'erreur (UUID invalide ou utilisateur non trouvé)\r\n+        print(\"User found:\", user.username)\r\n+    except (ValueError, CustomUser.DoesNotExist) as e:\r\n+        print(\"Error:\", str(e))\r\n         del request.session['pre_2fa_user_id']\r\n         return redirect('login')\r\n    \r\n     if request.method == 'POST':\r\n"
                },
                {
                    "date": 1739356388705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n         print(\"No pre_2fa_user_id in session\")\r\n         return redirect('login')\r\n     \r\n     try:\r\n-       user_id = UUID(request.session['pre_2fa_user_id'])\r\n+        user_id = UUID(request.session['pre_2fa_user_id'])\r\n         print(\"UUID conversion successful:\", user_id)\r\n         user = CustomUser.objects.get(id=user_id)\r\n         print(\"User found:\", user.username)\r\n     except (ValueError, CustomUser.DoesNotExist) as e:\r\n"
                },
                {
                    "date": 1739356590269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,10 +95,9 @@\n         print(\"No pre_2fa_user_id in session\")\r\n         return redirect('login')\r\n     \r\n     try:\r\n-        user_id = UUID(request.session['pre_2fa_user_id'])\r\n-        print(\"UUID conversion successful:\", user_id)\r\n+        user_id = request.session['pre_2fa_user_id']        print(\"UUID conversion successful:\", user_id)\r\n         user = CustomUser.objects.get(id=user_id)\r\n         print(\"User found:\", user.username)\r\n     except (ValueError, CustomUser.DoesNotExist) as e:\r\n         print(\"Error:\", str(e))\r\n"
                },
                {
                    "date": 1739356610652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,10 @@\n         print(\"No pre_2fa_user_id in session\")\r\n         return redirect('login')\r\n     \r\n     try:\r\n-        user_id = request.session['pre_2fa_user_id']        print(\"UUID conversion successful:\", user_id)\r\n+        user_id = request.session['pre_2fa_user_id']        \r\n+        print(\"UUID conversion successful:\", user_id)\r\n         user = CustomUser.objects.get(id=user_id)\r\n         print(\"User found:\", user.username)\r\n     except (ValueError, CustomUser.DoesNotExist) as e:\r\n         print(\"Error:\", str(e))\r\n"
                },
                {
                    "date": 1739356651892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,10 +95,9 @@\n         print(\"No pre_2fa_user_id in session\")\r\n         return redirect('login')\r\n     \r\n     try:\r\n-        user_id = request.session['pre_2fa_user_id']        \r\n-        print(\"UUID conversion successful:\", user_id)\r\n+        user_id = request.session['pre_2fa_user_id']\r\n         user = CustomUser.objects.get(id=user_id)\r\n         print(\"User found:\", user.username)\r\n     except (ValueError, CustomUser.DoesNotExist) as e:\r\n         print(\"Error:\", str(e))\r\n"
                }
            ],
            "date": 1739205970231,
            "name": "Commit-0",
            "content": "from django.shortcuts import render, redirect\r\nfrom django.contrib.auth import login,logout,get_backends\r\nfrom conteneurs.forms import *\r\nfrom django.shortcuts import redirect\r\nfrom conteneurs.models import VerificationCode\r\nfrom django.contrib.auth.decorators import login_required\r\n# view de creation de compte \r\nfrom django.contrib.auth.models import User\r\nfrom django.contrib.auth.backends import ModelBackend\r\nfrom django.db.models import Q\r\nfrom django.contrib import messages\r\n \r\nfrom django.contrib.auth import views as auth_views\r\n \r\n\r\nimport random\r\nfrom django.core.mail import send_mail\r\nimport pyotp\r\nimport qrcode\r\nimport io\r\nimport base64\r\n\r\nclass EmailOrUsernameModelBackend(ModelBackend):\r\n    def authenticate(self, username=None, password=None, **kwargs):\r\n        try:\r\n            user = User.objects.get(Q(username=username) | Q(email=username))\r\n        except User.DoesNotExist:\r\n            return None\r\n\r\n        if user.check_password(password) and self.user_can_authenticate(user):\r\n            return user\r\n        return None        \r\n    \r\n       \r\ndef register(request):\r\n    \r\n    USER_TYPE_CHOICES = [\r\n    ('Votre_fonction', 'Selectionne votre fonction'),\r\n\r\n    ('agent_selection', 'Agent selection' ),\r\n    ('agent_acconage', 'Agent  habillage et empotage'),\r\n    ('secretaire', 'Secrétaire'),\r\n    ('chef', 'Chef'),\r\n]\r\n    if request.method == 'POST':\r\n        form = PersonnelForm(request.POST , request.FILES)\r\n        if form.is_valid():\r\n            user = form.save()\r\n            login(request, user, backend='django.contrib.auth.backends.ModelBackend')\r\n            return redirect('verify')  # Rediriger vers la page de vérification\r\n    else:\r\n        form = PersonnelForm()\r\n    return render(request, 'registration/register.html', {'form': form, 'USER_TYPE_CHOICES': USER_TYPE_CHOICES})\r\n\r\n# view de verification de creation de compte \r\n\r\ndef verify(request):\r\n    if request.method == 'POST':\r\n        form = VerificationForm(request.POST)\r\n        if form.is_valid():\r\n            code = form.cleaned_data['code']\r\n            try:\r\n                verification_code = VerificationCode.objects.get(code=code)\r\n                user = verification_code.user\r\n                user.is_active = True\r\n                user.is_verified = True\r\n                user.save()\r\n                verification_code.delete()  # Supprimer le code de vérification après validation\r\n                \r\n                # Obtenir le backend d'authentification utilisé\r\n                backend = get_backends()[0]\r\n                login(request, user, backend='accounts.auth_backends.EmailOrUsernameModelBackend')\r\n                return redirect('login')\r\n            except VerificationCode.DoesNotExist:\r\n                form.add_error('code', 'Code invalide')\r\n    else:\r\n        form = VerificationForm()\r\n    return render(request, 'registration/verify.html', {'form': form})\r\n\r\n\"\"\"\r\n# view de connexion \"\"\"\r\ndef user_login(request):\r\n    if request.method == 'POST':\r\n        form = LoginForm(request, data=request.POST)\r\n        if form.is_valid():\r\n            user = form.get_user()\r\n            # Store user in session for two-factor process\r\n            request.session['pre_2fa_user_id'] = user.id\r\n            return redirect('two_factor_method')\r\n    else:\r\n        form = LoginForm()\r\n    return render(request, 'registration/login.html', {'form': form})\r\n\r\n\r\ndef two_factor_method(request):\r\n    if 'pre_2fa_user_id' not in request.session:\r\n        return redirect('login')\r\n    \r\n    user = Personnel.objects.get(id=request.session['pre_2fa_user_id'])\r\n    \r\n    if request.method == 'POST':\r\n        form = TwoFactorMethodForm(request.POST)\r\n        if form.is_valid():\r\n            method = form.cleaned_data['two_factor_method']\r\n            user.two_factor_method = method\r\n            user.save()\r\n            \r\n            if method == 'email':\r\n                # Generate and send email code\r\n                code = str(random.randint(100000, 999999))\r\n                request.session['2fa_email_code'] = code\r\n                send_mail(\r\n                    'Two-Factor Authentication Code',\r\n                    f'Your verification code is: {code}',\r\n                    'your_email@example.com',\r\n                    [user.email],\r\n                    fail_silently=False,\r\n                )\r\n                return redirect('email_verification')\r\n            \r\n            elif method == 'google_auth':\r\n                # Generate Google Authenticator secret\r\n                secret = user.generate_google_auth_secret()\r\n                \r\n                # Generate QR code\r\n                totp = pyotp.TOTP(secret)\r\n                qr = qrcode.QRCode(version=1, box_size=10, border=5)\r\n                qr.add_data(totp.provisioning_uri(name=user.username, issuer_name='suivi empotage'))\r\n                qr.make(fit=True)\r\n                \r\n                img = qr.make_image(fill_color=\"black\", back_color=\"white\")\r\n                buffered = io.BytesIO()\r\n                img.save(buffered, format=\"PNG\")\r\n                qr_code = base64.b64encode(buffered.getvalue()).decode()\r\n                \r\n                return render(request, 'registration/google_auth_setup.html', {\r\n                    'qr_code': qr_code,\r\n                    'secret': secret\r\n                })\r\n    else:\r\n        form = TwoFactorMethodForm()\r\n    \r\n    return render(request, 'registration/two_factor_method.html', {'form': form})\r\n\r\ndef email_verification(request):\r\n    if 'pre_2fa_user_id' not in request.session or '2fa_email_code' not in request.session:\r\n        return redirect('login')\r\n    \r\n    user = Personnel.objects.get(id=request.session['pre_2fa_user_id'])\r\n    \r\n    if request.method == 'POST':\r\n        form = EmailVerificationForm(request.POST)\r\n        if form.is_valid():\r\n            code = form.cleaned_data['code']\r\n            if code == request.session['2fa_email_code']:\r\n                # Specify the backend explicitly\r\n                login(request, user, backend='django.contrib.auth.backends.ModelBackend')\r\n                del request.session['pre_2fa_user_id']\r\n                del request.session['2fa_email_code']\r\n                return redirect('index')\r\n            else:\r\n                messages.error(request, 'Invalid verification code')\r\n    else:\r\n        form = EmailVerificationForm()\r\n    \r\n    return render(request, 'registration/email_verification.html', {'form': form})\r\n\r\ndef google_auth_verification(request):\r\n    if 'pre_2fa_user_id' not in request.session:\r\n        return redirect('login')\r\n    \r\n    user = Personnel.objects.get(id=request.session['pre_2fa_user_id'])\r\n    \r\n    if request.method == 'POST':\r\n        form = GoogleAuthVerificationForm(request.POST)\r\n        if form.is_valid():\r\n            code = form.cleaned_data['code']\r\n            if user.verify_google_auth_code(code):\r\n                # Specify the backend explicitly\r\n                login(request, user, backend='django.contrib.auth.backends.ModelBackend')\r\n                del request.session['pre_2fa_user_id']\r\n                return redirect('index')\r\n            else:\r\n                messages.error(request, 'Invalid authentication code')\r\n    else:\r\n        form = GoogleAuthVerificationForm()\r\n    \r\n    return render(request, 'registration/google_auth_verification.html', {'form': form})\r\n\r\n@login_required\r\ndef deconnection(request):\r\n    logout(request)\r\n    # Redirige l'utilisateur vers une page après la déconnexion (par exemple la page d'accueil)\r\n    messages.add_message(request, messages.SUCCESS, \" A bientot  \" )\r\n\r\n    return redirect('login')\r\n\r\n#view reste password\r\n\r\n\r\nclass CustomPasswordResetView(auth_views.PasswordResetView):\r\n    template_name = 'registration/rest/password_reset.html'\r\n\r\n    def form_valid(self, form):\r\n        email = form.cleaned_data.get('email')\r\n        if not Personnel.objects.filter(email=email).exists():\r\n            messages.error(self.request, \"Cet email n'est associé à aucun compte utilisateur.\")\r\n            return self.form_invalid(form)\r\n        return super().form_valid(form)\r\n\r\nfrom django.shortcuts import render\r\n\r\n"
        }
    ]
}