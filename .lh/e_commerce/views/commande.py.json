{
    "sourceFile": "e_commerce/views/commande.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 83,
            "patches": [
                {
                    "date": 1739964787326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739964846809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,10 @@\n- \n\\ No newline at end of file\n+\r\n+from django.shortcuts import render\r\n+\r\n+\r\n+def commande(request):\r\n+    \r\n+    # Récupération de l'historique des commandes\r\n+    \r\n+    \r\n+    return render(request, 'home/commande.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740049999720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,36 @@\n-\r\n from django.shortcuts import render\r\n \r\n \r\n+def creer_commande(user, methode_paiement):\r\n+    panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=panier)\r\n+    \r\n+    if cart_items.exists():\r\n+        commande = Commande.objects.create(\r\n+            user=user,\r\n+            methode_paiement=methode_paiement\r\n+        )\r\n+        \r\n+        for item in cart_items:\r\n+            LigneCommande.objects.create(\r\n+                commande=commande,\r\n+                product=item.product,\r\n+                quantity=item.quantity,\r\n+                price_unitaire=item.product.price,\r\n+                total_ligne=item.total_price\r\n+            )\r\n+        \r\n+        commande.total = sum(ligne.total_ligne for ligne in commande.lignes.all())\r\n+        commande.save()\r\n+        \r\n+        panier.is_active = False\r\n+        panier.save()\r\n+        \r\n+        return commande\r\n+    \r\n+    return None\r\n+\r\n def commande(request):\r\n     \r\n     # Récupération de l'historique des commandes\r\n     \r\n"
                },
                {
                    "date": 1740050090705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+from django.shortcuts import render\r\n+\r\n+from e_commerce.models import *\r\n+from e_commerce.views import order\r\n+ \r\n+\r\n+def creer_commande(user, methode_paiement):\r\n+    panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=panier)\r\n+    \r\n+    if cart_items.exists():\r\n+        commande = order.objects.create(\r\n+            user=user,\r\n+            methode_paiement=methode_paiement\r\n+        )\r\n+        \r\n+        for item in cart_items:\r\n+            LigneCommande.objects.create(\r\n+                commande=commande,\r\n+                product=item.product,\r\n+                quantity=item.quantity,\r\n+                price_unitaire=item.product.price,\r\n+                total_ligne=item.total_price\r\n+            )\r\n+        \r\n+        commande.total = sum(ligne.total_ligne for ligne in commande.lignes.all())\r\n+        commande.save()\r\n+        \r\n+        panier.is_active = False\r\n+        panier.save()\r\n+        \r\n+        return commande\r\n+    \r\n+    return None\r\n+\r\n+@login_required\r\n+def passer_commande(request):\r\n+    if request.method == 'POST':\r\n+        methode_paiement = request.POST.get('methode_paiement')\r\n+        if methode_paiement in dict(Commande.MethodePaiement.choices):\r\n+            commande = creer_commande(request.user, methode_paiement)\r\n+            if commande:\r\n+                return redirect('confirmation_commande', commande_id=commande.id)\r\n+            else:\r\n+                messages.error(request, \"Votre panier est vide\")\r\n+        else:\r\n+            messages.error(request, \"Méthode de paiement invalide\")\r\n+    return redirect('panier')\r\n+\r\n+def commande(request):\r\n+    \r\n+    # Récupération de l'historique des commandes\r\n+    \r\n+    \r\n+    return render(request, 'home/commande.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740050146397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,31 +2,28 @@\n \r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n  \r\n-\r\n-def creer_commande(user, methode_paiement):\r\n-    panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+def creer_commande(user):\r\n+    # Récupérer le panier actif de l'utilisateur\r\n+    panier = ShoppingCart.objects.get(user=user, is_active=True)  # Ajustez selon votre logique\r\n+    \r\n+    # Récupérer tous les items du panier\r\n     cart_items = CartItem.objects.filter(cart=panier)\r\n     \r\n     if cart_items.exists():\r\n-        commande = order.objects.create(\r\n-            user=user,\r\n-            methode_paiement=methode_paiement\r\n-        )\r\n+        # Créer une nouvelle commande\r\n+        commande = Commande.objects.create(user=user)\r\n         \r\n-        for item in cart_items:\r\n-            LigneCommande.objects.create(\r\n-                commande=commande,\r\n-                product=item.product,\r\n-                quantity=item.quantity,\r\n-                price_unitaire=item.product.price,\r\n-                total_ligne=item.total_price\r\n-            )\r\n-        \r\n-        commande.total = sum(ligne.total_ligne for ligne in commande.lignes.all())\r\n+        # Calculer le total\r\n+        total = sum(item.total_price for item in cart_items)\r\n+        commande.total = total\r\n         commande.save()\r\n         \r\n+        # Vous pouvez aussi créer une table de liaison si nécessaire\r\n+        # Pour garder l'historique des produits commandés\r\n+        \r\n+        # Optionnel: désactiver le panier actuel\r\n         panier.is_active = False\r\n         panier.save()\r\n         \r\n         return commande\r\n"
                },
                {
                    "date": 1740050177748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     cart_items = CartItem.objects.filter(cart=panier)\r\n     \r\n     if cart_items.exists():\r\n         # Créer une nouvelle commande\r\n-        commande = Commande.objects.create(user=user)\r\n+        commande = order.objects.create(user=user)\r\n         \r\n         # Calculer le total\r\n         total = sum(item.total_price for item in cart_items)\r\n         commande.total = total\r\n@@ -48,43 +48,5 @@\n     \r\n     # Récupération de l'historique des commandes\r\n     \r\n     \r\n-    return render(request, 'home/commande.html')\n-from django.shortcuts import render\r\n-\r\n-\r\n-def creer_commande(user, methode_paiement):\r\n-    panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-    cart_items = CartItem.objects.filter(cart=panier)\r\n-    \r\n-    if cart_items.exists():\r\n-        commande = Commande.objects.create(\r\n-            user=user,\r\n-            methode_paiement=methode_paiement\r\n-        )\r\n-        \r\n-        for item in cart_items:\r\n-            LigneCommande.objects.create(\r\n-                commande=commande,\r\n-                product=item.product,\r\n-                quantity=item.quantity,\r\n-                price_unitaire=item.product.price,\r\n-                total_ligne=item.total_price\r\n-            )\r\n-        \r\n-        commande.total = sum(ligne.total_ligne for ligne in commande.lignes.all())\r\n-        commande.save()\r\n-        \r\n-        panier.is_active = False\r\n-        panier.save()\r\n-        \r\n-        return commande\r\n-    \r\n-    return None\r\n-\r\n-def commande(request):\r\n-    \r\n-    # Récupération de l'historique des commandes\r\n-    \r\n-    \r\n     return render(request, 'home/commande.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740050209506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-from django.shortcuts import render\r\n-\r\n+from django.shortcuts import redirect, render\r\n+from django.contrib.auth.decorators import login_required\r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n  \r\n def creer_commande(user):\r\n@@ -33,9 +33,9 @@\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         methode_paiement = request.POST.get('methode_paiement')\r\n-        if methode_paiement in dict(Commande.MethodePaiement.choices):\r\n+        if methode_paiement in dict(order.MethodePaiement.choices):\r\n             commande = creer_commande(request.user, methode_paiement)\r\n             if commande:\r\n                 return redirect('confirmation_commande', commande_id=commande.id)\r\n             else:\r\n"
                },
                {
                    "date": 1740050256079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n from django.shortcuts import redirect, render\r\n from django.contrib.auth.decorators import login_required\r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n- \r\n+from django.contrib import messages\r\n+\r\n+\r\n def creer_commande(user):\r\n     # Récupérer le panier actif de l'utilisateur\r\n     panier = ShoppingCart.objects.get(user=user, is_active=True)  # Ajustez selon votre logique\r\n     \r\n"
                },
                {
                    "date": 1740050343209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,7 +48,12 @@\n \r\n def commande(request):\r\n     \r\n     # Récupération de l'historique des commandes\r\n+    commandes = order.objects.filter(user=request.user)\r\n+    # Récupération du nombre de commandes\r\n+    nb_commandes = commandes.count()\r\n\\ No newline at end of file\n     \r\n+    return render(request, 'home/commande.html', {'commandes': commandes, 'nb_commandes': nb_commandes})\r\n     \r\n-    return render(request, 'home/commande.html')\n+    \r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740050665323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,15 +45,13 @@\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     return redirect('panier')\r\n \r\n-def commande(request):\r\n-    \r\n-    # Récupération de l'historique des commandes\r\n-    commandes = order.objects.filter(user=request.user)\r\n-    # Récupération du nombre de commandes\r\n-    nb_commandes = commandes.count()\r\n-    \r\n-    return render(request, 'home/commande.html', {'commandes': commandes, 'nb_commandes': nb_commandes})\r\n-    \r\n-    \r\n-    \n\\ No newline at end of file\n+ \r\n+ \r\n+\r\n+def order_list(request):\r\n+    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    context = {\r\n+        'orders': orders,\r\n+    }\r\n+    return render(request, 'home/commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740051405510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n             else:\r\n                 messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n-    return redirect('panier')\r\n+    return redirect('')\r\n \r\n  \r\n  \r\n \r\n"
                },
                {
                    "date": 1740051649921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n             else:\r\n                 messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n-    return redirect('')\r\n+    return redirect('order_list')\r\n \r\n  \r\n  \r\n \r\n"
                },
                {
                    "date": 1740052152473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,5 +53,8 @@\n     orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n     context = {\r\n         'orders': orders,\r\n     }\r\n-    return render(request, 'home/commande.html', context)\n\\ No newline at end of file\n+    return render(request, 'home/commande.html', context)\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1740052172582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,4 +57,20 @@\n     return render(request, 'home/commande.html', context)\r\n \r\n \r\n \r\n+@login_required\r\n+def checkout_view(request):\r\n+    # Récupérer le panier actif\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=cart)\r\n+    \r\n+    # Calculer les totaux\r\n+    subtotal = sum(item.total_price for item in cart_items)\r\n+    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n+    \r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'total': total,\r\n+    }\r\n+    return render(request, 'home/.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740052207127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,5 +72,5 @@\n         'cart_items': cart_items,\r\n         'subtotal': subtotal,\r\n         'total': total,\r\n     }\r\n-    return render(request, 'home/.html', context)\n\\ No newline at end of file\n+    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740052845360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,41 +3,15 @@\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n from django.contrib import messages\r\n \r\n+from ..models import Order, ShoppingCart, CartItem  # Importez depuis votre dossier models\r\n \r\n-def creer_commande(user):\r\n-    # Récupérer le panier actif de l'utilisateur\r\n-    panier = ShoppingCart.objects.get(user=user, is_active=True)  # Ajustez selon votre logique\r\n-    \r\n-    # Récupérer tous les items du panier\r\n-    cart_items = CartItem.objects.filter(cart=panier)\r\n-    \r\n-    if cart_items.exists():\r\n-        # Créer une nouvelle commande\r\n-        commande = order.objects.create(user=user)\r\n-        \r\n-        # Calculer le total\r\n-        total = sum(item.total_price for item in cart_items)\r\n-        commande.total = total\r\n-        commande.save()\r\n-        \r\n-        # Vous pouvez aussi créer une table de liaison si nécessaire\r\n-        # Pour garder l'historique des produits commandés\r\n-        \r\n-        # Optionnel: désactiver le panier actuel\r\n-        panier.is_active = False\r\n-        panier.save()\r\n-        \r\n-        return commande\r\n-    \r\n-    return None\r\n-\r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n-        methode_paiement = request.POST.get('methode_paiement')\r\n-        if methode_paiement in dict(order.MethodePaiement.choices):\r\n+        methode_paiement = request.POST.get('payment_method')\r\n+        if methode_paiement in dict(Order.PaymentMethod.choices):  # Utilisez Order.PaymentMethod au lieu de order.MethodePaiement\r\n             commande = creer_commande(request.user, methode_paiement)\r\n             if commande:\r\n                 return redirect('confirmation_commande', commande_id=commande.id)\r\n             else:\r\n@@ -45,8 +19,49 @@\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     return redirect('order_list')\r\n \r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+        \r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n+        \r\n+        if cart_items.exists():\r\n+            # Créer une nouvelle commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method\r\n+            )\r\n+            \r\n+            # Calculer le total\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            commande.total = total\r\n+            \r\n+            # Créer les lignes de commande\r\n+            for item in cart_items:\r\n+                OrderLine.objects.create(\r\n+                    order=commande,\r\n+                    product=item.product,\r\n+                    quantity=item.quantity,\r\n+                    unit_price=item.product.price,\r\n+                    line_total=item.total_price\r\n+                )\r\n+            \r\n+            commande.save()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = False\r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n+    \r\n+    return None\r\n  \r\n  \r\n \r\n def order_list(request):\r\n"
                },
                {
                    "date": 1740052901714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,41 @@\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n from django.contrib import messages\r\n \r\n-from ..models import Order, ShoppingCart, CartItem  # Importez depuis votre dossier models\r\n \r\n+def creer_commande(user):\r\n+    # Récupérer le panier actif de l'utilisateur\r\n+    panier = ShoppingCart.objects.get(user=user, is_active=True)  # Ajustez selon votre logique\r\n+    \r\n+    # Récupérer tous les items du panier\r\n+    cart_items = CartItem.objects.filter(cart=panier)\r\n+    \r\n+    if cart_items.exists():\r\n+        # Créer une nouvelle commande\r\n+        commande = order.objects.create(user=user)\r\n+        \r\n+        # Calculer le total\r\n+        total = sum(item.total_price for item in cart_items)\r\n+        commande.total = total\r\n+        commande.save()\r\n+        \r\n+        # Vous pouvez aussi créer une table de liaison si nécessaire\r\n+        # Pour garder l'historique des produits commandés\r\n+        \r\n+        # Optionnel: désactiver le panier actuel\r\n+        panier.is_active = False\r\n+        panier.save()\r\n+        \r\n+        return commande\r\n+    \r\n+    return None\r\n+\r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n-        methode_paiement = request.POST.get('payment_method')\r\n-        if methode_paiement in dict(Order.PaymentMethod.choices):  # Utilisez Order.PaymentMethod au lieu de order.MethodePaiement\r\n+        methode_paiement = request.POST.get('methode_paiement')\r\n+        if methode_paiement in dict(order.MethodePaiement.choices):\r\n             commande = creer_commande(request.user, methode_paiement)\r\n             if commande:\r\n                 return redirect('confirmation_commande', commande_id=commande.id)\r\n             else:\r\n@@ -19,49 +45,8 @@\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     return redirect('order_list')\r\n \r\n-def creer_commande(user, payment_method):\r\n-    try:\r\n-        # Récupérer le panier actif de l'utilisateur\r\n-        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-        \r\n-        # Récupérer tous les items du panier\r\n-        cart_items = CartItem.objects.filter(cart=panier)\r\n-        \r\n-        if cart_items.exists():\r\n-            # Créer une nouvelle commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method\r\n-            )\r\n-            \r\n-            # Calculer le total\r\n-            total = sum(item.total_price for item in cart_items)\r\n-            commande.total = total\r\n-            \r\n-            # Créer les lignes de commande\r\n-            for item in cart_items:\r\n-                OrderLine.objects.create(\r\n-                    order=commande,\r\n-                    product=item.product,\r\n-                    quantity=item.quantity,\r\n-                    unit_price=item.product.price,\r\n-                    line_total=item.total_price\r\n-                )\r\n-            \r\n-            commande.save()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = False\r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n-    except ShoppingCart.DoesNotExist:\r\n-        return None\r\n-    \r\n-    return None\r\n  \r\n  \r\n \r\n def order_list(request):\r\n"
                },
                {
                    "date": 1740052942037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,19 +34,18 @@\n \r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n-        methode_paiement = request.POST.get('methode_paiement')\r\n-        if methode_paiement in dict(order.MethodePaiement.choices):\r\n+        methode_paiement = request.POST.get('payment_method')\r\n+        if methode_paiement in dict(Order.PaymentMethod.choices):  # Utilisez Order.PaymentMethod au lieu de order.MethodePaiement\r\n             commande = creer_commande(request.user, methode_paiement)\r\n             if commande:\r\n                 return redirect('confirmation_commande', commande_id=commande.id)\r\n             else:\r\n                 messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     return redirect('order_list')\r\n-\r\n  \r\n  \r\n \r\n def order_list(request):\r\n"
                },
                {
                    "date": 1740052986816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,35 +4,49 @@\n from e_commerce.views import order\r\n from django.contrib import messages\r\n \r\n \r\n-def creer_commande(user):\r\n-    # Récupérer le panier actif de l'utilisateur\r\n-    panier = ShoppingCart.objects.get(user=user, is_active=True)  # Ajustez selon votre logique\r\n-    \r\n-    # Récupérer tous les items du panier\r\n-    cart_items = CartItem.objects.filter(cart=panier)\r\n-    \r\n-    if cart_items.exists():\r\n-        # Créer une nouvelle commande\r\n-        commande = order.objects.create(user=user)\r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n         \r\n-        # Calculer le total\r\n-        total = sum(item.total_price for item in cart_items)\r\n-        commande.total = total\r\n-        commande.save()\r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n         \r\n-        # Vous pouvez aussi créer une table de liaison si nécessaire\r\n-        # Pour garder l'historique des produits commandés\r\n-        \r\n-        # Optionnel: désactiver le panier actuel\r\n-        panier.is_active = False\r\n-        panier.save()\r\n-        \r\n-        return commande\r\n+        if cart_items.exists():\r\n+            # Créer une nouvelle commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method\r\n+            )\r\n+            \r\n+            # Calculer le total\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            commande.total = total\r\n+            \r\n+            # Créer les lignes de commande\r\n+            for item in cart_items:\r\n+                Order.objects.create(\r\n+                    order=commande,\r\n+                    product=item.product,\r\n+                    quantity=item.quantity,\r\n+                    unit_price=item.product.price,\r\n+                    line_total=item.total_price\r\n+                )\r\n+            \r\n+            commande.save()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = False\r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n     \r\n     return None\r\n-\r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         methode_paiement = request.POST.get('payment_method')\r\n"
                },
                {
                    "date": 1740053089885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+from django.shortcuts import redirect, render\r\n+from django.contrib.auth.decorators import login_required\r\n+from e_commerce.models import *\r\n+from e_commerce.views import order\r\n+from django.contrib import messages\r\n+\r\n+\r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+        \r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n+        \r\n+        if cart_items.exists():\r\n+            # Créer une nouvelle commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method\r\n+            )\r\n+            \r\n+            # Calculer le total\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            commande.total = total\r\n+            \r\n+            # Créer les lignes de commande\r\n+            for item in cart_items:\r\n+                Order.objects.create(\r\n+                    order=commande,\r\n+                    product=item.product,\r\n+                    quantity=item.quantity,\r\n+                    unit_price=item.product.price,\r\n+                    line_total=item.total_price\r\n+                )\r\n+            \r\n+            commande.save()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = False    \r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n+    \r\n+    return None\r\n+@login_required\r\n+def passer_commande(request):\r\n+    if request.method == 'POST':\r\n+        methode_paiement = request.POST.get('payment_method')\r\n+        if methode_paiement in dict(Order.PaymentMethod.choices):  # Utilisez Order.PaymentMethod au lieu de order.MethodePaiement\r\n+            commande = creer_commande(request.user, methode_paiement)\r\n+            if commande:\r\n+                return redirect('confirmation_commande', commande_id=commande.id)\r\n+            else:\r\n+                messages.error(request, \"Votre panier est vide\")\r\n+        else:\r\n+            messages.error(request, \"Méthode de paiement invalide\")\r\n+    return redirect('order_list')\r\n+ \r\n+ \r\n+\r\n+def order_list(request):\r\n+    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    context = {\r\n+        'orders': orders,\r\n+    }\r\n+    return render(request, 'home/commande.html', context)\r\n+\r\n+\r\n+\r\n+@login_required\r\n+def checkout_view(request):\r\n+    # Récupérer le panier actif\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=cart)\r\n+    \r\n+    # Calculer les totaux\r\n+    subtotal = sum(item.total_price for item in cart_items)\r\n+    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n+    \r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'total': total,\r\n+    }\r\n+    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740053730543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from e_commerce.views import order\r\n from django.contrib import messages\r\n \r\n \r\n+ \r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n         panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n@@ -13,119 +14,28 @@\n         # Récupérer tous les items du panier\r\n         cart_items = CartItem.objects.filter(cart=panier)\r\n         \r\n         if cart_items.exists():\r\n-            # Créer une nouvelle commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method\r\n-            )\r\n-            \r\n-            # Calculer le total\r\n+            # Calculer le total d'abord\r\n             total = sum(item.total_price for item in cart_items)\r\n-            commande.total = total\r\n             \r\n-            # Créer les lignes de commande\r\n-            for item in cart_items:\r\n-                Order.objects.create(\r\n-                    order=commande,\r\n-                    product=item.product,\r\n-                    quantity=item.quantity,\r\n-                    unit_price=item.product.price,\r\n-                    line_total=item.total_price\r\n-                )\r\n-            \r\n-            commande.save()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = False    \r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n-    except ShoppingCart.DoesNotExist:\r\n-        return None\r\n-    \r\n-    return None\r\n-@login_required\r\n-def passer_commande(request):\r\n-    if request.method == 'POST':\r\n-        methode_paiement = request.POST.get('payment_method')\r\n-        if methode_paiement in dict(Order.PaymentMethod.choices):  # Utilisez Order.PaymentMethod au lieu de order.MethodePaiement\r\n-            commande = creer_commande(request.user, methode_paiement)\r\n-            if commande:\r\n-                return redirect('confirmation_commande', commande_id=commande.id)\r\n-            else:\r\n-                messages.error(request, \"Votre panier est vide\")\r\n-        else:\r\n-            messages.error(request, \"Méthode de paiement invalide\")\r\n-    return redirect('order_list')\r\n- \r\n- \r\n-\r\n-def order_list(request):\r\n-    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n-    context = {\r\n-        'orders': orders,\r\n-    }\r\n-    return render(request, 'home/commande.html', context)\r\n-\r\n-\r\n-\r\n-@login_required\r\n-def checkout_view(request):\r\n-    # Récupérer le panier actif\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = CartItem.objects.filter(cart=cart)\r\n-    \r\n-    # Calculer les totaux\r\n-    subtotal = sum(item.total_price for item in cart_items)\r\n-    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n-    \r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'total': total,\r\n-    }\r\n-    return render(request, 'home/valider_commande.html', context)\n-from django.shortcuts import redirect, render\r\n-from django.contrib.auth.decorators import login_required\r\n-from e_commerce.models import *\r\n-from e_commerce.views import order\r\n-from django.contrib import messages\r\n-\r\n-\r\n-def creer_commande(user, payment_method):\r\n-    try:\r\n-        # Récupérer le panier actif de l'utilisateur\r\n-        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-        \r\n-        # Récupérer tous les items du panier\r\n-        cart_items = CartItem.objects.filter(cart=panier)\r\n-        \r\n-        if cart_items.exists():\r\n-            # Créer une nouvelle commande\r\n+            # Créer la commande\r\n             commande = Order.objects.create(\r\n                 user=user,\r\n-                payment_method=payment_method\r\n+                payment_method=payment_method,\r\n+                total=total\r\n             )\r\n             \r\n-            # Calculer le total\r\n-            total = sum(item.total_price for item in cart_items)\r\n-            commande.total = total\r\n-            \r\n-            # Créer les lignes de commande\r\n+            # Créer les lignes de commande pour chaque item\r\n             for item in cart_items:\r\n-                Order.objects.create(\r\n-                    order=commande,\r\n-                    product=item.product,\r\n-                    quantity=item.quantity,\r\n-                    unit_price=item.product.price,\r\n-                    line_total=item.total_price\r\n+                OrderLine.objects.create(\r\n+                    order=commande,          # Référence à la commande\r\n+                    product=item.product,    # Produit de l'item\r\n+                    quantity=item.quantity,  # Quantité\r\n+                    unit_price=item.product.price,  # Prix unitaire\r\n+                    line_total=item.total_price     # Total de la ligne\r\n                 )\r\n             \r\n-            commande.save()\r\n-            \r\n             # Désactiver le panier\r\n             panier.is_active = False\r\n             panier.save()\r\n             \r\n@@ -134,23 +44,24 @@\n     except ShoppingCart.DoesNotExist:\r\n         return None\r\n     \r\n     return None\r\n+\r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n-        methode_paiement = request.POST.get('payment_method')\r\n-        if methode_paiement in dict(Order.PaymentMethod.choices):  # Utilisez Order.PaymentMethod au lieu de order.MethodePaiement\r\n-            commande = creer_commande(request.user, methode_paiement)\r\n+        payment_method = request.POST.get('payment_method')\r\n+        if payment_method in dict(Order.PaymentMethod.choices):\r\n+            commande = creer_commande(request.user, payment_method)\r\n             if commande:\r\n+                messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                 return redirect('confirmation_commande', commande_id=commande.id)\r\n             else:\r\n                 messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     return redirect('order_list')\r\n  \r\n- \r\n \r\n def order_list(request):\r\n     orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n     context = {\r\n"
                },
                {
                    "date": 1740053742246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n from e_commerce.views import order\r\n from django.contrib import messages\r\n \r\n \r\n- \r\n+from ..models import Order, OrderLine, ShoppingCart, CartItem  # Assurez-vous d'importer OrderLine\r\n+\r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n         panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n"
                },
                {
                    "date": 1740053753905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,9 @@\n from e_commerce.views import order\r\n from django.contrib import messages\r\n \r\n \r\n-from ..models import Order, OrderLine, ShoppingCart, CartItem  # Assurez-vous d'importer OrderLine\r\n-\r\n+ \r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n         panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n"
                },
                {
                    "date": 1740055093606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,9 @@\n     cart_items = CartItem.objects.filter(cart=cart)\r\n     \r\n     # Calculer les totaux\r\n     subtotal = sum(item.total_price for item in cart_items)\r\n+    print(subtotal)\r\n     total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n     \r\n     context = {\r\n         'cart_items': cart_items,\r\n"
                },
                {
                    "date": 1740064120736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n                     line_total=item.total_price     # Total de la ligne\r\n                 )\r\n             \r\n             # Désactiver le panier\r\n-            panier.is_active = False\r\n+            panier.is_active = True\r\n             panier.save()\r\n             \r\n             return commande\r\n             \r\n"
                },
                {
                    "date": 1740064280298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,13 @@\n                     unit_price=item.product.price,  # Prix unitaire\r\n                     line_total=item.total_price     # Total de la ligne\r\n                 )\r\n             \r\n+            # Supprimer tous les items du panier\r\n+            cart_items.delete()\r\n+            \r\n             # Désactiver le panier\r\n-            panier.is_active = True\r\n+            panier.is_active = False\r\n             panier.save()\r\n             \r\n             return commande\r\n             \r\n"
                },
                {
                    "date": 1740064479921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             # Supprimer tous les items du panier\r\n             cart_items.delete()\r\n             \r\n             # Désactiver le panier\r\n-            panier.is_active = False\r\n+            panier.is_active = True\r\n             panier.save()\r\n             \r\n             return commande\r\n             \r\n"
                },
                {
                    "date": 1740068436780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,15 @@\n  \r\n \r\n def order_list(request):\r\n     orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n     context = {\r\n         'orders': orders,\r\n+        'number': number\r\n     }\r\n     return render(request, 'home/commande.html', context)\r\n \r\n \r\n@@ -84,10 +89,15 @@\n     subtotal = sum(item.total_price for item in cart_items)\r\n     print(subtotal)\r\n     total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n     \r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n     context = {\r\n         'cart_items': cart_items,\r\n         'subtotal': subtotal,\r\n         'total': total,\r\n+        'number': number\r\n     }\r\n     return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740070365576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,16 @@\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n+        \r\n+        # Vérifiez si la méthode de paiement est valide\r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n+            # Si la méthode de paiement est \"Cash\", redirigez directement vers la liste des commandes\r\n+            if payment_method == Order.PaymentMethod.CASH:\r\n+                return redirect('order_list')\r\n+            \r\n+            # Créez la commande pour les autres méthodes de paiement\r\n             commande = creer_commande(request.user, payment_method)\r\n             if commande:\r\n                 messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                 return redirect('confirmation_commande', commande_id=commande.id)\r\n@@ -62,10 +69,10 @@\n                 messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     return redirect('order_list')\r\n- \r\n \r\n+\r\n def order_list(request):\r\n     orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n"
                },
                {
                    "date": 1740070604645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+from django.shortcuts import redirect, render\r\n+from django.contrib.auth.decorators import login_required\r\n+from e_commerce.models import *\r\n+from e_commerce.views import order\r\n+from django.contrib import messages\r\n+\r\n+\r\n+ \r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+        \r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n+        \r\n+        if cart_items.exists():\r\n+            # Calculer le total d'abord\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            \r\n+            # Créer la commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method,\r\n+                total=total\r\n+            )\r\n+            \r\n+            # Créer les lignes de commande pour chaque item\r\n+            for item in cart_items:\r\n+                OrderLine.objects.create(\r\n+                    order=commande,          # Référence à la commande\r\n+                    product=item.product,    # Produit de l'item\r\n+                    quantity=item.quantity,  # Quantité\r\n+                    unit_price=item.product.price,  # Prix unitaire\r\n+                    line_total=item.total_price     # Total de la ligne\r\n+                )\r\n+            \r\n+            # Supprimer tous les items du panier\r\n+            cart_items.delete()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = True\r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n+    \r\n+    return None\r\n+\r\n+@login_required\r\n+def passer_commande(request):\r\n+    if request.method == 'POST':\r\n+        payment_method = request.POST.get('payment_method')\r\n+        \r\n+        # Vérifiez si la méthode de paiement est valide\r\n+        if payment_method in dict(Order.PaymentMethod.choices):\r\n+            # Si la méthode de paiement est \"Cash\", redirigez directement vers la liste des commandes\r\n+            if payment_method == Order.PaymentMethod.CASH:\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                return redirect('order_list')\r\n+            \r\n+            # Créez la commande pour les autres méthodes de paiement\r\n+            commande = creer_commande(request.user, payment_method)\r\n+            if commande:\r\n+                messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                return redirect('confirmation_commande', commande_id=commande.id)\r\n+            else:\r\n+                messages.error(request, \"Votre panier est vide\")\r\n+        else:\r\n+            messages.error(request, \"Méthode de paiement invalide\")\r\n+    return redirect('order_list')\r\n+\r\n+\r\n+def order_list(request):\r\n+    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'orders': orders,\r\n+        'number': number\r\n+    }\r\n+    return render(request, 'home/commande.html', context)\r\n+\r\n+\r\n+\r\n+@login_required\r\n+def checkout_view(request):\r\n+    # Récupérer le panier actif\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=cart)\r\n+    \r\n+    # Calculer les totaux\r\n+    subtotal = sum(item.total_price for item in cart_items)\r\n+    print(subtotal)\r\n+    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n+    \r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'total': total,\r\n+        'number': number\r\n+    }\r\n+    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740070742933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+from django.shortcuts import redirect, render\r\n+from django.contrib.auth.decorators import login_required\r\n+from e_commerce.models import *\r\n+from e_commerce.views import order\r\n+from django.contrib import messages\r\n+\r\n+\r\n+ \r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+        \r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n+        \r\n+        if cart_items.exists():\r\n+            # Calculer le total d'abord\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            \r\n+            # Créer la commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method,\r\n+                total=total\r\n+            )\r\n+            \r\n+            # Créer les lignes de commande pour chaque item\r\n+            for item in cart_items:\r\n+                OrderLine.objects.create(\r\n+                    order=commande,          # Référence à la commande\r\n+                    product=item.product,    # Produit de l'item\r\n+                    quantity=item.quantity,  # Quantité\r\n+                    unit_price=item.product.price,  # Prix unitaire\r\n+                    line_total=item.total_price     # Total de la ligne\r\n+                )\r\n+            \r\n+            # Supprimer tous les items du panier\r\n+            cart_items.delete()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = True\r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n+    \r\n+    return None\r\n+\r\n+@login_required\r\n+def passer_commande(request):\r\n+    if request.method == 'POST':\r\n+        payment_method = request.POST.get('payment_method')\r\n+        if payment_method in dict(Order.PaymentMethod.choices):\r\n+            if payment_method == Order.PaymentMethod.CASH:\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('confirmation_commande', commande_id=commande.id)\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+        else:\r\n+            messages.error(request, \"Méthode de paiement invalide\")\r\n+    return redirect('order_list')\r\n+ \r\n+\r\n+def order_list(request):\r\n+    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'orders': orders,\r\n+        'number': number\r\n+    }\r\n+    return render(request, 'home/commande.html', context)\r\n+\r\n+\r\n+\r\n+@login_required\r\n+def checkout_view(request):\r\n+    # Récupérer le panier actif\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=cart)\r\n+    \r\n+    # Calculer les totaux\r\n+    subtotal = sum(item.total_price for item in cart_items)\r\n+    print(subtotal)\r\n+    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n+    \r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'total': total,\r\n+        'number': number\r\n+    }\r\n+    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740070851154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,21 +52,33 @@\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n+        \r\n+        # Check if the payment method is valid\r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n+            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n             if payment_method == Order.PaymentMethod.CASH:\r\n                 commande = creer_commande(request.user, payment_method)\r\n                 if commande:\r\n                     messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+            else:\r\n+                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                     return redirect('confirmation_commande', commande_id=commande.id)\r\n                 else:\r\n                     messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n+    \r\n     return redirect('order_list')\r\n- \r\n \r\n+\r\n def order_list(request):\r\n     orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n"
                },
                {
                    "date": 1740071830908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,119 +87,10 @@\n     context = {\r\n         'orders': orders,\r\n         'number': number\r\n     }\r\n-    return render(request, 'home/commande.html', context)\r\n-\r\n-\r\n-\r\n-@login_required\r\n-def checkout_view(request):\r\n-    # Récupérer le panier actif\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = CartItem.objects.filter(cart=cart)\r\n     \r\n-    # Calculer les totaux\r\n-    subtotal = sum(item.total_price for item in cart_items)\r\n-    print(subtotal)\r\n-    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n-    \r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'total': total,\r\n-        'number': number\r\n-    }\r\n-    return render(request, 'home/valider_commande.html', context)\n-from django.shortcuts import redirect, render\r\n-from django.contrib.auth.decorators import login_required\r\n-from e_commerce.models import *\r\n-from e_commerce.views import order\r\n-from django.contrib import messages\r\n-\r\n-\r\n- \r\n-def creer_commande(user, payment_method):\r\n-    try:\r\n-        # Récupérer le panier actif de l'utilisateur\r\n-        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-        \r\n-        # Récupérer tous les items du panier\r\n-        cart_items = CartItem.objects.filter(cart=panier)\r\n-        \r\n-        if cart_items.exists():\r\n-            # Calculer le total d'abord\r\n-            total = sum(item.total_price for item in cart_items)\r\n-            \r\n-            # Créer la commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method,\r\n-                total=total\r\n-            )\r\n-            \r\n-            # Créer les lignes de commande pour chaque item\r\n-            for item in cart_items:\r\n-                OrderLine.objects.create(\r\n-                    order=commande,          # Référence à la commande\r\n-                    product=item.product,    # Produit de l'item\r\n-                    quantity=item.quantity,  # Quantité\r\n-                    unit_price=item.product.price,  # Prix unitaire\r\n-                    line_total=item.total_price     # Total de la ligne\r\n-                )\r\n-            \r\n-            # Supprimer tous les items du panier\r\n-            cart_items.delete()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = True\r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n-    except ShoppingCart.DoesNotExist:\r\n-        return None\r\n-    \r\n-    return None\r\n-\r\n-@login_required\r\n-def passer_commande(request):\r\n-    if request.method == 'POST':\r\n-        payment_method = request.POST.get('payment_method')\r\n-        \r\n-        # Vérifiez si la méthode de paiement est valide\r\n-        if payment_method in dict(Order.PaymentMethod.choices):\r\n-            # Si la méthode de paiement est \"Cash\", redirigez directement vers la liste des commandes\r\n-            if payment_method == Order.PaymentMethod.CASH:\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                return redirect('order_list')\r\n-            \r\n-            # Créez la commande pour les autres méthodes de paiement\r\n-            commande = creer_commande(request.user, payment_method)\r\n-            if commande:\r\n-                messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                return redirect('confirmation_commande', commande_id=commande.id)\r\n-            else:\r\n-                messages.error(request, \"Votre panier est vide\")\r\n-        else:\r\n-            messages.error(request, \"Méthode de paiement invalide\")\r\n-    return redirect('order_list')\r\n-\r\n-\r\n-def order_list(request):\r\n-    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'orders': orders,\r\n-        'number': number\r\n-    }\r\n+    status_filter = request.GET.get('status_filter', None)\r\n     return render(request, 'home/commande.html', context)\r\n \r\n \r\n \r\n@@ -223,115 +114,5 @@\n         'subtotal': subtotal,\r\n         'total': total,\r\n         'number': number\r\n     }\r\n-    return render(request, 'home/valider_commande.html', context)\n-from django.shortcuts import redirect, render\r\n-from django.contrib.auth.decorators import login_required\r\n-from e_commerce.models import *\r\n-from e_commerce.views import order\r\n-from django.contrib import messages\r\n-\r\n-\r\n- \r\n-def creer_commande(user, payment_method):\r\n-    try:\r\n-        # Récupérer le panier actif de l'utilisateur\r\n-        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-        \r\n-        # Récupérer tous les items du panier\r\n-        cart_items = CartItem.objects.filter(cart=panier)\r\n-        \r\n-        if cart_items.exists():\r\n-            # Calculer le total d'abord\r\n-            total = sum(item.total_price for item in cart_items)\r\n-            \r\n-            # Créer la commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method,\r\n-                total=total\r\n-            )\r\n-            \r\n-            # Créer les lignes de commande pour chaque item\r\n-            for item in cart_items:\r\n-                OrderLine.objects.create(\r\n-                    order=commande,          # Référence à la commande\r\n-                    product=item.product,    # Produit de l'item\r\n-                    quantity=item.quantity,  # Quantité\r\n-                    unit_price=item.product.price,  # Prix unitaire\r\n-                    line_total=item.total_price     # Total de la ligne\r\n-                )\r\n-            \r\n-            # Supprimer tous les items du panier\r\n-            cart_items.delete()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = True\r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n-    except ShoppingCart.DoesNotExist:\r\n-        return None\r\n-    \r\n-    return None\r\n-\r\n-@login_required\r\n-def passer_commande(request):\r\n-    if request.method == 'POST':\r\n-        payment_method = request.POST.get('payment_method')\r\n-        \r\n-        # Vérifiez si la méthode de paiement est valide\r\n-        if payment_method in dict(Order.PaymentMethod.choices):\r\n-            # Si la méthode de paiement est \"Cash\", redirigez directement vers la liste des commandes\r\n-            if payment_method == Order.PaymentMethod.CASH:\r\n-                return redirect('order_list')\r\n-            \r\n-            # Créez la commande pour les autres méthodes de paiement\r\n-            commande = creer_commande(request.user, payment_method)\r\n-            if commande:\r\n-                messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                return redirect('confirmation_commande', commande_id=commande.id)\r\n-            else:\r\n-                messages.error(request, \"Votre panier est vide\")\r\n-        else:\r\n-            messages.error(request, \"Méthode de paiement invalide\")\r\n-    return redirect('order_list')\r\n-\r\n-\r\n-def order_list(request):\r\n-    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'orders': orders,\r\n-        'number': number\r\n-    }\r\n-    return render(request, 'home/commande.html', context)\r\n-\r\n-\r\n-\r\n-@login_required\r\n-def checkout_view(request):\r\n-    # Récupérer le panier actif\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = CartItem.objects.filter(cart=cart)\r\n-    \r\n-    # Calculer les totaux\r\n-    subtotal = sum(item.total_price for item in cart_items)\r\n-    print(subtotal)\r\n-    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n-    \r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'total': total,\r\n-        'number': number\r\n-    }\r\n     return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740071839649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,12 @@\n         'number': number\r\n     }\r\n     \r\n     status_filter = request.GET.get('status_filter', None)\r\n+    if status_filter:\r\n+        orders = Order.objects.filter(status=status_filter)\r\n+    else:\r\n+        orders = Order.objects.all()\r\n     return render(request, 'home/commande.html', context)\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1740071893601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,18 +83,22 @@\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n     else:\r\n         number = 0\r\n-    context = {\r\n-        'orders': orders,\r\n-        'number': number\r\n-    }\r\n+        \r\n     \r\n     status_filter = request.GET.get('status_filter', None)\r\n     if status_filter:\r\n-        orders = Order.objects.filter(status=status_filter)\r\n+        orders_filter = Order.objects.filter(status=status_filter)\r\n     else:\r\n         orders = Order.objects.all()\r\n+    context = {\r\n+        'orders': orders,\r\n+        'number': number,\r\n+        'orders_filter': orders_filter\r\n+    }\r\n+    \r\n+   \r\n     return render(request, 'home/commande.html', context)\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1740072025371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     status_filter = request.GET.get('status_filter', None)\r\n     if status_filter:\r\n         orders_filter = Order.objects.filter(status=status_filter)\r\n     else:\r\n-        orders = Order.objects.all()\r\n+        orders_filter = Order.objects.all()\r\n     context = {\r\n         'orders': orders,\r\n         'number': number,\r\n         'orders_filter': orders_filter\r\n"
                },
                {
                    "date": 1740072671333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,11 +85,11 @@\n     else:\r\n         number = 0\r\n         \r\n     \r\n-    status_filter = request.GET.get('status_filter', None)\r\n-    if status_filter:\r\n-        orders_filter = Order.objects.filter(status=status_filter)\r\n+    status = request.GET.get('status_filter', None)\r\n+    if status:\r\n+        orders_filter = Order.objects.filter(status=status)\r\n     else:\r\n         orders_filter = Order.objects.all()\r\n     context = {\r\n         'orders': orders,\r\n"
                },
                {
                    "date": 1740072730267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,19 +83,12 @@\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n     else:\r\n         number = 0\r\n-        \r\n-    \r\n-    status = request.GET.get('status_filter', None)\r\n-    if status:\r\n-        orders_filter = Order.objects.filter(status=status)\r\n-    else:\r\n-        orders_filter = Order.objects.all()\r\n     context = {\r\n         'orders': orders,\r\n         'number': number,\r\n-        'orders_filter': orders_filter\r\n+        'orders': orders\r\n     }\r\n     \r\n    \r\n     return render(request, 'home/commande.html', context)\r\n"
                },
                {
                    "date": 1740075633392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+from django.shortcuts import redirect, render\r\n+from django.contrib.auth.decorators import login_required\r\n+from e_commerce.models import *\r\n+from e_commerce.views import order\r\n+from django.contrib import messages\r\n+from django.core.mail import send_mail\r\n+from django.template.loader import render_to_string\r\n+from django.conf import settings\r\n+\r\n+ \r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+        \r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n+        \r\n+        if cart_items.exists():\r\n+            # Calculer le total d'abord\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            \r\n+            # Créer la commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method,\r\n+                total=total\r\n+            )\r\n+            \r\n+            # Créer les lignes de commande pour chaque item\r\n+            for item in cart_items:\r\n+                OrderLine.objects.create(\r\n+                    order=commande,          # Référence à la commande\r\n+                    product=item.product,    # Produit de l'item\r\n+                    quantity=item.quantity,  # Quantité\r\n+                    unit_price=item.product.price,  # Prix unitaire\r\n+                    line_total=item.total_price     # Total de la ligne\r\n+                )\r\n+            \r\n+            # Supprimer tous les items du panier\r\n+            cart_items.delete()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = True\r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n+    \r\n+    return None\r\n+\r\n+\r\n+\r\n+def envoyer_email_confirmation(commande):\r\n+    \"\"\"\r\n+    Envoie un email de confirmation au client avec les détails de sa commande.\r\n+    \r\n+    Args:\r\n+        commande: Instance de la commande\r\n+    \"\"\"\r\n+    # Contexte pour le template\r\n+    context = {\r\n+        'commande': commande,\r\n+        'articles': commande.articles.all(),\r\n+        'total': commande.montant_total,\r\n+        'ref': commande.reference,\r\n+        'date': commande.date_creation.strftime('%d/%m/%Y'),\r\n+        'mode_paiement': commande.get_payment_method_display()\r\n+    }\r\n+    \r\n+    # Génération du contenu HTML de l'email\r\n+    html_message = render_to_string('home/confirmation_commande.html', context)\r\n+    \r\n+    # Génération du contenu texte de l'email\r\n+    text_message = f\"\"\"\r\n+    Confirmation de votre commande {commande.reference}\r\n+    \r\n+    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n+    Mode de paiement: {commande.get_payment_method_display()}\r\n+    \r\n+    Articles commandés:\r\n+    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}€\" for article in commande.articles.all()])}\r\n+    \r\n+    Total: {commande.montant_total}€\r\n+    \r\n+    Merci de votre confiance!\r\n+    \"\"\"\r\n+    \r\n+    # Envoi de l'email\r\n+    send_mail(\r\n+        subject=f'Confirmation de votre commande #{commande.reference}',\r\n+        message=text_message,\r\n+        from_email=settings.DEFAULT_FROM_EMAIL,\r\n+        recipient_list=[commande.user.email],\r\n+        html_message=html_message\r\n+    )\r\n+\r\n+@login_required\r\n+def passer_commande(request):\r\n+    if request.method == 'POST':\r\n+        payment_method = request.POST.get('payment_method')\r\n+       \r\n+        # Check if the payment method is valid\r\n+        if payment_method in dict(Order.PaymentMethod.choices):\r\n+            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n+            if payment_method == Order.PaymentMethod.CASH:\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+            else:\r\n+                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('confirmation_commande', commande_id=commande.id)\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+        else:\r\n+            messages.error(request, \"Méthode de paiement invalide\")\r\n+     \r\n+    return redirect('order_list')\r\n+\r\n+\r\n+def order_list(request):\r\n+    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'orders': orders,\r\n+        'number': number,\r\n+        'orders': orders\r\n+    }\r\n+    \r\n+   \r\n+    return render(request, 'home/commande.html', context)\r\n+\r\n+\r\n+\r\n+@login_required\r\n+def checkout_view(request):\r\n+    # Récupérer le panier actif\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=cart)\r\n+    \r\n+    # Calculer les totaux\r\n+    subtotal = sum(item.total_price for item in cart_items)\r\n+    print(subtotal)\r\n+    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n+    \r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'total': total,\r\n+        'number': number\r\n+    }\r\n+    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740075747255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     context = {\r\n         'commande': commande,\r\n         'articles': commande.articles.all(),\r\n         'total': commande.montant_total,\r\n-        'ref': commande.reference,\r\n+        'ref': commande.ref,\r\n         'date': commande.date_creation.strftime('%d/%m/%Y'),\r\n         'mode_paiement': commande.get_payment_method_display()\r\n     }\r\n     \r\n@@ -167,124 +167,5 @@\n         'subtotal': subtotal,\r\n         'total': total,\r\n         'number': number\r\n     }\r\n-    return render(request, 'home/valider_commande.html', context)\n-from django.shortcuts import redirect, render\r\n-from django.contrib.auth.decorators import login_required\r\n-from e_commerce.models import *\r\n-from e_commerce.views import order\r\n-from django.contrib import messages\r\n-\r\n-\r\n- \r\n-def creer_commande(user, payment_method):\r\n-    try:\r\n-        # Récupérer le panier actif de l'utilisateur\r\n-        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-        \r\n-        # Récupérer tous les items du panier\r\n-        cart_items = CartItem.objects.filter(cart=panier)\r\n-        \r\n-        if cart_items.exists():\r\n-            # Calculer le total d'abord\r\n-            total = sum(item.total_price for item in cart_items)\r\n-            \r\n-            # Créer la commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method,\r\n-                total=total\r\n-            )\r\n-            \r\n-            # Créer les lignes de commande pour chaque item\r\n-            for item in cart_items:\r\n-                OrderLine.objects.create(\r\n-                    order=commande,          # Référence à la commande\r\n-                    product=item.product,    # Produit de l'item\r\n-                    quantity=item.quantity,  # Quantité\r\n-                    unit_price=item.product.price,  # Prix unitaire\r\n-                    line_total=item.total_price     # Total de la ligne\r\n-                )\r\n-            \r\n-            # Supprimer tous les items du panier\r\n-            cart_items.delete()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = True\r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n-    except ShoppingCart.DoesNotExist:\r\n-        return None\r\n-    \r\n-    return None\r\n-\r\n-@login_required\r\n-def passer_commande(request):\r\n-    if request.method == 'POST':\r\n-        payment_method = request.POST.get('payment_method')\r\n-        \r\n-        # Check if the payment method is valid\r\n-        if payment_method in dict(Order.PaymentMethod.choices):\r\n-            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n-            if payment_method == Order.PaymentMethod.CASH:\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n-            else:\r\n-                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('confirmation_commande', commande_id=commande.id)\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n-        else:\r\n-            messages.error(request, \"Méthode de paiement invalide\")\r\n-    \r\n-    return redirect('order_list')\r\n-\r\n-\r\n-def order_list(request):\r\n-    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'orders': orders,\r\n-        'number': number,\r\n-        'orders': orders\r\n-    }\r\n-    \r\n-   \r\n-    return render(request, 'home/commande.html', context)\r\n-\r\n-\r\n-\r\n-@login_required\r\n-def checkout_view(request):\r\n-    # Récupérer le panier actif\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = CartItem.objects.filter(cart=cart)\r\n-    \r\n-    # Calculer les totaux\r\n-    subtotal = sum(item.total_price for item in cart_items)\r\n-    print(subtotal)\r\n-    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n-    \r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'total': total,\r\n-        'number': number\r\n-    }\r\n     return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740075813793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     \"\"\"\r\n     # Contexte pour le template\r\n     context = {\r\n         'commande': commande,\r\n-        'articles': commande.articles.all(),\r\n+        'articles': commande.produit.all(),\r\n         'total': commande.montant_total,\r\n         'ref': commande.ref,\r\n         'date': commande.date_creation.strftime('%d/%m/%Y'),\r\n         'mode_paiement': commande.get_payment_method_display()\r\n"
                },
                {
                    "date": 1740075913831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,10 @@\n from django.contrib.auth.decorators import login_required\r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n from django.contrib import messages\r\n-from django.core.mail import send_mail\r\n-from django.template.loader import render_to_string\r\n-from django.conf import settings\r\n \r\n+\r\n  \r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n@@ -50,84 +48,34 @@\n         return None\r\n     \r\n     return None\r\n \r\n-\r\n-\r\n-def envoyer_email_confirmation(commande):\r\n-    \"\"\"\r\n-    Envoie un email de confirmation au client avec les détails de sa commande.\r\n-    \r\n-    Args:\r\n-        commande: Instance de la commande\r\n-    \"\"\"\r\n-    # Contexte pour le template\r\n-    context = {\r\n-        'commande': commande,\r\n-        'articles': commande.produit.all(),\r\n-        'total': commande.montant_total,\r\n-        'ref': commande.ref,\r\n-        'date': commande.date_creation.strftime('%d/%m/%Y'),\r\n-        'mode_paiement': commande.get_payment_method_display()\r\n-    }\r\n-    \r\n-    # Génération du contenu HTML de l'email\r\n-    html_message = render_to_string('home/confirmation_commande.html', context)\r\n-    \r\n-    # Génération du contenu texte de l'email\r\n-    text_message = f\"\"\"\r\n-    Confirmation de votre commande {commande.reference}\r\n-    \r\n-    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n-    Mode de paiement: {commande.get_payment_method_display()}\r\n-    \r\n-    Articles commandés:\r\n-    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}€\" for article in commande.articles.all()])}\r\n-    \r\n-    Total: {commande.montant_total}€\r\n-    \r\n-    Merci de votre confiance!\r\n-    \"\"\"\r\n-    \r\n-    # Envoi de l'email\r\n-    send_mail(\r\n-        subject=f'Confirmation de votre commande #{commande.reference}',\r\n-        message=text_message,\r\n-        from_email=settings.DEFAULT_FROM_EMAIL,\r\n-        recipient_list=[commande.user.email],\r\n-        html_message=html_message\r\n-    )\r\n-\r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n-       \r\n+        \r\n         # Check if the payment method is valid\r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n             # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n             if payment_method == Order.PaymentMethod.CASH:\r\n                 commande = creer_commande(request.user, payment_method)\r\n                 if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n                     messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                     return redirect('order_list')  # Redirect to order list if paying by cash\r\n                 else:\r\n                     messages.error(request, \"Votre panier est vide\")\r\n             else:\r\n                 # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n                 commande = creer_commande(request.user, payment_method)\r\n                 if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n                     messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                     return redirect('confirmation_commande', commande_id=commande.id)\r\n                 else:\r\n                     messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n-     \r\n+    \r\n     return redirect('order_list')\r\n \r\n \r\n def order_list(request):\r\n"
                },
                {
                    "date": 1740076132363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,34 +48,86 @@\n         return None\r\n     \r\n     return None\r\n \r\n+from django.core.mail import send_mail\r\n+from django.template.loader import render_to_string\r\n+from django.conf import settings\r\n+\r\n+def envoyer_email_confirmation(commande):\r\n+    \"\"\"\r\n+    Envoie un email de confirmation au client avec les détails de sa commande.\r\n+    \r\n+    Args:\r\n+        commande: Instance de la commande\r\n+    \"\"\"\r\n+    # Contexte pour le template\r\n+    context = {\r\n+        'commande': commande,\r\n+        'articles': commande.articles.all(),\r\n+        'total': commande.montant_total,\r\n+        'ref': commande.reference,\r\n+        'date': commande.date_creation.strftime('%d/%m/%Y'),\r\n+        'mode_paiement': commande.get_payment_method_display()\r\n+    }\r\n+    \r\n+    # Génération du contenu HTML de l'email\r\n+    html_message = render_to_string('emails/confirmation_commande.html', context)\r\n+    \r\n+    # Génération du contenu texte de l'email\r\n+    text_message = f\"\"\"\r\n+    Confirmation de votre commande {commande.ref}\r\n+    \r\n+    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n+    Mode de paiement: {commande.get_payment_method_display()}\r\n+    \r\n+    Articles commandés:\r\n+    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}€\" for article in commande.articles.all()])}\r\n+    \r\n+    Total: {commande.montant_total}€\r\n+    \r\n+    Merci de votre confiance!\r\n+    \"\"\"\r\n+    \r\n+    # Envoi de l'email\r\n+    send_mail(\r\n+        subject=f'Confirmation de votre commande #{commande.reference}',\r\n+        message=text_message,\r\n+        from_email=settings.DEFAULT_FROM_EMAIL,\r\n+        recipient_list=[commande.user.email],\r\n+        html_message=html_message\r\n+    )\r\n+\r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n-        \r\n+       \r\n         # Check if the payment method is valid\r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n             # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n             if payment_method == Order.PaymentMethod.CASH:\r\n                 commande = creer_commande(request.user, payment_method)\r\n                 if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n                     messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                     return redirect('order_list')  # Redirect to order list if paying by cash\r\n                 else:\r\n                     messages.error(request, \"Votre panier est vide\")\r\n             else:\r\n                 # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n                 commande = creer_commande(request.user, payment_method)\r\n                 if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n                     messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                     return redirect('confirmation_commande', commande_id=commande.id)\r\n                 else:\r\n                     messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n-    \r\n+     \r\n     return redirect('order_list')\r\n \r\n \r\n def order_list(request):\r\n"
                },
                {
                    "date": 1740076192502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,10 @@\n     # Contexte pour le template\r\n     context = {\r\n         'commande': commande,\r\n         'articles': commande.articles.all(),\r\n-        'total': commande.montant_total,\r\n-        'ref': commande.reference,\r\n+        'total': commande.total,\r\n+        'ref': commande.re,\r\n         'date': commande.date_creation.strftime('%d/%m/%Y'),\r\n         'mode_paiement': commande.get_payment_method_display()\r\n     }\r\n     \r\n"
                },
                {
                    "date": 1740076237768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+from django.shortcuts import redirect, render\r\n+from django.contrib.auth.decorators import login_required\r\n+from e_commerce.models import *\r\n+from e_commerce.views import order\r\n+from django.contrib import messages\r\n+\r\n+\r\n+ \r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+        \r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n+        \r\n+        if cart_items.exists():\r\n+            # Calculer le total d'abord\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            \r\n+            # Créer la commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method,\r\n+                total=total\r\n+            )\r\n+            \r\n+            # Créer les lignes de commande pour chaque item\r\n+            for item in cart_items:\r\n+                OrderLine.objects.create(\r\n+                    order=commande,          # Référence à la commande\r\n+                    product=item.product,    # Produit de l'item\r\n+                    quantity=item.quantity,  # Quantité\r\n+                    unit_price=item.product.price,  # Prix unitaire\r\n+                    line_total=item.total_price     # Total de la ligne\r\n+                )\r\n+            \r\n+            # Supprimer tous les items du panier\r\n+            cart_items.delete()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = True\r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n+    \r\n+    return None\r\n+\r\n+from django.core.mail import send_mail\r\n+from django.template.loader import render_to_string\r\n+from django.conf import settings\r\n+\r\n+def envoyer_email_confirmation(commande):\r\n+    \"\"\"\r\n+    Envoie un email de confirmation au client avec les détails de sa commande.\r\n+    \r\n+    Args:\r\n+        commande: Instance de la commande\r\n+    \"\"\"\r\n+    # Contexte pour le template\r\n+    context = {\r\n+        'commande': commande,\r\n+        #'articles':      ,\r\n+        'total': commande.total,\r\n+        'ref': commande.reF,\r\n+        'date': commande.created_at.strftime('%d/%m/%Y'),\r\n+        'mode_paiement': commande.get_payment_method_display()\r\n+    }\r\n+    \r\n+    # Génération du contenu HTML de l'email\r\n+    html_message = render_to_string('emails/confirmation_commande.html', context)\r\n+    \r\n+    # Génération du contenu texte de l'email\r\n+    text_message = f\"\"\"\r\n+    Confirmation de votre commande {commande.ref}\r\n+    \r\n+    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n+    Mode de paiement: {commande.get_payment_method_display()}\r\n+    \r\n+    Articles commandés:\r\n+    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}\" for article in commande.articles.all()])}\r\n+    \r\n+    Total: {commande.montant_total}€\r\n+    \r\n+    Merci de votre confiance!\r\n+    \"\"\"\r\n+    \r\n+    # Envoi de l'email\r\n+    send_mail(\r\n+        subject=f'Confirmation de votre commande #{commande.reference}',\r\n+        message=text_message,\r\n+        from_email=settings.DEFAULT_FROM_EMAIL,\r\n+        recipient_list=[commande.user.email],\r\n+        html_message=html_message\r\n+    )\r\n+\r\n+@login_required\r\n+def passer_commande(request):\r\n+    if request.method == 'POST':\r\n+        payment_method = request.POST.get('payment_method')\r\n+       \r\n+        # Check if the payment method is valid\r\n+        if payment_method in dict(Order.PaymentMethod.choices):\r\n+            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n+            if payment_method == Order.PaymentMethod.CASH:\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+            else:\r\n+                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('confirmation_commande', commande_id=commande.id)\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+        else:\r\n+            messages.error(request, \"Méthode de paiement invalide\")\r\n+     \r\n+    return redirect('order_list')\r\n+\r\n+\r\n+def order_list(request):\r\n+    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'orders': orders,\r\n+        'number': number,\r\n+        'orders': orders\r\n+    }\r\n+    \r\n+   \r\n+    return render(request, 'home/commande.html', context)\r\n+\r\n+\r\n+\r\n+@login_required\r\n+def checkout_view(request):\r\n+    # Récupérer le panier actif\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=cart)\r\n+    \r\n+    # Calculer les totaux\r\n+    subtotal = sum(item.total_price for item in cart_items)\r\n+    print(subtotal)\r\n+    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n+    \r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'total': total,\r\n+        'number': number\r\n+    }\r\n+    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740076269090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+from django.shortcuts import redirect, render\r\n+from django.contrib.auth.decorators import login_required\r\n+from e_commerce.models import *\r\n+from e_commerce.views import order\r\n+from django.contrib import messages\r\n+\r\n+\r\n+ \r\n+def creer_commande(user, payment_method):\r\n+    try:\r\n+        # Récupérer le panier actif de l'utilisateur\r\n+        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n+        \r\n+        # Récupérer tous les items du panier\r\n+        cart_items = CartItem.objects.filter(cart=panier)\r\n+        \r\n+        if cart_items.exists():\r\n+            # Calculer le total d'abord\r\n+            total = sum(item.total_price for item in cart_items)\r\n+            \r\n+            # Créer la commande\r\n+            commande = Order.objects.create(\r\n+                user=user,\r\n+                payment_method=payment_method,\r\n+                total=total\r\n+            )\r\n+            \r\n+            # Créer les lignes de commande pour chaque item\r\n+            for item in cart_items:\r\n+                OrderLine.objects.create(\r\n+                    order=commande,          # Référence à la commande\r\n+                    product=item.product,    # Produit de l'item\r\n+                    quantity=item.quantity,  # Quantité\r\n+                    unit_price=item.product.price,  # Prix unitaire\r\n+                    line_total=item.total_price     # Total de la ligne\r\n+                )\r\n+            \r\n+            # Supprimer tous les items du panier\r\n+            cart_items.delete()\r\n+            \r\n+            # Désactiver le panier\r\n+            panier.is_active = True\r\n+            panier.save()\r\n+            \r\n+            return commande\r\n+            \r\n+    except ShoppingCart.DoesNotExist:\r\n+        return None\r\n+    \r\n+    return None\r\n+\r\n+from django.core.mail import send_mail\r\n+from django.template.loader import render_to_string\r\n+from django.conf import settings\r\n+\r\n+def envoyer_email_confirmation(commande):\r\n+    \"\"\"\r\n+    Envoie un email de confirmation au client avec les détails de sa commande.\r\n+    \r\n+    Args:\r\n+        commande: Instance de la commande\r\n+    \"\"\"\r\n+    # Contexte pour le template\r\n+    context = {\r\n+        'commande': commande,\r\n+        #'articles':      ,\r\n+        'total': commande.total,\r\n+        'ref': commande.ref,\r\n+        'date': commande.created_at.strftime('%d/%m/%Y'),\r\n+        'mode_paiement': commande.get_payment_method_display()\r\n+    }\r\n+    \r\n+    # Génération du contenu HTML de l'email\r\n+    html_message = render_to_string('emails/confirmation_commande.html', context)\r\n+    \r\n+    # Génération du contenu texte de l'email\r\n+    text_message = f\"\"\"\r\n+    Confirmation de votre commande {commande.ref}\r\n+    \r\n+    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n+    Mode de paiement: {commande.get_payment_method_display()}\r\n+    \r\n+    Articles commandés:\r\n+    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}\" for article in commande.articles.all()])}\r\n+    \r\n+    Total: {commande.montant_total}€\r\n+    \r\n+    Merci de votre confiance!\r\n+    \"\"\"\r\n+    \r\n+    # Envoi de l'email\r\n+    send_mail(\r\n+        subject=f'Confirmation de votre commande #{commande.reference}',\r\n+        message=text_message,\r\n+        from_email=settings.DEFAULT_FROM_EMAIL,\r\n+        recipient_list=[commande.user.email],\r\n+        html_message=html_message\r\n+    )\r\n+\r\n+@login_required\r\n+def passer_commande(request):\r\n+    if request.method == 'POST':\r\n+        payment_method = request.POST.get('payment_method')\r\n+       \r\n+        # Check if the payment method is valid\r\n+        if payment_method in dict(Order.PaymentMethod.choices):\r\n+            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n+            if payment_method == Order.PaymentMethod.CASH:\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+            else:\r\n+                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    # Envoi de l'email de confirmation\r\n+                    envoyer_email_confirmation(commande)\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    return redirect('confirmation_commande', commande_id=commande.id)\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n+        else:\r\n+            messages.error(request, \"Méthode de paiement invalide\")\r\n+     \r\n+    return redirect('order_list')\r\n+\r\n+\r\n+def order_list(request):\r\n+    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'orders': orders,\r\n+        'number': number,\r\n+        'orders': orders\r\n+    }\r\n+    \r\n+   \r\n+    return render(request, 'home/commande.html', context)\r\n+\r\n+\r\n+\r\n+@login_required\r\n+def checkout_view(request):\r\n+    # Récupérer le panier actif\r\n+    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n+    cart_items = CartItem.objects.filter(cart=cart)\r\n+    \r\n+    # Calculer les totaux\r\n+    subtotal = sum(item.total_price for item in cart_items)\r\n+    print(subtotal)\r\n+    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n+    \r\n+    if request.user.is_authenticated:\r\n+        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+    else:\r\n+        number = 0\r\n+    context = {\r\n+        'cart_items': cart_items,\r\n+        'subtotal': subtotal,\r\n+        'total': total,\r\n+        'number': number\r\n+    }\r\n+    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740076316556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n         'mode_paiement': commande.get_payment_method_display()\r\n     }\r\n     \r\n     # Génération du contenu HTML de l'email\r\n-    html_message = render_to_string('emails/confirmation_commande.html', context)\r\n+    html_message = render_to_string('home/confirmation_commande.html', context)\r\n     \r\n     # Génération du contenu texte de l'email\r\n     text_message = f\"\"\"\r\n     Confirmation de votre commande {commande.ref}\r\n@@ -167,347 +167,5 @@\n         'subtotal': subtotal,\r\n         'total': total,\r\n         'number': number\r\n     }\r\n-    return render(request, 'home/valider_commande.html', context)\n-from django.shortcuts import redirect, render\r\n-from django.contrib.auth.decorators import login_required\r\n-from e_commerce.models import *\r\n-from e_commerce.views import order\r\n-from django.contrib import messages\r\n-\r\n-\r\n- \r\n-def creer_commande(user, payment_method):\r\n-    try:\r\n-        # Récupérer le panier actif de l'utilisateur\r\n-        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-        \r\n-        # Récupérer tous les items du panier\r\n-        cart_items = CartItem.objects.filter(cart=panier)\r\n-        \r\n-        if cart_items.exists():\r\n-            # Calculer le total d'abord\r\n-            total = sum(item.total_price for item in cart_items)\r\n-            \r\n-            # Créer la commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method,\r\n-                total=total\r\n-            )\r\n-            \r\n-            # Créer les lignes de commande pour chaque item\r\n-            for item in cart_items:\r\n-                OrderLine.objects.create(\r\n-                    order=commande,          # Référence à la commande\r\n-                    product=item.product,    # Produit de l'item\r\n-                    quantity=item.quantity,  # Quantité\r\n-                    unit_price=item.product.price,  # Prix unitaire\r\n-                    line_total=item.total_price     # Total de la ligne\r\n-                )\r\n-            \r\n-            # Supprimer tous les items du panier\r\n-            cart_items.delete()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = True\r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n-    except ShoppingCart.DoesNotExist:\r\n-        return None\r\n-    \r\n-    return None\r\n-\r\n-from django.core.mail import send_mail\r\n-from django.template.loader import render_to_string\r\n-from django.conf import settings\r\n-\r\n-def envoyer_email_confirmation(commande):\r\n-    \"\"\"\r\n-    Envoie un email de confirmation au client avec les détails de sa commande.\r\n-    \r\n-    Args:\r\n-        commande: Instance de la commande\r\n-    \"\"\"\r\n-    # Contexte pour le template\r\n-    context = {\r\n-        'commande': commande,\r\n-        #'articles':      ,\r\n-        'total': commande.total,\r\n-        'ref': commande.reF,\r\n-        'date': commande.created_at.strftime('%d/%m/%Y'),\r\n-        'mode_paiement': commande.get_payment_method_display()\r\n-    }\r\n-    \r\n-    # Génération du contenu HTML de l'email\r\n-    html_message = render_to_string('emails/confirmation_commande.html', context)\r\n-    \r\n-    # Génération du contenu texte de l'email\r\n-    text_message = f\"\"\"\r\n-    Confirmation de votre commande {commande.ref}\r\n-    \r\n-    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n-    Mode de paiement: {commande.get_payment_method_display()}\r\n-    \r\n-    Articles commandés:\r\n-    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}\" for article in commande.articles.all()])}\r\n-    \r\n-    Total: {commande.montant_total}€\r\n-    \r\n-    Merci de votre confiance!\r\n-    \"\"\"\r\n-    \r\n-    # Envoi de l'email\r\n-    send_mail(\r\n-        subject=f'Confirmation de votre commande #{commande.reference}',\r\n-        message=text_message,\r\n-        from_email=settings.DEFAULT_FROM_EMAIL,\r\n-        recipient_list=[commande.user.email],\r\n-        html_message=html_message\r\n-    )\r\n-\r\n-@login_required\r\n-def passer_commande(request):\r\n-    if request.method == 'POST':\r\n-        payment_method = request.POST.get('payment_method')\r\n-       \r\n-        # Check if the payment method is valid\r\n-        if payment_method in dict(Order.PaymentMethod.choices):\r\n-            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n-            if payment_method == Order.PaymentMethod.CASH:\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n-            else:\r\n-                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('confirmation_commande', commande_id=commande.id)\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n-        else:\r\n-            messages.error(request, \"Méthode de paiement invalide\")\r\n-     \r\n-    return redirect('order_list')\r\n-\r\n-\r\n-def order_list(request):\r\n-    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'orders': orders,\r\n-        'number': number,\r\n-        'orders': orders\r\n-    }\r\n-    \r\n-   \r\n-    return render(request, 'home/commande.html', context)\r\n-\r\n-\r\n-\r\n-@login_required\r\n-def checkout_view(request):\r\n-    # Récupérer le panier actif\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = CartItem.objects.filter(cart=cart)\r\n-    \r\n-    # Calculer les totaux\r\n-    subtotal = sum(item.total_price for item in cart_items)\r\n-    print(subtotal)\r\n-    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n-    \r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'total': total,\r\n-        'number': number\r\n-    }\r\n-    return render(request, 'home/valider_commande.html', context)\n-from django.shortcuts import redirect, render\r\n-from django.contrib.auth.decorators import login_required\r\n-from e_commerce.models import *\r\n-from e_commerce.views import order\r\n-from django.contrib import messages\r\n-\r\n-\r\n- \r\n-def creer_commande(user, payment_method):\r\n-    try:\r\n-        # Récupérer le panier actif de l'utilisateur\r\n-        panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n-        \r\n-        # Récupérer tous les items du panier\r\n-        cart_items = CartItem.objects.filter(cart=panier)\r\n-        \r\n-        if cart_items.exists():\r\n-            # Calculer le total d'abord\r\n-            total = sum(item.total_price for item in cart_items)\r\n-            \r\n-            # Créer la commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method,\r\n-                total=total\r\n-            )\r\n-            \r\n-            # Créer les lignes de commande pour chaque item\r\n-            for item in cart_items:\r\n-                OrderLine.objects.create(\r\n-                    order=commande,          # Référence à la commande\r\n-                    product=item.product,    # Produit de l'item\r\n-                    quantity=item.quantity,  # Quantité\r\n-                    unit_price=item.product.price,  # Prix unitaire\r\n-                    line_total=item.total_price     # Total de la ligne\r\n-                )\r\n-            \r\n-            # Supprimer tous les items du panier\r\n-            cart_items.delete()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = True\r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n-    except ShoppingCart.DoesNotExist:\r\n-        return None\r\n-    \r\n-    return None\r\n-\r\n-from django.core.mail import send_mail\r\n-from django.template.loader import render_to_string\r\n-from django.conf import settings\r\n-\r\n-def envoyer_email_confirmation(commande):\r\n-    \"\"\"\r\n-    Envoie un email de confirmation au client avec les détails de sa commande.\r\n-    \r\n-    Args:\r\n-        commande: Instance de la commande\r\n-    \"\"\"\r\n-    # Contexte pour le template\r\n-    context = {\r\n-        'commande': commande,\r\n-        'articles': commande.articles.all(),\r\n-        'total': commande.total,\r\n-        'ref': commande.re,\r\n-        'date': commande.date_creation.strftime('%d/%m/%Y'),\r\n-        'mode_paiement': commande.get_payment_method_display()\r\n-    }\r\n-    \r\n-    # Génération du contenu HTML de l'email\r\n-    html_message = render_to_string('emails/confirmation_commande.html', context)\r\n-    \r\n-    # Génération du contenu texte de l'email\r\n-    text_message = f\"\"\"\r\n-    Confirmation de votre commande {commande.ref}\r\n-    \r\n-    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n-    Mode de paiement: {commande.get_payment_method_display()}\r\n-    \r\n-    Articles commandés:\r\n-    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}€\" for article in commande.articles.all()])}\r\n-    \r\n-    Total: {commande.montant_total}€\r\n-    \r\n-    Merci de votre confiance!\r\n-    \"\"\"\r\n-    \r\n-    # Envoi de l'email\r\n-    send_mail(\r\n-        subject=f'Confirmation de votre commande #{commande.reference}',\r\n-        message=text_message,\r\n-        from_email=settings.DEFAULT_FROM_EMAIL,\r\n-        recipient_list=[commande.user.email],\r\n-        html_message=html_message\r\n-    )\r\n-\r\n-@login_required\r\n-def passer_commande(request):\r\n-    if request.method == 'POST':\r\n-        payment_method = request.POST.get('payment_method')\r\n-       \r\n-        # Check if the payment method is valid\r\n-        if payment_method in dict(Order.PaymentMethod.choices):\r\n-            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n-            if payment_method == Order.PaymentMethod.CASH:\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n-            else:\r\n-                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('confirmation_commande', commande_id=commande.id)\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n-        else:\r\n-            messages.error(request, \"Méthode de paiement invalide\")\r\n-     \r\n-    return redirect('order_list')\r\n-\r\n-\r\n-def order_list(request):\r\n-    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'orders': orders,\r\n-        'number': number,\r\n-        'orders': orders\r\n-    }\r\n-    \r\n-   \r\n-    return render(request, 'home/commande.html', context)\r\n-\r\n-\r\n-\r\n-@login_required\r\n-def checkout_view(request):\r\n-    # Récupérer le panier actif\r\n-    cart = ShoppingCart.objects.get(user=request.user, is_active=True)\r\n-    cart_items = CartItem.objects.filter(cart=cart)\r\n-    \r\n-    # Calculer les totaux\r\n-    subtotal = sum(item.total_price for item in cart_items)\r\n-    print(subtotal)\r\n-    total = subtotal  # Ajoutez les frais de livraison si nécessaire\r\n-    \r\n-    if request.user.is_authenticated:\r\n-        number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-    else:\r\n-        number = 0\r\n-    context = {\r\n-        'cart_items': cart_items,\r\n-        'subtotal': subtotal,\r\n-        'total': total,\r\n-        'number': number\r\n-    }\r\n     return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740076372428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n     # Génération du contenu texte de l'email\r\n     text_message = f\"\"\"\r\n     Confirmation de votre commande {commande.ref}\r\n     \r\n-    Date: {commande.date_creation.strftime('%d/%m/%Y')}\r\n+    Date: {commande.created_at.strftime('%d/%m/%Y')}\r\n     Mode de paiement: {commande.get_payment_method_display()}\r\n     \r\n     Articles commandés:\r\n     {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}\" for article in commande.articles.all()])}\r\n"
                },
                {
                    "date": 1740085915025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     \"\"\"\r\n     # Contexte pour le template\r\n     context = {\r\n         'commande': commande,\r\n-        #'articles':      ,\r\n+        'articles': commande.articles.all(),   \r\n         'total': commande.total,\r\n         'ref': commande.ref,\r\n         'date': commande.created_at.strftime('%d/%m/%Y'),\r\n         'mode_paiement': commande.get_payment_method_display()\r\n@@ -82,9 +82,9 @@\n     \r\n     Articles commandés:\r\n     {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}\" for article in commande.articles.all()])}\r\n     \r\n-    Total: {commande.montant_total}€\r\n+    Total: {commande.montant_total}FCFA\r\n     \r\n     Merci de votre confiance!\r\n     \"\"\"\r\n     \r\n"
                },
                {
                    "date": 1740086009287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     \"\"\"\r\n     # Contexte pour le template\r\n     context = {\r\n         'commande': commande,\r\n-        'articles': commande.articles.all(),   \r\n+        'articles': commande.product.all(),   \r\n         'total': commande.total,\r\n         'ref': commande.ref,\r\n         'date': commande.created_at.strftime('%d/%m/%Y'),\r\n         'mode_paiement': commande.get_payment_method_display()\r\n"
                },
                {
                    "date": 1740086116928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,86 +48,34 @@\n         return None\r\n     \r\n     return None\r\n \r\n-from django.core.mail import send_mail\r\n-from django.template.loader import render_to_string\r\n-from django.conf import settings\r\n-\r\n-def envoyer_email_confirmation(commande):\r\n-    \"\"\"\r\n-    Envoie un email de confirmation au client avec les détails de sa commande.\r\n-    \r\n-    Args:\r\n-        commande: Instance de la commande\r\n-    \"\"\"\r\n-    # Contexte pour le template\r\n-    context = {\r\n-        'commande': commande,\r\n-        'articles': commande.product.all(),   \r\n-        'total': commande.total,\r\n-        'ref': commande.ref,\r\n-        'date': commande.created_at.strftime('%d/%m/%Y'),\r\n-        'mode_paiement': commande.get_payment_method_display()\r\n-    }\r\n-    \r\n-    # Génération du contenu HTML de l'email\r\n-    html_message = render_to_string('home/confirmation_commande.html', context)\r\n-    \r\n-    # Génération du contenu texte de l'email\r\n-    text_message = f\"\"\"\r\n-    Confirmation de votre commande {commande.ref}\r\n-    \r\n-    Date: {commande.created_at.strftime('%d/%m/%Y')}\r\n-    Mode de paiement: {commande.get_payment_method_display()}\r\n-    \r\n-    Articles commandés:\r\n-    {chr(10).join([f\"- {article.produit.nom} x{article.quantite} : {article.prix_total}\" for article in commande.articles.all()])}\r\n-    \r\n-    Total: {commande.montant_total}FCFA\r\n-    \r\n-    Merci de votre confiance!\r\n-    \"\"\"\r\n-    \r\n-    # Envoi de l'email\r\n-    send_mail(\r\n-        subject=f'Confirmation de votre commande #{commande.reference}',\r\n-        message=text_message,\r\n-        from_email=settings.DEFAULT_FROM_EMAIL,\r\n-        recipient_list=[commande.user.email],\r\n-        html_message=html_message\r\n-    )\r\n-\r\n @login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n-       \r\n+        \r\n         # Check if the payment method is valid\r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n             # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n             if payment_method == Order.PaymentMethod.CASH:\r\n                 commande = creer_commande(request.user, payment_method)\r\n                 if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n                     messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                     return redirect('order_list')  # Redirect to order list if paying by cash\r\n                 else:\r\n                     messages.error(request, \"Votre panier est vide\")\r\n             else:\r\n                 # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n                 commande = creer_commande(request.user, payment_method)\r\n                 if commande:\r\n-                    # Envoi de l'email de confirmation\r\n-                    envoyer_email_confirmation(commande)\r\n                     messages.success(request, \"Votre commande a été créée avec succès!\")\r\n                     return redirect('confirmation_commande', commande_id=commande.id)\r\n                 else:\r\n                     messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n-     \r\n+    \r\n     return redirect('order_list')\r\n \r\n \r\n def order_list(request):\r\n"
                },
                {
                    "date": 1740086278030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,60 @@\n from django.contrib import messages\r\n \r\n \r\n  \r\n+from django.core.mail import send_mail\r\n+from django.template.loader import render_to_string\r\n+from django.conf import settings\r\n+\r\n+def envoyer_notification_commande(commande):\r\n+    \"\"\"\r\n+    Envoie un email de notification avec les détails de la commande\r\n+    \"\"\"\r\n+    # Récupérer les lignes de commande\r\n+    order_lines = OrderLine.objects.filter(order=commande)\r\n+    \r\n+    # Préparer le contexte pour le template\r\n+    context = {\r\n+        'user': commande.user,\r\n+        'commande': commande,\r\n+        'order_lines': order_lines,\r\n+        'total': commande.total,\r\n+        'date': commande.created_at.strftime('%d/%m/%Y %H:%M')\r\n+    }\r\n+    \r\n+    # Générer le contenu de l'email\r\n+    sujet = f'Confirmation de votre commande #{commande.id}'\r\n+    message_text = f\"\"\"\r\n+    Bonjour {commande.user.get_full_name()},\r\n+    \r\n+    Votre commande #{commande.id} a été créée avec succès.\r\n+    \r\n+    Détails de la commande:\r\n+    Date: {commande.created_at.strftime('%d/%m/%Y %H:%M')}\r\n+    Mode de paiement: {commande.get_payment_method_display()}\r\n+    \r\n+    Articles commandés:\r\n+    {chr(10).join([f\"- {line.product.name} x{line.quantity} : {line.line_total}€\" for line in order_lines])}\r\n+    \r\n+    Total: {commande.total}€\r\n+    \r\n+    Merci de votre confiance!\r\n+    \"\"\"\r\n+    \r\n+    # Générer la version HTML\r\n+    html_message = render_to_string('homr/notification_commande.html', context)\r\n+    \r\n+    # Envoyer l'email\r\n+    send_mail(\r\n+        subject=sujet,\r\n+        message=message_text,\r\n+        from_email=settings.DEFAULT_FROM_EMAIL,\r\n+        recipient_list=[commande.user.email],\r\n+        html_message=html_message,\r\n+        fail_silently=False,\r\n+    )\r\n+\r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n         panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n@@ -27,20 +79,23 @@\n             \r\n             # Créer les lignes de commande pour chaque item\r\n             for item in cart_items:\r\n                 OrderLine.objects.create(\r\n-                    order=commande,          # Référence à la commande\r\n-                    product=item.product,    # Produit de l'item\r\n-                    quantity=item.quantity,  # Quantité\r\n-                    unit_price=item.product.price,  # Prix unitaire\r\n-                    line_total=item.total_price     # Total de la ligne\r\n+                    order=commande,\r\n+                    product=item.product,\r\n+                    quantity=item.quantity,\r\n+                    unit_price=item.product.price,\r\n+                    line_total=item.total_price\r\n                 )\r\n             \r\n+            # Envoyer l'email de notification\r\n+            envoyer_notification_commande(commande)\r\n+            \r\n             # Supprimer tous les items du panier\r\n             cart_items.delete()\r\n             \r\n             # Désactiver le panier\r\n-            panier.is_active = True\r\n+            panier.is_active = False  # Correction: False au lieu de True\r\n             panier.save()\r\n             \r\n             return commande\r\n             \r\n@@ -53,26 +108,17 @@\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n         \r\n-        # Check if the payment method is valid\r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n-            # Special case: if payment method is 'CASH', create the order and redirect to order_list\r\n-            if payment_method == Order.PaymentMethod.CASH:\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('order_list')  # Redirect to order list if paying by cash\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n+            commande = creer_commande(request.user, payment_method)\r\n+            if commande:\r\n+                messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                if payment_method == Order.PaymentMethod.CASH:\r\n+                    return redirect('order_list')\r\n+                return redirect('confirmation_commande', commande_id=commande.id)\r\n             else:\r\n-                # Handle other payment methods (e.g., CREDIT_CARD, MOBILE_MONEY)\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    return redirect('confirmation_commande', commande_id=commande.id)\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n+                messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     \r\n     return redirect('order_list')\r\n"
                },
                {
                    "date": 1740086336358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     Merci de votre confiance!\r\n     \"\"\"\r\n     \r\n     # Générer la version HTML\r\n-    html_message = render_to_string('homr/notification_commande.html', context)\r\n+    html_message = render_to_string('homr/confirmation_commande.html', context)\r\n     \r\n     # Envoyer l'email\r\n     send_mail(\r\n         subject=sujet,\r\n"
                },
                {
                    "date": 1740086518739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     Merci de votre confiance!\r\n     \"\"\"\r\n     \r\n     # Générer la version HTML\r\n-    html_message = render_to_string('homr/confirmation_commande.html', context)\r\n+    html_message = render_to_string('home/confirmation_commande.html', context)\r\n     \r\n     # Envoyer l'email\r\n     send_mail(\r\n         subject=sujet,\r\n"
                },
                {
                    "date": 1740087959465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n             cart_items.delete()\r\n             \r\n             # Désactiver le panier\r\n             panier.is_active = False  # Correction: False au lieu de True\r\n+\r\n             panier.save()\r\n             \r\n             return commande\r\n             \r\n"
                },
                {
                    "date": 1740088033553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n             # Supprimer tous les items du panier\r\n             cart_items.delete()\r\n             \r\n             # Désactiver le panier\r\n-            panier.is_active = False  # Correction: False au lieu de True\r\n+            panier.is_active = True  # Correction: False au lieu de True\r\n \r\n             panier.save()\r\n             \r\n             return commande\r\n"
                },
                {
                    "date": 1740089056620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n+    logo_url = \"logo.png\" \r\n+    \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n         'commande': commande,\r\n"
                },
                {
                    "date": 1740089070619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n         'user': commande.user,\r\n         'commande': commande,\r\n         'order_lines': order_lines,\r\n         'total': commande.total,\r\n-        'date': commande.created_at.strftime('%d/%m/%Y %H:%M')\r\n+        'date': commande.created_at.strftime('%d/%m/%Y %H:%M'),\r\n+        'logo': logo_url\r\n     }\r\n     \r\n     # Générer le contenu de l'email\r\n     sujet = f'Confirmation de votre commande #{commande.id}'\r\n"
                },
                {
                    "date": 1740089169752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    logo_url = \"logo.png\" \r\n+    logo_url = request.build_absolute_uri(static('images/logo.png'))\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n"
                },
                {
                    "date": 1740089179072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from urllib import request\r\n from django.shortcuts import redirect, render\r\n from django.contrib.auth.decorators import login_required\r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n"
                },
                {
                    "date": 1740089195564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n from django.contrib.auth.decorators import login_required\r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n from django.contrib import messages\r\n+from django.templatetags.static import static\r\n \r\n-\r\n  \r\n from django.core.mail import send_mail\r\n from django.template.loader import render_to_string\r\n from django.conf import settings\r\n"
                },
                {
                    "date": 1740089217263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    logo_url = request.build_absolute_uri(static('images/logo.png'))\r\n+    logo_url = request.build_absolute_uri(static('img/logo.png'))\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n"
                },
                {
                    "date": 1740089232024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    logo_url = request.build_absolute_uri(static('img/logo.png'))\r\n+    logo_url = request.build_absolute_uri(static('img/logo/logo.png'))\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n"
                },
                {
                    "date": 1740089260500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    logo_url = request.build_absolute_uri(static('img/logo/logo.png'))\r\n+    logo_url = request.build_absolute_uri(static('img/logo/ghislaine.png'))\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n"
                },
                {
                    "date": 1740090041927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-from urllib import request\r\n from django.shortcuts import redirect, render\r\n from django.contrib.auth.decorators import login_required\r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n"
                },
                {
                    "date": 1740090067058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.core.mail import send_mail\r\n from django.template.loader import render_to_string\r\n from django.conf import settings\r\n \r\n-def envoyer_notification_commande(commande):\r\n+def envoyer_notification_commande(request,commande):\r\n     \"\"\"\r\n     Envoie un email de notification avec les détails de la commande\r\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n"
                },
                {
                    "date": 1740090109325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,10 @@\n         recipient_list=[commande.user.email],\r\n         html_message=html_message,\r\n         fail_silently=False,\r\n     )\r\n+    \r\n+    return response\r\n \r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n"
                },
                {
                    "date": 1740090126157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         html_message=html_message,\r\n         fail_silently=False,\r\n     )\r\n     \r\n-    return response\r\n+    return \r\n \r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n"
                },
                {
                    "date": 1740090146762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.core.mail import send_mail\r\n from django.template.loader import render_to_string\r\n from django.conf import settings\r\n \r\n-def envoyer_notification_commande(request,commande):\r\n+def envoyer_notification_commande(commande):\r\n     \"\"\"\r\n     Envoie un email de notification avec les détails de la commande\r\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n"
                },
                {
                    "date": 1740090153002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         html_message=html_message,\r\n         fail_silently=False,\r\n     )\r\n     \r\n-    return \r\n+    \r\n \r\n def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n"
                },
                {
                    "date": 1740090436339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,22 +115,31 @@\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n         \r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n-            commande = creer_commande(request.user, payment_method)\r\n-            if commande:\r\n-                messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                if payment_method == Order.PaymentMethod.CASH:\r\n+            if payment_method == Order.PaymentMethod.CASH:\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    envoyer_notification_commande(request, commande)  # Pass request here\r\n                     return redirect('order_list')\r\n-                return redirect('confirmation_commande', commande_id=commande.id)\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n             else:\r\n-                messages.error(request, \"Votre panier est vide\")\r\n+                commande = creer_commande(request.user, payment_method)\r\n+                if commande:\r\n+                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                    envoyer_notification_commande(request, commande)  # Pass request here\r\n+                    return redirect('confirmation_commande', commande_id=commande.id)\r\n+                else:\r\n+                    messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     \r\n     return redirect('order_list')\r\n \r\n \r\n+\r\n def order_list(request):\r\n     orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n"
                },
                {
                    "date": 1740090458421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,16 @@\n from django.core.mail import send_mail\r\n from django.template.loader import render_to_string\r\n from django.conf import settings\r\n \r\n-def envoyer_notification_commande(commande):\r\n+def envoyer_notification_commande(request, commande):\r\n     \"\"\"\r\n     Envoie un email de notification avec les détails de la commande\r\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n+    # Générer l'URL absolue du logo\r\n     logo_url = request.build_absolute_uri(static('img/logo/ghislaine.png'))\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n@@ -59,8 +60,9 @@\n         recipient_list=[commande.user.email],\r\n         html_message=html_message,\r\n         fail_silently=False,\r\n     )\r\n+\r\n     \r\n     \r\n \r\n def creer_commande(user, payment_method):\r\n"
                },
                {
                    "date": 1740090511540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \r\n     \r\n     \r\n \r\n-def creer_commande(user, payment_method):\r\n+def creer_commande(user, payment_method,commande):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n         panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n         \r\n"
                },
                {
                    "date": 1740090532199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,15 @@\n from django.core.mail import send_mail\r\n from django.template.loader import render_to_string\r\n from django.conf import settings\r\n \r\n-def envoyer_notification_commande(request, commande):\r\n+def envoyer_notification_commande(commande):\r\n     \"\"\"\r\n     Envoie un email de notification avec les détails de la commande\r\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    # Générer l'URL absolue du logo\r\n     logo_url = request.build_absolute_uri(static('img/logo/ghislaine.png'))\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n@@ -60,13 +59,12 @@\n         recipient_list=[commande.user.email],\r\n         html_message=html_message,\r\n         fail_silently=False,\r\n     )\r\n-\r\n     \r\n     \r\n \r\n-def creer_commande(user, payment_method,commande):\r\n+def creer_commande(user, payment_method):\r\n     try:\r\n         # Récupérer le panier actif de l'utilisateur\r\n         panier = ShoppingCart.objects.get(user=user, is_active=True)\r\n         \r\n"
                },
                {
                    "date": 1740090555432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,31 +115,22 @@\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n         \r\n         if payment_method in dict(Order.PaymentMethod.choices):\r\n-            if payment_method == Order.PaymentMethod.CASH:\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    envoyer_notification_commande(request, commande)  # Pass request here\r\n+            commande = creer_commande(request.user, payment_method)\r\n+            if commande:\r\n+                messages.success(request, \"Votre commande a été créée avec succès!\")\r\n+                if payment_method == Order.PaymentMethod.CASH:\r\n                     return redirect('order_list')\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n+                return redirect('confirmation_commande', commande_id=commande.id)\r\n             else:\r\n-                commande = creer_commande(request.user, payment_method)\r\n-                if commande:\r\n-                    messages.success(request, \"Votre commande a été créée avec succès!\")\r\n-                    envoyer_notification_commande(request, commande)  # Pass request here\r\n-                    return redirect('confirmation_commande', commande_id=commande.id)\r\n-                else:\r\n-                    messages.error(request, \"Votre panier est vide\")\r\n+                messages.error(request, \"Votre panier est vide\")\r\n         else:\r\n             messages.error(request, \"Méthode de paiement invalide\")\r\n     \r\n     return redirect('order_list')\r\n \r\n \r\n-\r\n def order_list(request):\r\n     orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n"
                },
                {
                    "date": 1740090578649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from urllib import request\r\n from django.shortcuts import redirect, render\r\n from django.contrib.auth.decorators import login_required\r\n from e_commerce.models import *\r\n from e_commerce.views import order\r\n"
                },
                {
                    "date": 1740090692711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    logo_url = request.build_absolute_uri(static('img/logo/ghislaine.png'))\r\n+    logo_url = \"Home/votre/logo.png\"\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n"
                },
                {
                    "date": 1740090702268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    logo_url = \"Home/votre/logo.png\"\r\n+    logo_url = \"home/votre/logo.png\"\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n"
                },
                {
                    "date": 1740090712775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     \"\"\"\r\n     # Récupérer les lignes de commande\r\n     order_lines = OrderLine.objects.filter(order=commande)\r\n     \r\n-    logo_url = \"home/votre/logo.png\"\r\n+    logo_url = \"home/logo.png\"\r\n     \r\n     # Préparer le contexte pour le template\r\n     context = {\r\n         'user': commande.user,\r\n"
                },
                {
                    "date": 1740149961526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,47 +72,78 @@\n         # Récupérer tous les items du panier\r\n         cart_items = CartItem.objects.filter(cart=panier)\r\n         \r\n         if cart_items.exists():\r\n-            # Calculer le total d'abord\r\n+            # Vérifier la disponibilité des stocks avant de créer la commande\r\n+            for item in cart_items:\r\n+                if item.quantity > item.product.stock_quantity:\r\n+                    raise ValueError(\r\n+                        f\"Stock insuffisant pour le produit {item.product.name}. \"\r\n+                        f\"Quantité disponible: {item.product.stock_quantity}\"\r\n+                    )\r\n+            \r\n+            # Calculer le total\r\n             total = sum(item.total_price for item in cart_items)\r\n             \r\n-            # Créer la commande\r\n-            commande = Order.objects.create(\r\n-                user=user,\r\n-                payment_method=payment_method,\r\n-                total=total\r\n-            )\r\n+            # Créer la commande dans une transaction\r\n+            from django.db import transaction\r\n             \r\n-            # Créer les lignes de commande pour chaque item\r\n-            for item in cart_items:\r\n-                OrderLine.objects.create(\r\n-                    order=commande,\r\n-                    product=item.product,\r\n-                    quantity=item.quantity,\r\n-                    unit_price=item.product.price,\r\n-                    line_total=item.total_price\r\n+            with transaction.atomic():\r\n+                # Créer la commande\r\n+                commande = Order.objects.create(\r\n+                    user=user,\r\n+                    payment_method=payment_method,\r\n+                    total=total\r\n                 )\r\n-            \r\n-            # Envoyer l'email de notification\r\n-            envoyer_notification_commande(commande)\r\n-            \r\n-            # Supprimer tous les items du panier\r\n-            cart_items.delete()\r\n-            \r\n-            # Désactiver le panier\r\n-            panier.is_active = True  # Correction: False au lieu de True\r\n-\r\n-            panier.save()\r\n-            \r\n-            return commande\r\n-            \r\n+                \r\n+                # Créer les lignes de commande et mettre à jour les stocks\r\n+                for item in cart_items:\r\n+                    # Créer la ligne de commande\r\n+                    OrderLine.objects.create(\r\n+                        order=commande,\r\n+                        product=item.product,\r\n+                        quantity=item.quantity,\r\n+                        unit_price=item.product.price,\r\n+                        line_total=item.total_price\r\n+                    )\r\n+                    \r\n+                    # Mettre à jour le stock du produit\r\n+                    product = item.product\r\n+                    product.stock_quantity -= item.quantity\r\n+                    \r\n+                    # Mettre à jour le statut si le stock atteint zéro\r\n+                    if product.stock_quantity == 0:\r\n+                        product.status = 'out_of_stock'\r\n+                    \r\n+                    product.save()\r\n+                \r\n+                # Envoyer l'email de notification\r\n+                envoyer_notification_commande(commande)\r\n+                \r\n+                # Supprimer tous les items du panier\r\n+                cart_items.delete()\r\n+                \r\n+                # Désactiver le panier\r\n+                panier.is_active = False\r\n+                panier.save()\r\n+                \r\n+                return commande\r\n+                \r\n     except ShoppingCart.DoesNotExist:\r\n         return None\r\n-    \r\n-    return None\r\n+    except ValueError as e:\r\n+        # Gérer l'erreur de stock insuffisant\r\n+        from django.contrib import messages\r\n+        messages.error(user.request, str(e))\r\n+        return None\r\n+    except Exception as e:\r\n+        # Logguer l'erreur pour le débogage\r\n+        import logging\r\n+        logger = logging.getLogger(__name__)\r\n+        logger.error(f\"Erreur lors de la création de la commande: {str(e)}\")\r\n+        return None\r\n \r\n-@login_required\r\n+    return None@login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n         \r\n"
                },
                {
                    "date": 1740160193007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,5 +199,6 @@\n         'subtotal': subtotal,\r\n         'total': total,\r\n         'number': number\r\n     }\r\n-    return render(request, 'home/valider_commande.html', context)\n\\ No newline at end of file\n+    return render(request, 'home/valider_commande.html', context)\r\n+\r\n"
                },
                {
                    "date": 1741040259675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,10 +140,10 @@\n         import logging\r\n         logger = logging.getLogger(__name__)\r\n         logger.error(f\"Erreur lors de la création de la commande: {str(e)}\")\r\n         return None\r\n+    return None@login_required\r\n \r\n-    return None@login_required\r\n def passer_commande(request):\r\n     if request.method == 'POST':\r\n         payment_method = request.POST.get('payment_method')\r\n         \r\n"
                },
                {
                    "date": 1741041405513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n     return redirect('order_list')\r\n \r\n \r\n def order_list(request):\r\n-    orders = Order.objects.filter(user=request.user).order_by('-created_at')\r\n+    orders = Order.objects.all( ).order_by('-created_at')\r\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n     else:\r\n         number = 0\r\n"
                },
                {
                    "date": 1741041420976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n     return redirect('order_list')\r\n \r\n \r\n def order_list(request):\r\n-    orders = Order.objects.all( ).order_by('-created_at')\r\n+    orders = Order.objects.all()\r\n     if request.user.is_authenticated:\r\n         number = CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n     else:\r\n         number = 0\r\n"
                }
            ],
            "date": 1739964787326,
            "name": "Commit-0",
            "content": " "
        }
    ]
}