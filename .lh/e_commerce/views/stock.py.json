{
    "sourceFile": "e_commerce/views/stock.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1740131744021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740138533202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+from django.views.generic import ListView, CreateView, UpdateView, DeleteView\r\n+from django.views.generic.detail import DetailView\r\n+from django.urls import reverse_lazy\r\n+from django.db.models import Sum, F\r\n+from django.contrib.auth.mixins import LoginRequiredMixin\r\n+from django.contrib import messages\r\n+\r\n+from e_commerce.models import CartItem, Product\r\n+\r\n+class ProductListView(LoginRequiredMixin, ListView):\r\n+    model = Product\r\n+    template_name = 'products/product_list.html'\r\n+    context_object_name = 'products'\r\n+    \r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        # Calculate available quantity (stock - items in carts)\r\n+        for product in context['products']:\r\n+            cart_items_quantity = CartItem.objects.filter(\r\n+                product=product\r\n+            ).aggregate(\r\n+                total_quantity=Sum('quantity')\r\n+            )['total_quantity'] or 0\r\n+            \r\n+            product.available_quantity = product.stock_quantity - cart_items_quantity\r\n+        return context\r\n+\r\n+class ProductCreateView(LoginRequiredMixin, CreateView):\r\n+    model = Product\r\n+    template_name = 'products/product_form.html'\r\n+    fields = ['name', 'description', 'category', 'parent', 'price', \r\n+              'discount_percentage', 'stock_quantity', 'status', 'image',\r\n+              'bestseller', 'recommended', 'star_product']\r\n+    success_url = reverse_lazy('product-list')\r\n+    \r\n+    def form_valid(self, form):\r\n+        messages.success(self.request, 'Product created successfully!')\r\n+        return super().form_valid(form)\r\n+\r\n+class ProductUpdateView(LoginRequiredMixin, UpdateView):\r\n+    model = Product\r\n+    template_name = 'products/product_form.html'\r\n+    fields = ['name', 'description', 'category', 'parent', 'price', \r\n+              'discount_percentage', 'stock_quantity', 'status', 'image',\r\n+              'bestseller', 'recommended', 'star_product']\r\n+    success_url = reverse_lazy('product-list')\r\n+    \r\n+    def form_valid(self, form):\r\n+        messages.success(self.request, 'Product updated successfully!')\r\n+        return super().form_valid(form)\r\n+\r\n+class ProductDeleteView(LoginRequiredMixin, DeleteView):\r\n+    model = Product\r\n+    template_name = 'products/product_confirm_delete.html'\r\n+    success_url = reverse_lazy('product-list')\r\n+    \r\n+    def delete(self, request, *args, **kwargs):\r\n+        messages.success(self.request, 'Product deleted successfully!')\r\n+        return super().delete(request, *args, **kwargs)\r\n+\r\n+class ProductDetailView(LoginRequiredMixin, DetailView):\r\n+    model = Product\r\n+    template_name = 'products/product_detail.html'\r\n+    \r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        product = self.get_object()\r\n+        \r\n+        # Calculate items in carts\r\n+        cart_items_quantity = CartItem.objects.filter(\r\n+            product=product\r\n+        ).aggregate(\r\n+            total_quantity=Sum('quantity')\r\n+        )['total_quantity'] or 0\r\n+        \r\n+        # Calculate available quantity\r\n+        context['available_quantity'] = product.stock_quantity - cart_items_quantity\r\n+        \r\n+        # Get cart item history\r\n+        context['cart_item_history'] = CartItem.history.filter(\r\n+            product=product\r\n+        ).order_by('-history_date')[:10]  # Last 10 transactions\r\n+        \r\n+        return context\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740138585741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from django.contrib import messages\r\n \r\n from e_commerce.models import CartItem, Product\r\n \r\n-class ProductListView(LoginRequiredMixin, ListView):\r\n+class ProductsListView(LoginRequiredMixin, ListView):\r\n     model = Product\r\n     template_name = 'products/product_list.html'\r\n     context_object_name = 'products'\r\n     \r\n"
                },
                {
                    "date": 1740139007447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from e_commerce.models import CartItem, Product\r\n \r\n class ProductsListView(LoginRequiredMixin, ListView):\r\n     model = Product\r\n-    template_name = 'products/product_list.html'\r\n+    template_name = 'stock/product_list.html'\r\n     context_object_name = 'products'\r\n     \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n"
                },
                {
                    "date": 1740139434779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n         return super().delete(request, *args, **kwargs)\r\n \r\n class ProductDetailView(LoginRequiredMixin, DetailView):\r\n     model = Product\r\n-    template_name = 'products/product_detail.html'\r\n+    template_name = 'stock/product_detail.html'\r\n     \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n         product = self.get_object()\r\n"
                },
                {
                    "date": 1740139514782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         return context\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n-    template_name = 'products/product_form.html'\r\n+    template_name = 'stock/product_form.html'\r\n     fields = ['name', 'description', 'category', 'parent', 'price', \r\n               'discount_percentage', 'stock_quantity', 'status', 'image',\r\n               'bestseller', 'recommended', 'star_product']\r\n     success_url = reverse_lazy('product-list')\r\n@@ -38,9 +38,9 @@\n         return super().form_valid(form)\r\n \r\n class ProductUpdateView(LoginRequiredMixin, UpdateView):\r\n     model = Product\r\n-    template_name = 'products/product_form.html'\r\n+    template_name = 'stock/product_form.html'\r\n     fields = ['name', 'description', 'category', 'parent', 'price', \r\n               'discount_percentage', 'stock_quantity', 'status', 'image',\r\n               'bestseller', 'recommended', 'star_product']\r\n     success_url = reverse_lazy('product-list')\r\n@@ -50,9 +50,9 @@\n         return super().form_valid(form)\r\n \r\n class ProductDeleteView(LoginRequiredMixin, DeleteView):\r\n     model = Product\r\n-    template_name = 'products/product_confirm_delete.html'\r\n+    template_name = 'stock/product_confirm_delete.html'\r\n     success_url = reverse_lazy('product-list')\r\n     \r\n     def delete(self, request, *args, **kwargs):\r\n         messages.success(self.request, 'Product deleted successfully!')\r\n"
                },
                {
                    "date": 1740140711561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from django.db.models import Sum, F\r\n from django.contrib.auth.mixins import LoginRequiredMixin\r\n from django.contrib import messages\r\n \r\n+from e_commerce.forms import ProductForm\r\n from e_commerce.models import CartItem, Product\r\n \r\n class ProductsListView(LoginRequiredMixin, ListView):\r\n     model = Product\r\n@@ -26,12 +27,10 @@\n         return context\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n+    form_class = ProductForm\r\n     template_name = 'stock/product_form.html'\r\n-    fields = ['name', 'description', 'category', 'parent', 'price', \r\n-              'discount_percentage', 'stock_quantity', 'status', 'image',\r\n-              'bestseller', 'recommended', 'star_product']\r\n     success_url = reverse_lazy('product-list')\r\n     \r\n     def form_valid(self, form):\r\n         messages.success(self.request, 'Product created successfully!')\r\n"
                },
                {
                    "date": 1740140728250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,12 +37,10 @@\n         return super().form_valid(form)\r\n \r\n class ProductUpdateView(LoginRequiredMixin, UpdateView):\r\n     model = Product\r\n+    form_class = ProductForm\r\n     template_name = 'stock/product_form.html'\r\n-    fields = ['name', 'description', 'category', 'parent', 'price', \r\n-              'discount_percentage', 'stock_quantity', 'status', 'image',\r\n-              'bestseller', 'recommended', 'star_product']\r\n     success_url = reverse_lazy('product-list')\r\n     \r\n     def form_valid(self, form):\r\n         messages.success(self.request, 'Product updated successfully!')\r\n"
                },
                {
                    "date": 1740148778319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+from django.views.generic import ListView, CreateView, UpdateView, DeleteView\r\n+from django.views.generic.detail import DetailView\r\n+from django.urls import reverse_lazy\r\n+from django.db.models import Sum, F\r\n+from django.contrib.auth.mixins import LoginRequiredMixin\r\n+from django.contrib import messages\r\n+\r\n+from e_commerce.forms import ProductForm\r\n+from e_commerce.models import CartItem, Product\r\n+\r\n+class ProductsListView(LoginRequiredMixin, ListView):\r\n+    model = Product\r\n+    template_name = 'stock/product_list.html'\r\n+    context_object_name = 'products'\r\n+    \r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        # Calculate available quantity (stock - items in carts)\r\n+        for product in context['products']:\r\n+            cart_items_quantity = CartItem.objects.filter(\r\n+                product=product\r\n+            ).aggregate(\r\n+                total_quantity=Sum('quantity')\r\n+            )['total_quantity'] or 0\r\n+            \r\n+            product.available_quantity = product.stock_quantity - cart_items_quantity\r\n+            \r\n+        return context\r\n+\r\n+class ProductCreateView(LoginRequiredMixin, CreateView):\r\n+    model = Product\r\n+    form_class = ProductForm\r\n+    template_name = 'stock/product_form.html'\r\n+    success_url = reverse_lazy('product-list')\r\n+    \r\n+    def form_valid(self, form):\r\n+        messages.success(self.request, 'Product created successfully!')\r\n+        return super().form_valid(form)\r\n+\r\n+class ProductUpdateView(LoginRequiredMixin, UpdateView):\r\n+    model = Product\r\n+    form_class = ProductForm\r\n+    template_name = 'stock/product_form.html'\r\n+    success_url = reverse_lazy('product-list')\r\n+    \r\n+    def form_valid(self, form):\r\n+        messages.success(self.request, 'Product updated successfully!')\r\n+        return super().form_valid(form)\r\n+\r\n+class ProductDeleteView(LoginRequiredMixin, DeleteView):\r\n+    model = Product\r\n+    template_name = 'stock/product_confirm_delete.html'\r\n+    success_url = reverse_lazy('product-list')\r\n+    \r\n+    def delete(self, request, *args, **kwargs):\r\n+        messages.success(self.request, 'Product deleted successfully!')\r\n+        return super().delete(request, *args, **kwargs)\r\n+\r\n+class ProductDetailView(LoginRequiredMixin, DetailView):\r\n+    model = Product\r\n+    template_name = 'stock/product_detail.html'\r\n+    \r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        product = self.get_object()\r\n+        \r\n+        # Calculate items in carts\r\n+        cart_items_quantity = CartItem.objects.filter(\r\n+            product=product\r\n+        ).aggregate(\r\n+            total_quantity=Sum('quantity')\r\n+        )['total_quantity'] or 0\r\n+        \r\n+        # Calculate available quantity\r\n+        context['available_quantity'] = product.stock_quantity - cart_items_quantity\r\n+        \r\n+        # Get cart item history\r\n+        context['cart_item_history'] = CartItem.history.filter(\r\n+            product=product\r\n+        ).order_by('-history_date')[:10]  # Last 10 transactions\r\n+        \r\n+        return context\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740148853750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n                 total_quantity=Sum('quantity')\r\n             )['total_quantity'] or 0\r\n             \r\n             product.available_quantity = product.stock_quantity - cart_items_quantity\r\n-            \r\n+            product.out=product.stock_quantity-product.available_quantity\r\n         return context\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n@@ -78,86 +78,5 @@\n         context['cart_item_history'] = CartItem.history.filter(\r\n             product=product\r\n         ).order_by('-history_date')[:10]  # Last 10 transactions\r\n         \r\n-        return context\n-from django.views.generic import ListView, CreateView, UpdateView, DeleteView\r\n-from django.views.generic.detail import DetailView\r\n-from django.urls import reverse_lazy\r\n-from django.db.models import Sum, F\r\n-from django.contrib.auth.mixins import LoginRequiredMixin\r\n-from django.contrib import messages\r\n-\r\n-from e_commerce.forms import ProductForm\r\n-from e_commerce.models import CartItem, Product\r\n-\r\n-class ProductsListView(LoginRequiredMixin, ListView):\r\n-    model = Product\r\n-    template_name = 'stock/product_list.html'\r\n-    context_object_name = 'products'\r\n-    \r\n-    def get_context_data(self, **kwargs):\r\n-        context = super().get_context_data(**kwargs)\r\n-        # Calculate available quantity (stock - items in carts)\r\n-        for product in context['products']:\r\n-            cart_items_quantity = CartItem.objects.filter(\r\n-                product=product\r\n-            ).aggregate(\r\n-                total_quantity=Sum('quantity')\r\n-            )['total_quantity'] or 0\r\n-            \r\n-            product.available_quantity = product.stock_quantity - cart_items_quantity\r\n-        return context\r\n-\r\n-class ProductCreateView(LoginRequiredMixin, CreateView):\r\n-    model = Product\r\n-    form_class = ProductForm\r\n-    template_name = 'stock/product_form.html'\r\n-    success_url = reverse_lazy('product-list')\r\n-    \r\n-    def form_valid(self, form):\r\n-        messages.success(self.request, 'Product created successfully!')\r\n-        return super().form_valid(form)\r\n-\r\n-class ProductUpdateView(LoginRequiredMixin, UpdateView):\r\n-    model = Product\r\n-    form_class = ProductForm\r\n-    template_name = 'stock/product_form.html'\r\n-    success_url = reverse_lazy('product-list')\r\n-    \r\n-    def form_valid(self, form):\r\n-        messages.success(self.request, 'Product updated successfully!')\r\n-        return super().form_valid(form)\r\n-\r\n-class ProductDeleteView(LoginRequiredMixin, DeleteView):\r\n-    model = Product\r\n-    template_name = 'stock/product_confirm_delete.html'\r\n-    success_url = reverse_lazy('product-list')\r\n-    \r\n-    def delete(self, request, *args, **kwargs):\r\n-        messages.success(self.request, 'Product deleted successfully!')\r\n-        return super().delete(request, *args, **kwargs)\r\n-\r\n-class ProductDetailView(LoginRequiredMixin, DetailView):\r\n-    model = Product\r\n-    template_name = 'stock/product_detail.html'\r\n-    \r\n-    def get_context_data(self, **kwargs):\r\n-        context = super().get_context_data(**kwargs)\r\n-        product = self.get_object()\r\n-        \r\n-        # Calculate items in carts\r\n-        cart_items_quantity = CartItem.objects.filter(\r\n-            product=product\r\n-        ).aggregate(\r\n-            total_quantity=Sum('quantity')\r\n-        )['total_quantity'] or 0\r\n-        \r\n-        # Calculate available quantity\r\n-        context['available_quantity'] = product.stock_quantity - cart_items_quantity\r\n-        \r\n-        # Get cart item history\r\n-        context['cart_item_history'] = CartItem.history.filter(\r\n-            product=product\r\n-        ).order_by('-history_date')[:10]  # Last 10 transactions\r\n-        \r\n         return context\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740149676693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,12 @@\n                 total_quantity=Sum('quantity')\r\n             )['total_quantity'] or 0\r\n             \r\n             product.available_quantity = product.stock_quantity - cart_items_quantity\r\n+            \r\n             product.out=product.stock_quantity-product.available_quantity\r\n+            \r\n+            \r\n         return context\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n"
                },
                {
                    "date": 1740153218637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,7 @@\n+from datetime import timezone\r\n+from django.shortcuts import redirect\r\n+from django.views import View\r\n from django.views.generic import ListView, CreateView, UpdateView, DeleteView\r\n from django.views.generic.detail import DetailView\r\n from django.urls import reverse_lazy\r\n from django.db.models import Sum, F\r\n@@ -81,5 +84,93 @@\n         context['cart_item_history'] = CartItem.history.filter(\r\n             product=product\r\n         ).order_by('-history_date')[:10]  # Last 10 transactions\r\n         \r\n-        return context\n\\ No newline at end of file\n+        return context\r\n+    \r\n+    \r\n+    \r\n+\r\n+def mettre_a_jour_stock(product_id, new_quantity, operation='set'):\r\n+    \"\"\"\r\n+    Met à jour la quantité d'un produit et son statut.\r\n+    \r\n+    Args:\r\n+        product_id (int): ID du produit à mettre à jour\r\n+        new_quantity (int): Nouvelle quantité ou quantité à ajouter/soustraire\r\n+        operation (str): Type d'opération ('set', 'add', 'subtract')\r\n+    \r\n+    Returns:\r\n+        tuple: (bool, str) - (succès de l'opération, message)\r\n+    \"\"\"\r\n+    try:\r\n+        from django.db import transaction\r\n+        \r\n+        with transaction.atomic():\r\n+            # Récupérer le produit\r\n+            product = Product.objects.select_for_update().get(id=product_id)\r\n+            \r\n+            # Calculer la nouvelle quantité selon l'opération\r\n+            if operation == 'set':\r\n+                final_quantity = new_quantity\r\n+            elif operation == 'add':\r\n+                final_quantity = product.stock_quantity + new_quantity\r\n+            elif operation == 'subtract':\r\n+                final_quantity = product.stock_quantity - new_quantity\r\n+            else:\r\n+                return False, \"Opération non valide\"\r\n+            \r\n+            # Vérifier que la quantité n'est pas négative\r\n+            if final_quantity < 0:\r\n+                return False, \"La quantité ne peut pas être négative\"\r\n+            \r\n+            # Mettre à jour la quantité\r\n+            product.stock_quantity = final_quantity\r\n+            \r\n+            # Mettre à jour le statut selon la quantité\r\n+            if final_quantity == 0:\r\n+                product.status = 'out_of_stock'\r\n+            elif final_quantity > 0:\r\n+                product.status = 'available'\r\n+            \r\n+            # Sauvegarder les modifications\r\n+            product.save()\r\n+            \r\n+            # Créer une entrée dans l'historique\r\n+            product.history.create(\r\n+                history_date=timezone.now(),\r\n+                history_type=\"Mise à jour du stock\",\r\n+                history_change_reason=f\"Quantité modifiée de {product.stock_quantity} à {final_quantity}\"\r\n+            )\r\n+            \r\n+            # Préparer le message de retour\r\n+            status_message = \"épuisé\" if product.status == 'out_of_stock' else \"disponible\"\r\n+            return True, f\"Stock mis à jour. Nouvelle quantité: {final_quantity}, Statut: {status_message}\"\r\n+            \r\n+    except Product.DoesNotExist:\r\n+        return False, \"Produit non trouvé\"\r\n+    except Exception as e:\r\n+        # Logger l'erreur pour le débogage\r\n+        import logging\r\n+        logger = logging.getLogger(__name__)\r\n+        logger.error(f\"Erreur lors de la mise à jour du stock: {str(e)}\")\r\n+        return False, \"Une erreur est survenue lors de la mise à jour\"\r\n+\r\n+# Exemple d'utilisation dans une vue\r\n+class UpdateProductStockView(LoginRequiredMixin, View):\r\n+    def post(self, request, product_id):\r\n+        try:\r\n+            quantity = int(request.POST.get('quantity', 0))\r\n+            operation = request.POST.get('operation', 'set')\r\n+            \r\n+            success, message = mettre_a_jour_stock(product_id, quantity, operation)\r\n+            \r\n+            if success:\r\n+                messages.success(request, message)\r\n+            else:\r\n+                messages.error(request, message)\r\n+            \r\n+            return redirect('product-detail', pk=product_id)\r\n+            \r\n+        except ValueError:\r\n+            messages.error(request, \"Quantité invalide\")\r\n+            return redirect('product-detail', pk=product_id)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740154025788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,88 +89,88 @@\n     \r\n     \r\n     \r\n \r\n-def mettre_a_jour_stock(product_id, new_quantity, operation='set'):\r\n-    \"\"\"\r\n-    Met à jour la quantité d'un produit et son statut.\r\n+# def mettre_a_jour_stock(product_id, new_quantity, operation='set'):\r\n+#     \"\"\"\r\n+#     Met à jour la quantité d'un produit et son statut.\r\n     \r\n-    Args:\r\n-        product_id (int): ID du produit à mettre à jour\r\n-        new_quantity (int): Nouvelle quantité ou quantité à ajouter/soustraire\r\n-        operation (str): Type d'opération ('set', 'add', 'subtract')\r\n+#     Args:\r\n+#         product_id (int): ID du produit à mettre à jour\r\n+#         new_quantity (int): Nouvelle quantité ou quantité à ajouter/soustraire\r\n+#         operation (str): Type d'opération ('set', 'add', 'subtract')\r\n     \r\n-    Returns:\r\n-        tuple: (bool, str) - (succès de l'opération, message)\r\n-    \"\"\"\r\n-    try:\r\n-        from django.db import transaction\r\n+#     Returns:\r\n+#         tuple: (bool, str) - (succès de l'opération, message)\r\n+#     \"\"\"\r\n+#     try:\r\n+#         from django.db import transaction\r\n         \r\n-        with transaction.atomic():\r\n-            # Récupérer le produit\r\n-            product = Product.objects.select_for_update().get(id=product_id)\r\n+#         with transaction.atomic():\r\n+#             # Récupérer le produit\r\n+#             product = Product.objects.select_for_update().get(id=product_id)\r\n             \r\n-            # Calculer la nouvelle quantité selon l'opération\r\n-            if operation == 'set':\r\n-                final_quantity = new_quantity\r\n-            elif operation == 'add':\r\n-                final_quantity = product.stock_quantity + new_quantity\r\n-            elif operation == 'subtract':\r\n-                final_quantity = product.stock_quantity - new_quantity\r\n-            else:\r\n-                return False, \"Opération non valide\"\r\n+#             # Calculer la nouvelle quantité selon l'opération\r\n+#             if operation == 'set':\r\n+#                 final_quantity = new_quantity\r\n+#             elif operation == 'add':\r\n+#                 final_quantity = product.stock_quantity + new_quantity\r\n+#             elif operation == 'subtract':\r\n+#                 final_quantity = product.stock_quantity - new_quantity\r\n+#             else:\r\n+#                 return False, \"Opération non valide\"\r\n             \r\n-            # Vérifier que la quantité n'est pas négative\r\n-            if final_quantity < 0:\r\n-                return False, \"La quantité ne peut pas être négative\"\r\n+#             # Vérifier que la quantité n'est pas négative\r\n+#             if final_quantity < 0:\r\n+#                 return False, \"La quantité ne peut pas être négative\"\r\n             \r\n-            # Mettre à jour la quantité\r\n-            product.stock_quantity = final_quantity\r\n+#             # Mettre à jour la quantité\r\n+#             product.stock_quantity = final_quantity\r\n             \r\n-            # Mettre à jour le statut selon la quantité\r\n-            if final_quantity == 0:\r\n-                product.status = 'out_of_stock'\r\n-            elif final_quantity > 0:\r\n-                product.status = 'available'\r\n+#             # Mettre à jour le statut selon la quantité\r\n+#             if final_quantity == 0:\r\n+#                 product.status = 'out_of_stock'\r\n+#             elif final_quantity > 0:\r\n+#                 product.status = 'available'\r\n             \r\n-            # Sauvegarder les modifications\r\n-            product.save()\r\n+#             # Sauvegarder les modifications\r\n+#             product.save()\r\n             \r\n-            # Créer une entrée dans l'historique\r\n-            product.history.create(\r\n-                history_date=timezone.now(),\r\n\\ No newline at end of file\n-                history_type=\"Mise à jour du stock\",\r\n-                history_change_reason=f\"Quantité modifiée de {product.stock_quantity} à {final_quantity}\"\r\n-            )\r\n+#             # Créer une entrée dans l'historique\r\n+#             product.history.create(\r\n+#                 history_date=timezone.now(),\r\n+#                 history_type=\"Mise à jour du stock\",\r\n+#                 history_change_reason=f\"Quantité modifiée de {product.stock_quantity} à {final_quantity}\"\r\n+#             )\r\n             \r\n-            # Préparer le message de retour\r\n-            status_message = \"épuisé\" if product.status == 'out_of_stock' else \"disponible\"\r\n-            return True, f\"Stock mis à jour. Nouvelle quantité: {final_quantity}, Statut: {status_message}\"\r\n+#             # Préparer le message de retour\r\n+#             status_message = \"épuisé\" if product.status == 'out_of_stock' else \"disponible\"\r\n+#             return True, f\"Stock mis à jour. Nouvelle quantité: {final_quantity}, Statut: {status_message}\"\r\n             \r\n-    except Product.DoesNotExist:\r\n-        return False, \"Produit non trouvé\"\r\n-    except Exception as e:\r\n-        # Logger l'erreur pour le débogage\r\n-        import logging\r\n-        logger = logging.getLogger(__name__)\r\n-        logger.error(f\"Erreur lors de la mise à jour du stock: {str(e)}\")\r\n-        return False, \"Une erreur est survenue lors de la mise à jour\"\r\n+#     except Product.DoesNotExist:\r\n+#         return False, \"Produit non trouvé\"\r\n+#     except Exception as e:\r\n+#         # Logger l'erreur pour le débogage\r\n+#         import logging\r\n+#         logger = logging.getLogger(__name__)\r\n+#         logger.error(f\"Erreur lors de la mise à jour du stock: {str(e)}\")\r\n+#         return False, \"Une erreur est survenue lors de la mise à jour\"\r\n \r\n-# Exemple d'utilisation dans une vue\r\n-class UpdateProductStockView(LoginRequiredMixin, View):\r\n-    def post(self, request, product_id):\r\n-        try:\r\n-            quantity = int(request.POST.get('quantity', 0))\r\n-            operation = request.POST.get('operation', 'set')\r\n+# # Exemple d'utilisation dans une vue\r\n+# class UpdateProductStockView(LoginRequiredMixin, View):\r\n+#     def post(self, request, product_id):\r\n+#         try:\r\n+#             quantity = int(request.POST.get('quantity', 0))\r\n+#             operation = request.POST.get('operation', 'set')\r\n             \r\n-            success, message = mettre_a_jour_stock(product_id, quantity, operation)\r\n+#             success, message = mettre_a_jour_stock(product_id, quantity, operation)\r\n             \r\n-            if success:\r\n-                messages.success(request, message)\r\n-            else:\r\n-                messages.error(request, message)\r\n+#             if success:\r\n+#                 messages.success(request, message)\r\n+#             else:\r\n+#                 messages.error(request, message)\r\n             \r\n-            return redirect('product-detail', pk=product_id)\r\n+#             return redirect('product-detail', pk=product_id)\r\n             \r\n-        except ValueError:\r\n-            messages.error(request, \"Quantité invalide\")\r\n-            return redirect('product-detail', pk=product_id)\n+#         except ValueError:\r\n+#             messages.error(request, \"Quantité invalide\")\r\n+#             return redirect('product-detail', pk=product_id)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740154607229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,35 @@\n from django.contrib.auth.mixins import LoginRequiredMixin\r\n from django.contrib import messages\r\n \r\n from e_commerce.forms import ProductForm\r\n-from e_commerce.models import CartItem, Product\r\n+from e_commerce.models import CartItem, Category, Favorite, ParentCategory, Product\r\n \r\n class ProductsListView(LoginRequiredMixin, ListView):\r\n     model = Product\r\n     template_name = 'stock/product_list.html'\r\n     context_object_name = 'products'\r\n     \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n+        # Add  category et category parent for flitred categories\r\n+        context['categories'] = Category.objects.all()\r\n+        context['parent_categories'] = ParentCategory.objects.all()\r\n+      # Vérifier si l'utilisateur est authentifié avant de filtrer les CartItem\r\n+         \r\n+        context['search_name'] = self.request.GET.get('search_name', '')\r\n+        context['category_id'] = self.request.GET.get('category', '')\r\n+        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n+        # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n+        user_favorites = []\r\n+        if self.request.user.is_authenticated:\r\n+            user_favorites = list(Favorite.objects.filter(user=self.request.user).values_list('product_id', flat=True))\r\n+            user_favorites = [str(id) for id in user_favorites]\r\n+        context['user_favorites'] = user_favorites\r\n+        return context\r\n+    \r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n         # Calculate available quantity (stock - items in carts)\r\n         for product in context['products']:\r\n             cart_items_quantity = CartItem.objects.filter(\r\n                 product=product\r\n"
                },
                {
                    "date": 1740154637837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,9 @@\n          \r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-        # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n-        user_favorites = []\r\n-        if self.request.user.is_authenticated:\r\n-            user_favorites = list(Favorite.objects.filter(user=self.request.user).values_list('product_id', flat=True))\r\n-            user_favorites = [str(id) for id in user_favorites]\r\n-        context['user_favorites'] = user_favorites\r\n+         \r\n         return context\r\n     \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n"
                },
                {
                    "date": 1740154662220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,14 @@\n     model = Product\r\n     template_name = 'stock/product_list.html'\r\n     context_object_name = 'products'\r\n     \r\n+    \r\n+    \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n+        \r\n+         \r\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n       # Vérifier si l'utilisateur est authentifié avant de filtrer les CartItem\r\n@@ -26,12 +30,8 @@\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n          \r\n-        return context\r\n-    \r\n-    def get_context_data(self, **kwargs):\r\n-        context = super().get_context_data(**kwargs)\r\n         # Calculate available quantity (stock - items in carts)\r\n         for product in context['products']:\r\n             cart_items_quantity = CartItem.objects.filter(\r\n                 product=product\r\n@@ -41,10 +41,10 @@\n             \r\n             product.available_quantity = product.stock_quantity - cart_items_quantity\r\n             \r\n             product.out=product.stock_quantity-product.available_quantity\r\n+        \r\n             \r\n-            \r\n         return context\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n"
                },
                {
                    "date": 1740155320198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,23 +15,40 @@\n     model = Product\r\n     template_name = 'stock/product_list.html'\r\n     context_object_name = 'products'\r\n     \r\n+    def get_queryset(self):\r\n+        queryset = Product.objects.all()\r\n+        \r\n+        # Get search parameters from GET request\r\n+        search_name = self.request.GET.get('search_name')\r\n+        category_id = self.request.GET.get('category')\r\n+        parent_category_id = self.request.GET.get('parent_category')\r\n+        \r\n+        # Apply filters if they exist\r\n+        if search_name:\r\n+            queryset = queryset.filter(name__icontains=search_name)\r\n+            \r\n+        if category_id:\r\n+            queryset = queryset.filter(category_id=category_id)\r\n+            \r\n+        if parent_category_id:\r\n+            queryset = queryset.filter(category__parent_category_id=parent_category_id)\r\n+            \r\n+        return queryset\r\n     \r\n-    \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n         \r\n-         \r\n-        # Add  category et category parent for flitred categories\r\n+        # Add categories for filtering\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-      # Vérifier si l'utilisateur est authentifié avant de filtrer les CartItem\r\n-         \r\n+        \r\n+        # Add search parameters to context for form persistence\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-         \r\n+        \r\n         # Calculate available quantity (stock - items in carts)\r\n         for product in context['products']:\r\n             cart_items_quantity = CartItem.objects.filter(\r\n                 product=product\r\n@@ -39,12 +56,10 @@\n                 total_quantity=Sum('quantity')\r\n             )['total_quantity'] or 0\r\n             \r\n             product.available_quantity = product.stock_quantity - cart_items_quantity\r\n-            \r\n-            product.out=product.stock_quantity-product.available_quantity\r\n+            product.out = product.stock_quantity - product.available_quantity\r\n         \r\n-            \r\n         return context\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n"
                },
                {
                    "date": 1740155621608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,47 +8,17 @@\n from django.contrib.auth.mixins import LoginRequiredMixin\r\n from django.contrib import messages\r\n \r\n from e_commerce.forms import ProductForm\r\n-from e_commerce.models import CartItem, Category, Favorite, ParentCategory, Product\r\n+from e_commerce.models import CartItem, Product\r\n \r\n class ProductsListView(LoginRequiredMixin, ListView):\r\n     model = Product\r\n     template_name = 'stock/product_list.html'\r\n     context_object_name = 'products'\r\n     \r\n-    def get_queryset(self):\r\n-        queryset = Product.objects.all()\r\n-        \r\n-        # Get search parameters from GET request\r\n-        search_name = self.request.GET.get('search_name')\r\n-        category_id = self.request.GET.get('category')\r\n-        parent_category_id = self.request.GET.get('parent_category')\r\n-        \r\n-        # Apply filters if they exist\r\n-        if search_name:\r\n-            queryset = queryset.filter(name__icontains=search_name)\r\n-            \r\n-        if category_id:\r\n-            queryset = queryset.filter(category_id=category_id)\r\n-            \r\n-        if parent_category_id:\r\n-            queryset = queryset.filter(category__parent_category_id=parent_category_id)\r\n-            \r\n-        return queryset\r\n-    \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n-        \r\n-        # Add categories for filtering\r\n-        context['categories'] = Category.objects.all()\r\n-        context['parent_categories'] = ParentCategory.objects.all()\r\n-        \r\n-        # Add search parameters to context for form persistence\r\n-        context['search_name'] = self.request.GET.get('search_name', '')\r\n-        context['category_id'] = self.request.GET.get('category', '')\r\n-        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-        \r\n         # Calculate available quantity (stock - items in carts)\r\n         for product in context['products']:\r\n             cart_items_quantity = CartItem.objects.filter(\r\n                 product=product\r\n@@ -56,10 +26,12 @@\n                 total_quantity=Sum('quantity')\r\n             )['total_quantity'] or 0\r\n             \r\n             product.available_quantity = product.stock_quantity - cart_items_quantity\r\n-            product.out = product.stock_quantity - product.available_quantity\r\n-        \r\n+            \r\n+            product.out=product.stock_quantity-product.available_quantity\r\n+            \r\n+            \r\n         return context\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n"
                },
                {
                    "date": 1740155850251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,18 +8,19 @@\n from django.contrib.auth.mixins import LoginRequiredMixin\r\n from django.contrib import messages\r\n \r\n from e_commerce.forms import ProductForm\r\n-from e_commerce.models import CartItem, Product\r\n+from e_commerce.models import CartItem, Category, ParentCategory, Product\r\n \r\n class ProductsListView(LoginRequiredMixin, ListView):\r\n     model = Product\r\n     template_name = 'stock/product_list.html'\r\n     context_object_name = 'products'\r\n     \r\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n-        # Calculate available quantity (stock - items in carts)\r\n+        context['categories'] = Category.objects.all()\r\n+        context['parent_categories'] = ParentCategory.objects.all()\r\n         for product in context['products']:\r\n             cart_items_quantity = CartItem.objects.filter(\r\n                 product=product\r\n             ).aggregate(\r\n"
                },
                {
                    "date": 1740155869562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,11 @@\n     def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n+        context['search_name'] = self.request.GET.get('search_name', '')\r\n+        context['category_id'] = self.request.GET.get('category', '')\r\n+        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n         for product in context['products']:\r\n             cart_items_quantity = CartItem.objects.filter(\r\n                 product=product\r\n             ).aggregate(\r\n"
                },
                {
                    "date": 1740155888332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,28 @@\n             product.out=product.stock_quantity-product.available_quantity\r\n             \r\n             \r\n         return context\r\n+    \r\n+    def get_queryset(self):\r\n+        queryset = Product.objects.all()\r\n+        \r\n+        # Filtre par nom de produit\r\n+        search_name = self.request.GET.get('search_name')\r\n+        if search_name:\r\n+            queryset = queryset.filter(name__icontains=search_name)\r\n+        \r\n+        # Filtre par catégorie\r\n+        category_id = self.request.GET.get('category')\r\n+        if category_id:\r\n+            queryset = queryset.filter(category_id=category_id)\r\n+        \r\n+        # Filtre par catégorie parente\r\n+        parent_category_id = self.request.GET.get('parent_category')\r\n+        if parent_category_id:\r\n+            queryset = queryset.filter(parent_id=parent_category_id)\r\n+            \r\n+        return queryset.order_by('name')\r\n \r\n class ProductCreateView(LoginRequiredMixin, CreateView):\r\n     model = Product\r\n     form_class = ProductForm\r\n"
                }
            ],
            "date": 1740131744021,
            "name": "Commit-0",
            "content": ""
        }
    ]
}