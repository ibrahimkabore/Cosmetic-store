{
    "sourceFile": "e_commerce/views/product.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1739025482651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739025523682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,7 @@\n from django.shortcuts import get_object_or_404, render\r\n-from e_commerce.models import Product\n\\ No newline at end of file\n+from e_commerce.models import Product\r\n+\r\n+def product(request, pk):\r\n+   \r\n+    \r\n+    return render(request, 'home/product.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739025567171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n from django.shortcuts import get_object_or_404, render\r\n from e_commerce.models import Product\r\n \r\n def product(request, pk):\r\n-   \r\n-    \r\n+\r\n     return render(request, 'home/product.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739025965988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from django.shortcuts import get_object_or_404, render\r\n from e_commerce.models import Product\r\n \r\n-def product(request, pk):\r\n+def product(request):\r\n \r\n     return render(request, 'home/product.html')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739186088877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,6 @@\n+from django.shortcuts import get_object_or_404, render\r\n+from e_commerce.models import Product\r\n+\r\n+def product(request):\r\n+    product = Product.object.all()\r\n+    return render(request, 'home/product.html', {'product': product})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739186633762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,44 @@\n-from django.shortcuts import get_object_or_404, render\r\n-from e_commerce.models import Product\r\n+ \r\n+# views.py\r\n+from django.views.generic import ListView\r\n+from django.db.models import Q\r\n+from .models import Product, Category, ParentCategory\r\n \r\n-def product(request):\r\n-    product = Product.object.all()\r\n-    return render(request, 'home/product.html', {'product': product})\n-from django.shortcuts import get_object_or_404, render\r\n\\ No newline at end of file\n-from e_commerce.models import Product\r\n+class ProductListView(ListView):\r\n+    model = Product\r\n+    template_name = 'home/product.html'\r\n+    context_object_name = 'products'\r\n+    paginate_by = 10  # Pagination facultative, 10 produits par page\r\n \r\n-def product(request):\r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        # Ajouter les catégories et catégories parentes pour les filtres\r\n+        context['categories'] = Category.objects.all()\r\n+        context['parent_categories'] = ParentCategory.objects.all()\r\n+        \r\n+        # Récupérer les paramètres de recherche\r\n+        context['search_name'] = self.request.GET.get('search_name', '')\r\n+        context['category_id'] = self.request.GET.get('category', '')\r\n+        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n+        \r\n+        return context\r\n \r\n-    return render(request, 'home/product.html')\n+    def get_queryset(self):\r\n+        queryset = Product.objects.all()\r\n+        \r\n+        # Filtre par nom de produit\r\n+        search_name = self.request.GET.get('search_name')\r\n+        if search_name:\r\n+            queryset = queryset.filter(name__icontains=search_name)\r\n+        \r\n+        # Filtre par catégorie\r\n+        category_id = self.request.GET.get('category')\r\n+        if category_id:\r\n+            queryset = queryset.filter(category_id=category_id)\r\n+        \r\n+        # Filtre par catégorie parente\r\n+        parent_category_id = self.request.GET.get('parent_category')\r\n+        if parent_category_id:\r\n+            queryset = queryset.filter(parent_id=parent_category_id)\r\n+            \r\n+        return queryset.order_by('name')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739186691504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n  \r\n # views.py\r\n from django.views.generic import ListView\r\n from django.db.models import Q\r\n-from .models import Product, Category, ParentCategory\r\n+from e_commerce.models import Product, Category, ParentCategory\r\n \r\n class ProductListView(ListView):\r\n     model = Product\r\n     template_name = 'home/product.html'\r\n"
                },
                {
                    "date": 1739188221701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+ \r\n+# views.py\r\n+from django.views.generic import ListView\r\n+from django.db.models import Q\r\n+from e_commerce.models import Product, Category, ParentCategory\r\n+\r\n+class ProductListView(ListView):\r\n+    model = Product\r\n+    template_name = 'home/product.html'\r\n+    context_object_name = 'products'\r\n+    paginate_by = 10  # Pagination  \r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        # Add  category et category parent for flitred categories\r\n+        context['categories'] = Category.objects.all()\r\n+        context['parent_categories'] = ParentCategory.objects.all()\r\n+        \r\n+        # Récupérer les paramètres de recherche\r\n+        context['search_name'] = self.request.GET.get('search_name', '')\r\n+        context['category_id'] = self.request.GET.get('category', '')\r\n+        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n+        \r\n+        return context\r\n+\r\n+    def get_queryset(self):\r\n+        queryset = Product.objects.all()\r\n+        \r\n+        # Filtre par nom de produit\r\n+        search_name = self.request.GET.get('search_name')\r\n+        if search_name:\r\n+            queryset = queryset.filter(name__icontains=search_name)\r\n+        \r\n+        # Filtre par catégorie\r\n+        category_id = self.request.GET.get('category')\r\n+        if category_id:\r\n+            queryset = queryset.filter(category_id=category_id)\r\n+        \r\n+        # Filtre par catégorie parente\r\n+        parent_category_id = self.request.GET.get('parent_category')\r\n+        if parent_category_id:\r\n+            queryset = queryset.filter(parent_id=parent_category_id)\r\n+            \r\n+        return queryset.order_by('name')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739188249098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n         \r\n-        # Récupérer les paramètres de recherche\r\n+        #Retrieve search parameters\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n         \r\n@@ -39,49 +39,5 @@\n         parent_category_id = self.request.GET.get('parent_category')\r\n         if parent_category_id:\r\n             queryset = queryset.filter(parent_id=parent_category_id)\r\n             \r\n-        return queryset.order_by('name')\n- \r\n-# views.py\r\n-from django.views.generic import ListView\r\n-from django.db.models import Q\r\n-from e_commerce.models import Product, Category, ParentCategory\r\n-\r\n-class ProductListView(ListView):\r\n-    model = Product\r\n-    template_name = 'home/product.html'\r\n-    context_object_name = 'products'\r\n-    paginate_by = 10  # Pagination facultative, 10 produits par page\r\n-\r\n-    def get_context_data(self, **kwargs):\r\n-        context = super().get_context_data(**kwargs)\r\n-        # Ajouter les catégories et catégories parentes pour les filtres\r\n-        context['categories'] = Category.objects.all()\r\n-        context['parent_categories'] = ParentCategory.objects.all()\r\n-        \r\n-        # Récupérer les paramètres de recherche\r\n-        context['search_name'] = self.request.GET.get('search_name', '')\r\n-        context['category_id'] = self.request.GET.get('category', '')\r\n-        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-        \r\n-        return context\r\n-\r\n-    def get_queryset(self):\r\n-        queryset = Product.objects.all()\r\n-        \r\n-        # Filtre par nom de produit\r\n-        search_name = self.request.GET.get('search_name')\r\n-        if search_name:\r\n-            queryset = queryset.filter(name__icontains=search_name)\r\n-        \r\n-        # Filtre par catégorie\r\n-        category_id = self.request.GET.get('category')\r\n-        if category_id:\r\n-            queryset = queryset.filter(category_id=category_id)\r\n-        \r\n-        # Filtre par catégorie parente\r\n-        parent_category_id = self.request.GET.get('parent_category')\r\n-        if parent_category_id:\r\n-            queryset = queryset.filter(parent_id=parent_category_id)\r\n-            \r\n         return queryset.order_by('name')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739201451353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+from django.views.generic import ListView\r\n+from django.db.models import Q\r\n+from e_commerce.models import Product, Category, ParentCategory\r\n+\r\n+class ProductListView(ListView):\r\n+    model = Product\r\n+    template_name = 'home/product.html'\r\n+    context_object_name = 'products'\r\n+    paginate_by = 10  # Pagination  \r\n+    def get_context_data(self, **kwargs):\r\n+        context = super().get_context_data(**kwargs)\r\n+        # Add  category et category parent for flitred categories\r\n+        context['categories'] = Category.objects.all()\r\n+        context['parent_categories'] = ParentCategory.objects.all()\r\n+        \r\n+        #Retrieve search parameters\r\n+        context['search_name'] = self.request.GET.get('search_name', '')\r\n+        context['category_id'] = self.request.GET.get('category', '')\r\n+        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n+        \r\n+        return context\r\n+\r\n+    def get_queryset(self):\r\n+        queryset = Product.objects.all()\r\n+        \r\n+        # Filtre par nom de produit\r\n+        search_name = self.request.GET.get('search_name')\r\n+        if search_name:\r\n+            queryset = queryset.filter(name__icontains=search_name)\r\n+        \r\n+        # Filtre par catégorie\r\n+        category_id = self.request.GET.get('category')\r\n+        if category_id:\r\n+            queryset = queryset.filter(category_id=category_id)\r\n+        \r\n+        # Filtre par catégorie parente\r\n+        parent_category_id = self.request.GET.get('parent_category')\r\n+        if parent_category_id:\r\n+            queryset = queryset.filter(parent_id=parent_category_id)\r\n+            \r\n+        return queryset.order_by('name')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739376656559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,55 @@\n from django.views.generic import ListView\r\n from django.db.models import Q\r\n-from e_commerce.models import Product, Category, ParentCategory\r\n+from e_commerce.models import Product, Category, ParentCategory,Favorite\r\n \r\n+from django.views.generic import ListView\r\n+ \r\n class ProductListView(ListView):\r\n     model = Product\r\n     template_name = 'home/product.html'\r\n-    context_object_name = 'products'\r\n-    paginate_by = 10  # Pagination  \r\n+    context_object_name = 'produits'\r\n+    paginate_by = 10  # Pagination des produits\r\n+    \r\n     def get_context_data(self, **kwargs):\r\n+        # Récupérer le contexte par défaut\r\n         context = super().get_context_data(**kwargs)\r\n-        # Add  category et category parent for flitred categories\r\n+\r\n+        # Récupérer les catégories et les catégories parentes pour les filtres\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-        \r\n-        #Retrieve search parameters\r\n+\r\n+        # Récupérer les paramètres de recherche\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-        \r\n-        return context\r\n \r\n-    def get_queryset(self):\r\n-        queryset = Product.objects.all()\r\n-        \r\n-        # Filtre par nom de produit\r\n-        search_name = self.request.GET.get('search_name')\r\n-        if search_name:\r\n-            queryset = queryset.filter(name__icontains=search_name)\r\n-        \r\n-        # Filtre par catégorie\r\n-        category_id = self.request.GET.get('category')\r\n-        if category_id:\r\n-            queryset = queryset.filter(category_id=category_id)\r\n-        \r\n-        # Filtre par catégorie parente\r\n-        parent_category_id = self.request.GET.get('parent_category')\r\n-        if parent_category_id:\r\n-            queryset = queryset.filter(parent_id=parent_category_id)\r\n-            \r\n-        return queryset.order_by('name')\n- \r\n-# views.py\r\n-from django.views.generic import ListView\r\n-from django.db.models import Q\r\n-from e_commerce.models import Product, Category, ParentCategory\r\n+        # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n+        user_favorites = []\r\n+        if self.request.user.is_authenticated:\r\n+            user_favorites = list(Favorite.objects.filter(user=self.request.user).values_list('product_id', flat=True))\r\n+            user_favorites = [str(id) for id in user_favorites]\r\n+        context['user_favorites'] = user_favorites\r\n \r\n-class ProductListView(ListView):\r\n-    model = Product\r\n-    template_name = 'home/product.html'\r\n-    context_object_name = 'products'\r\n-    paginate_by = 10  # Pagination  \r\n-    def get_context_data(self, **kwargs):\r\n-        context = super().get_context_data(**kwargs)\r\n-        # Add  category et category parent for flitred categories\r\n-        context['categories'] = Category.objects.all()\r\n-        context['parent_categories'] = ParentCategory.objects.all()\r\n-        \r\n-        #Retrieve search parameters\r\n-        context['search_name'] = self.request.GET.get('search_name', '')\r\n-        context['category_id'] = self.request.GET.get('category', '')\r\n-        context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-        \r\n         return context\r\n \r\n     def get_queryset(self):\r\n+        # Récupérer tous les produits\r\n\\ No newline at end of file\n         queryset = Product.objects.all()\r\n-        \r\n-        # Filtre par nom de produit\r\n+\r\n+        # Appliquer le filtre par nom de produit\r\n         search_name = self.request.GET.get('search_name')\r\n         if search_name:\r\n             queryset = queryset.filter(name__icontains=search_name)\r\n-        \r\n-        # Filtre par catégorie\r\n+\r\n+        # Appliquer le filtre par catégorie\r\n         category_id = self.request.GET.get('category')\r\n         if category_id:\r\n             queryset = queryset.filter(category_id=category_id)\r\n-        \r\n-        # Filtre par catégorie parente\r\n+\r\n+        # Appliquer le filtre par catégorie parente\r\n         parent_category_id = self.request.GET.get('parent_category')\r\n         if parent_category_id:\r\n             queryset = queryset.filter(parent_id=parent_category_id)\r\n-            \r\n-        return queryset.order_by('name')\n+\r\n+        # Retourner les produits triés par nom\r\n+        return queryset.order_by('name')\r\n"
                },
                {
                    "date": 1739376710786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,41 @@\n from django.views.generic import ListView\r\n from django.db.models import Q\r\n-from e_commerce.models import Product, Category, ParentCategory,Favorite\r\n+from e_commerce.models import Product, Category, ParentCategory\r\n \r\n-from django.views.generic import ListView\r\n- \r\n class ProductListView(ListView):\r\n     model = Product\r\n     template_name = 'home/product.html'\r\n-    context_object_name = 'produits'\r\n-    paginate_by = 10  # Pagination des produits\r\n-    \r\n+    context_object_name = 'products'\r\n+    paginate_by = 10  # Pagination  \r\n     def get_context_data(self, **kwargs):\r\n-        # Récupérer le contexte par défaut\r\n         context = super().get_context_data(**kwargs)\r\n-\r\n-        # Récupérer les catégories et les catégories parentes pour les filtres\r\n+        # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-\r\n-        # Récupérer les paramètres de recherche\r\n+        \r\n+        #Retrieve search parameters\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-\r\n-        # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n-        user_favorites = []\r\n-        if self.request.user.is_authenticated:\r\n-            user_favorites = list(Favorite.objects.filter(user=self.request.user).values_list('product_id', flat=True))\r\n-            user_favorites = [str(id) for id in user_favorites]\r\n-        context['user_favorites'] = user_favorites\r\n-\r\n+        \r\n         return context\r\n \r\n     def get_queryset(self):\r\n-        # Récupérer tous les produits\r\n         queryset = Product.objects.all()\r\n-\r\n-        # Appliquer le filtre par nom de produit\r\n+        \r\n+        # Filtre par nom de produit\r\n         search_name = self.request.GET.get('search_name')\r\n         if search_name:\r\n             queryset = queryset.filter(name__icontains=search_name)\r\n-\r\n-        # Appliquer le filtre par catégorie\r\n+        \r\n+        # Filtre par catégorie\r\n         category_id = self.request.GET.get('category')\r\n         if category_id:\r\n             queryset = queryset.filter(category_id=category_id)\r\n-\r\n-        # Appliquer le filtre par catégorie parente\r\n+        \r\n+        # Filtre par catégorie parente\r\n         parent_category_id = self.request.GET.get('parent_category')\r\n         if parent_category_id:\r\n             queryset = queryset.filter(parent_id=parent_category_id)\r\n-\r\n-        # Retourner les produits triés par nom\r\n+            \r\n         return queryset.order_by('name')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739376738204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from django.views.generic import ListView\r\n from django.db.models import Q\r\n-from e_commerce.models import Product, Category, ParentCategory\r\n+from e_commerce.models import Product, Category, ParentCategory,Favorite\r\n \r\n class ProductListView(ListView):\r\n     model = Product\r\n     template_name = 'home/product.html'\r\n@@ -16,9 +16,14 @@\n         #Retrieve search parameters\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n-        \r\n+        # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n+        user_favorites = []\r\n+        if self.request.user.is_authenticated:\r\n+            user_favorites = list(Favorite.objects.filter(user=self.request.user).values_list('product_id', flat=True))\r\n+            user_favorites = [str(id) for id in user_favorites]\r\n+        context['user_favorites'] = user_favorites\r\n         return context\r\n \r\n     def get_queryset(self):\r\n         queryset = Product.objects.all()\r\n"
                },
                {
                    "date": 1739878088022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n         context = super().get_context_data(**kwargs)\r\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-        \r\n+        number =CartItem.objects.count\r\n         #Retrieve search parameters\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n"
                },
                {
                    "date": 1739878133050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from django.views.generic import ListView\r\n from django.db.models import Q\r\n-from e_commerce.models import Product, Category, ParentCategory,Favorite\r\n+from e_commerce.models import CartItem, Product, Category, ParentCategory,Favorite\r\n \r\n class ProductListView(ListView):\r\n     model = Product\r\n     template_name = 'home/product.html'\r\n@@ -11,10 +11,10 @@\n         context = super().get_context_data(**kwargs)\r\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-        number =CartItem.objects.count\r\n-        #Retrieve search parameters\r\n+        context['number'] =CartItem.objects.count\r\n+     \r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n         # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n"
                },
                {
                    "date": 1739909967238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from urllib import request\r\n from django.views.generic import ListView\r\n from django.db.models import Q\r\n from e_commerce.models import CartItem, Product, Category, ParentCategory,Favorite\r\n \r\n@@ -11,10 +12,13 @@\n         context = super().get_context_data(**kwargs)\r\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-        context['number'] =CartItem.objects.count\r\n-     \r\n+        if request.user.is_authenticated:\r\n+            context['number'] =CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+        else:\r\n+            context['number'] = 0\r\n+            \r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n         # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n"
                },
                {
                    "date": 1739910013285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     model = Product\r\n     template_name = 'home/product.html'\r\n     context_object_name = 'products'\r\n     paginate_by = 10  # Pagination  \r\n-    def get_context_data(self, **kwargs):\r\n+    def get_context_data(self, **kwargs,request):\r\n         context = super().get_context_data(**kwargs)\r\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n"
                },
                {
                    "date": 1739910033251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,18 +7,14 @@\n     model = Product\r\n     template_name = 'home/product.html'\r\n     context_object_name = 'products'\r\n     paginate_by = 10  # Pagination  \r\n-    def get_context_data(self, **kwargs,request):\r\n+    def get_context_data(self, **kwargs):\r\n         context = super().get_context_data(**kwargs)\r\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-        if request.user.is_authenticated:\r\n-            context['number'] =CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n-        else:\r\n-            context['number'] = 0\r\n-            \r\n+        context['number'] =CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n         # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n"
                },
                {
                    "date": 1739910045428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from urllib import request\r\n+\r\n from django.views.generic import ListView\r\n from django.db.models import Q\r\n from e_commerce.models import CartItem, Product, Category, ParentCategory,Favorite\r\n \r\n"
                },
                {
                    "date": 1739910140350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,13 @@\n         context = super().get_context_data(**kwargs)\r\n         # Add  category et category parent for flitred categories\r\n         context['categories'] = Category.objects.all()\r\n         context['parent_categories'] = ParentCategory.objects.all()\r\n-        context['number'] =CartItem.objects.filter(cart__user=request.user, cart__is_active=True).count()\r\n+      # Vérifier si l'utilisateur est authentifié avant de filtrer les CartItem\r\n+        if self.request.user.is_authenticated:\r\n+            context['number'] = CartItem.objects.filter(cart__user=self.request.user, cart__is_active=True).count()\r\n+        else:\r\n+            context['number'] = 0  # Retourner 0 si l'utilisateur n'est pas connecté\r\n         context['search_name'] = self.request.GET.get('search_name', '')\r\n         context['category_id'] = self.request.GET.get('category', '')\r\n         context['parent_category_id'] = self.request.GET.get('parent_category', '')\r\n         # Gérer les favoris de l'utilisateur si l'utilisateur est authentifié\r\n"
                }
            ],
            "date": 1739025482651,
            "name": "Commit-0",
            "content": "from django.shortcuts import get_object_or_404, render\r\nfrom e_commerce.models import Product"
        }
    ]
}