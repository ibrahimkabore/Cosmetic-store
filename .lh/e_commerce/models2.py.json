{
    "sourceFile": "e_commerce/models2.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1738860092912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738861400468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,4 +249,45 @@\n     price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n     history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     def __str__(self):\r\n         return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n+\r\n+class Review(BaseModel):\r\n+    RATING_CHOICES = [\r\n+        (1, _('1 - Very Unsatisfied')),\r\n+        (2, _('2 - Unsatisfied')),\r\n+        (3, _('3 - Average')),\r\n+        (4, _('4 - Satisfied')),\r\n+        (5, _('5 - Excellent'))\r\n+    ]\r\n+\r\n+    product = models.ForeignKey(\r\n+        Product, \r\n+        on_delete=models.CASCADE,\r\n+        related_name='reviews',\r\n+        verbose_name=_(\"Associated Product\")\r\n+    )\r\n+    user = models.ForeignKey(\r\n+        'CustomUser', \r\n+        on_delete=models.CASCADE,\r\n+        verbose_name=_(\"User\")\r\n+    )\r\n+    rating = models.IntegerField(\r\n+        _(\"Rating\"), \r\n+        choices=RATING_CHOICES\r\n+    )\r\n+    comment = models.TextField(\r\n+        _(\"Comment\"),\r\n+        max_length=1000,\r\n+        blank=True\r\n+    )\r\n+    review_date = models.DateTimeField(\r\n+        _(\"Review Date\"),\r\n+        auto_now_add=True\r\n+    )\r\n+    recommended = models.BooleanField(\r\n+        _(\"Would Recommend\"),\r\n+        default=False\r\n+    )\r\n+\r\n+    class Meta:\r\n+        unique_together = ['product', 'user']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738861409031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,44 +250,4 @@\n     history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n     def __str__(self):\r\n         return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n \r\n-class Review(BaseModel):\r\n-    RATING_CHOICES = [\r\n-        (1, _('1 - Very Unsatisfied')),\r\n-        (2, _('2 - Unsatisfied')),\r\n-        (3, _('3 - Average')),\r\n-        (4, _('4 - Satisfied')),\r\n-        (5, _('5 - Excellent'))\r\n-    ]\r\n-\r\n-    product = models.ForeignKey(\r\n-        Product, \r\n-        on_delete=models.CASCADE,\r\n-        related_name='reviews',\r\n-        verbose_name=_(\"Associated Product\")\r\n-    )\r\n-    user = models.ForeignKey(\r\n-        'CustomUser', \r\n-        on_delete=models.CASCADE,\r\n-        verbose_name=_(\"User\")\r\n-    )\r\n-    rating = models.IntegerField(\r\n-        _(\"Rating\"), \r\n-        choices=RATING_CHOICES\r\n-    )\r\n-    comment = models.TextField(\r\n-        _(\"Comment\"),\r\n-        max_length=1000,\r\n-        blank=True\r\n-    )\r\n-    review_date = models.DateTimeField(\r\n-        _(\"Review Date\"),\r\n-        auto_now_add=True\r\n-    )\r\n-    recommended = models.BooleanField(\r\n-        _(\"Would Recommend\"),\r\n-        default=False\r\n-    )\r\n-\r\n-    class Meta:\r\n-        unique_together = ['product', 'user']\n\\ No newline at end of file\n"
                }
            ],
            "date": 1738860092912,
            "name": "Commit-0",
            "content": "from django.db import models\r\nfrom safedelete.models import SafeDeleteModel, SOFT_DELETE_CASCADE\r\nfrom django.contrib.auth.models import AbstractUser\r\nfrom django.core.files.storage import FileSystemStorage\r\nfrom django.conf import settings\r\nimport os.path\r\nimport os\r\nimport uuid\r\nfrom django.utils import timezone\r\nimport random\r\nfrom django_lifecycle import LifecycleModel\r\nfrom io import BytesIO\r\nfrom django.contrib.auth.signals import user_logged_in, user_logged_out\r\nfrom django.dispatch import receiver\r\nfrom django.utils.translation import gettext_lazy as _\r\nfrom simple_history.models import HistoricalRecords\r\nfrom django.core.exceptions import ValidationError\r\n\r\n\r\nimageFs = FileSystemStorage(location=os.path.join(str(settings.BASE_DIR),\r\n                                                '/medias/'))\r\n\r\n####     models contry ########\r\nclass Contry(SafeDeleteModel,LifecycleModel):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n\r\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='contry name')\r\n    history = HistoricalRecords(table_name='Contry_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n##     models city ########\r\nclass City(SafeDeleteModel,LifecycleModel):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n\r\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    name = models.CharField(max_length=50,unique=True, blank=False ,verbose_name='city name')\r\n    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n    history = HistoricalRecords(table_name='City_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n####     models CustomUsers ########\r\nclass CustomUsers(AbstractUser,SafeDeleteModel):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n    \r\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    contry = models.ForeignKey(Contry, on_delete=models.CASCADE)\r\n    city=models.ForeignKey(City, on_delete=models.CASCADE)\r\n    contact = models.CharField(max_length=10)\r\n    account_creation_date = models.DateTimeField(default=timezone.now, editable=False,verbose_name='account creation date')\r\n    is_online = models.BooleanField(default=False)\r\n    history = HistoricalRecords(table_name='CustomUsers_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n\r\n    \r\n     # Ajout de related_name pour éviter les conflits\r\n    groups = models.ManyToManyField(\r\n        'auth.Group',\r\n        related_name='customuser_set',\r\n        related_query_name='customuser',\r\n        blank=True,\r\n        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',\r\n        verbose_name='groups',\r\n    )\r\n    user_permissions = models.ManyToManyField(\r\n        'auth.Permission',\r\n        related_name='customuser_set',\r\n        related_query_name='customuser',\r\n        blank=True,\r\n        help_text='Specific permissions for this user.',\r\n        verbose_name='user permissions',\r\n    )\r\n    \r\n    def __str__(self):\r\n        return f\"{self.username}\"\r\n\r\n    # Signaux pour mettre à jour le statut en ligne et la date de dernière connexion\r\n    @receiver(user_logged_in)\r\n    def user_logged_in_handler(sender, request, user, **kwargs):\r\n        user.is_online = True\r\n        user.last_login = timezone.now()  # Met à jour le champ last_login\r\n        user.save()\r\n\r\n    @receiver(user_logged_out)\r\n    def user_logged_out_handler(sender, request, user, **kwargs):\r\n        user.is_online = False\r\n        user.save()\r\n    \r\n    \r\n\r\n####     models Verificade Code ########\r\nclass VerificationCode(models.Model):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n\r\n    user = models.OneToOneField(CustomUsers, on_delete=models.CASCADE)\r\n    code = models.CharField(max_length=6)\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return f\"{self.user.username} - {self.code}\"\r\n    \r\n\r\n\r\n##### models Category ########\r\nclass Category (SafeDeleteModel,LifecycleModel):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n\r\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    name = models.CharField(max_length=50, unique=True, blank=False ,verbose_name='category name')\r\n    history = HistoricalRecords(table_name='Category_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n\r\n    def __str__(self):\r\n        return self.name\r\n    \r\n    \r\n    \r\n##### models product ########\r\nclass Product(SafeDeleteModel,LifecycleModel):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n    \r\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    name = models.CharField(max_length=50,unique=True, blank=False,verbose_name='product name')\r\n    description = models.TextField(verbose_name=\"description\",max_length=200)\r\n    price = models.FloatField(max_length=5,unique=True, blank=False, verbose_name='product price')\r\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\r\n    date_add = models.DateTimeField(auto_now_add=True,verbose_name='date add product',editable=False)\r\n    quality = models.IntegerField(verbose_name='product quality',max_length=3)\r\n    image = models.ImageField(upload_to='products/', verbose_name='product image', storage=imageFs)\r\n    history = HistoricalRecords(table_name='Product_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n    date_modified = models.DateTimeField(auto_now=True, verbose_name='date modified',editable=False)\r\n    # Dropdown list to check if the product is on sale\r\n    SALE_CHOICES = [\r\n        ('No', 'No'),\r\n        ('Yes', 'Yes'),\r\n    ]\r\n    \r\n    on_sale = models.CharField(\r\n        max_length=3,\r\n        choices=SALE_CHOICES,\r\n        default='No',  # By default, the product is not on sale\r\n        verbose_name='Is the product on sale?'\r\n    )\r\n    \r\n    # Dropdown list to check if the product is a best seller\r\n    BESTSELLER_CHOICES = [\r\n        ('No', 'No'),\r\n        ('Yes', 'Yes'),\r\n    ]\r\n    \r\n    bestseller = models.CharField(\r\n        max_length=3,\r\n        choices=BESTSELLER_CHOICES,\r\n        default='No',  # By default, the product is not a best seller\r\n        verbose_name='Is the product a best seller?'\r\n    )\r\n    \r\n    # Dropdown list to check if the product is recommended\r\n    RECOMMENDED_CHOICES = [\r\n        ('No', 'No'),\r\n        ('Yes', 'Yes'),\r\n    ]\r\n    \r\n    recommended = models.CharField(\r\n        max_length=3,\r\n        choices=RECOMMENDED_CHOICES,\r\n        default='No',  # By default, the product is not recommended\r\n        verbose_name='Is the product recommended?'\r\n    )\r\n    \r\n    #field to track the discount percentage\r\n    discount_percentage = models.DecimalField(\r\n        max_digits=5, \r\n        decimal_places=2, \r\n        null=True, \r\n        blank=True, \r\n        verbose_name='Discount percentage % '\r\n    )\r\n    \r\n    # Dropdown list to check if the product is a favorite\r\n    FAVORITE_CHOICES = [\r\n        ('No', 'No'),\r\n        ('Yes', 'Yes'),\r\n    ]\r\n    \r\n    favorite = models.CharField(\r\n        max_length=3,\r\n        choices=FAVORITE_CHOICES,\r\n        default='No',  # By default, the product is not marked as a favorite\r\n        verbose_name='Is the product a favorite?'\r\n    )\r\n    \r\n    def __str__(self):\r\n        return self.name\r\n    \r\n####     models shopping cart ########\r\nclass ShoppingCart(models.Model):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n    \r\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)\r\n    total_price = models.FloatField(max_length=5, blank=False, verbose_name='total price')\r\n    product=models.ForeignKey(Product, on_delete=models.CASCADE)\r\n    created_at = models.DateTimeField(auto_now_add=True,verbose_name='date of creation')\r\n    updated_at = models.DateTimeField(auto_now=True,verbose_name='date of update')\r\n    history = HistoricalRecords(table_name='ShoppingCart_history', history_id_field=models.UUIDField(default=uuid.uuid4),verbose_name='history of shopping cart')\r\n    \r\n    def __str__(self):\r\n        return f\"Shopping cart of {self.user.username}\"\r\n\r\n####     models order ########\r\n\r\nclass Order(models.Model):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n    ORDER_STATUS_CHOICES = [\r\n        ('Pending', 'Pending'),\r\n        ('Processing', 'Processing'),\r\n        ('Shipped', 'Shipped'),\r\n        ('Delivered', 'Delivered'),\r\n        ('Canceled', 'Canceled'),\r\n    ]\r\n    \r\n    \r\n\r\n    id = models.UUIDField(\"Order ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    user = models.ForeignKey(CustomUsers, on_delete=models.CASCADE)  # Linking the order to a user\r\n    products = models.ManyToManyField(Product, through='OrderProduct')  # Linking products to the order\r\n    total_price = models.DecimalField(max_digits=10, decimal_places=2)  # Total price of the order\r\n    status = models.CharField(max_length=10, choices=ORDER_STATUS_CHOICES, default='Pending')  # Order status\r\n    shipping_address = models.TextField()  # Shipping address for the order\r\n    created_at = models.DateTimeField(auto_now_add=True)  # Order creation date\r\n    updated_at = models.DateTimeField(auto_now=True)  # Order last update date\r\n    history = HistoricalRecords(table_name='Order_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n\r\n    def __str__(self):\r\n        return f\"Order {self.id} by {self.user.username}\"\r\n\r\n####     models OrderProduct ########\r\nclass OrderProduct(models.Model):\r\n    _safedelete_policy = SOFT_DELETE_CASCADE\r\n    \r\n    id = models.UUIDField(\"ID\", primary_key=True, default=uuid.uuid4, editable=False)\r\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\r\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\r\n    quantity = models.PositiveIntegerField()  # Quantity of the product in the order\r\n    price_at_purchase = models.DecimalField(max_digits=10, decimal_places=2)  # Product price at the time of order\r\n    history = HistoricalRecords(table_name='OrderProduct_history', history_id_field=models.UUIDField(default=uuid.uuid4))\r\n    def __str__(self):\r\n        return f\"{self.quantity} x {self.product.name} for Order {self.order.id}\"\r\n"
        }
    ]
}