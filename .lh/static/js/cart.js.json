{
    "sourceFile": "static/js/cart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739868808398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739869608314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // Namespace pour notre application\r\n const ShopApp = {\r\n+ \r\n     // Gestionnaire d'initialisation\r\n     init: function() {\r\n         this.initEventListeners();\r\n     },\r\n"
                },
                {
                    "date": 1739869635764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+// Namespace pour notre application\r\n+const ShopApp = {\r\n+ \r\n+    // Gestionnaire d'initialisation\r\n+    init: function() {\r\n+        this.initEventListeners();\r\n+    },\r\n+\r\n+    // Initialisation des écouteurs d'événements\r\n+    initEventListeners: function() {\r\n+        document.addEventListener('DOMContentLoaded', () => {\r\n+            this.initFavoriteButtons();\r\n+            this.initCartButtons();\r\n+        });\r\n+    },\r\n+\r\n+    // Gestionnaire des favoris\r\n+    initFavoriteButtons: function() {\r\n+        document.querySelectorAll('.favorite-btn').forEach(button => {\r\n+            button.addEventListener('click', this.handleFavoriteClick.bind(this));\r\n+        });\r\n+    },\r\n+\r\n+    // Gestionnaire du panier\r\n+    initCartButtons: function() {\r\n+        document.querySelectorAll('.add-to-cart-btn').forEach(button => {\r\n+            button.addEventListener('click', (event) => {\r\n+                const productId = event.currentTarget.dataset.productId;\r\n+                this.addToCart(productId);\r\n+            });\r\n+        });\r\n+    },\r\n+\r\n+    // Méthodes utilitaires\r\n+    utils: {\r\n+        getCookie: function(name) {\r\n+            let cookieValue = null;\r\n+            if (document.cookie && document.cookie !== '') {\r\n+                const cookies = document.cookie.split(';');\r\n+                for (let i = 0; i < cookies.length; i++) {\r\n+                    const cookie = cookies[i].trim();\r\n+                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n+                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n+                        break;\r\n+                    }\r\n+                }\r\n+            }\r\n+            return cookieValue;\r\n+        },\r\n+\r\n+        showNotification: function(message, type = 'success') {\r\n+            const toast = document.getElementById('notification-toast');\r\n+            if (!toast) return;\r\n+\r\n+            const messageElement = toast.querySelector('.toast-message');\r\n+            toast.className = `toast-container ${type}`;\r\n+            messageElement.textContent = message;\r\n+            toast.style.display = 'block';\r\n+\r\n+            setTimeout(() => {\r\n+                toast.style.display = 'none';\r\n+            }, 3000);\r\n+        }\r\n+    },\r\n+\r\n+    // Gestion des favoris\r\n+    handleFavoriteClick: function(event) {\r\n+        const button = event.currentTarget;\r\n+        const productId = button.dataset.productId;\r\n+        const currentIsFavorite = button.dataset.isFavorite === 'true';\r\n+\r\n+        button.style.pointerEvents = 'none';\r\n+\r\n+        fetch(`/toggle-favorite/${productId}/`, {\r\n+            method: 'POST',\r\n+            headers: {\r\n+                'X-CSRFToken': this.utils.getCookie('csrftoken'),\r\n+                'Content-Type': 'application/json',\r\n+            }\r\n+        })\r\n+        .then(response => response.json())\r\n+        .then(data => {\r\n+            if (data.status === 'success') {\r\n+                this.updateFavoriteButtons(productId, !currentIsFavorite);\r\n+            }\r\n+        })\r\n+        .catch(error => {\r\n+            console.error('Error:', error);\r\n+            this.utils.showNotification('Une erreur est survenue', 'error');\r\n+        })\r\n+        .finally(() => {\r\n+            button.style.pointerEvents = 'auto';\r\n+        });\r\n+    },\r\n+\r\n+    // Mise à jour des boutons favoris\r\n+    updateFavoriteButtons: function(productId, isFavorite) {\r\n+        document.querySelectorAll(`.favorite-btn[data-product-id=\"${productId}\"]`)\r\n+            .forEach(button => {\r\n+                const icon = button.querySelector('i');\r\n+                const text = button.querySelector('p');\r\n+\r\n+                icon.classList.remove('fa-heart', 'fa-heart-o');\r\n+                icon.classList.add(isFavorite ? 'fa-heart' : 'fa-heart-o');\r\n+                text.textContent = isFavorite ? 'Retirer des favoris' : 'favoris';\r\n+                button.dataset.isFavorite = isFavorite.toString();\r\n+            });\r\n+    },\r\n+\r\n+    // Gestion du panier\r\n+    addToCart: function(productId) {\r\n+        const button = document.querySelector(`.add-to-cart-btn[data-product-id=\"${productId}\"]`);\r\n+        if (!button) return;\r\n+\r\n+        button.disabled = true;\r\n+\r\n+        fetch(`/cart/add/${productId}/`, {\r\n+            method: 'POST',\r\n+            headers: {\r\n+                'X-CSRFToken': this.utils.getCookie('csrftoken'),\r\n+                'Content-Type': 'application/json'\r\n+            }\r\n+        })\r\n+        .then(response => {\r\n+            if (response.ok) {\r\n+                this.utils.showNotification('Produit ajouté au panier avec succès');\r\n+                window.location.href = '/cart/';\r\n+            } else {\r\n+                throw new Error('Erreur lors de l\\'ajout au panier');\r\n+            }\r\n+        })\r\n+        .catch(error => {\r\n+            console.error('Error:', error);\r\n+            this.utils.showNotification('Erreur lors de l\\'ajout au panier', 'error');\r\n+        })\r\n+        .finally(() => {\r\n+            button.disabled = false;\r\n+        });\r\n+    }\r\n+};\r\n+\r\n+// Initialisation de l'application\r\n+ShopApp.init();\r\n+\r\n+function redirectToLogin() {\r\n+    window.location.href = '/login/';\r\n+}\r\n+\r\n+function addToCart(event, productId) {\r\n+    event.preventDefault();\r\n+    const button = event.currentTarget;\r\n+    button.disabled = true;\r\n+\r\n+    fetch(`/cart/add/${productId}/`, {\r\n+        method: 'POST',\r\n+        headers: {\r\n+            'X-CSRFToken': getCookie('csrftoken'),\r\n+            'Content-Type': 'application/json'\r\n+        },\r\n+        credentials: 'same-origin'\r\n+    })\r\n+    .then(response => {\r\n+        if (!response.ok) {\r\n+            throw new Error('Erreur réseau');\r\n+        }\r\n+        return response.json();\r\n+    })\r\n+    .then(data => {\r\n+        showNotification('Produit ajouté au panier avec succès', 'success');\r\n+        setTimeout(() => {\r\n+            window.location.reload();\r\n+        }, 1000);\r\n+    })\r\n+    .catch(error => {\r\n+        console.error('Erreur:', error);\r\n+        showNotification('Erreur lors de l\\'ajout au panier', 'error');\r\n+    })\r\n+    .finally(() => {\r\n+        button.disabled = false;\r\n+    });\r\n+}\r\n+\r\n+function showNotification(message, type = 'success') {\r\n+    const toast = document.getElementById('notification-toast');\r\n+    const messageElement = toast.querySelector('.toast-message');\r\n+    \r\n+    toast.className = `toast-container ${type}`;\r\n+    messageElement.textContent = message;\r\n+    toast.style.display = 'block';\r\n+    \r\n+    setTimeout(() => {\r\n+        toast.style.display = 'none';\r\n+    }, 3000);\r\n+}\r\n+\r\n+function getCookie(name) {\r\n+    let cookieValue = null;\r\n+    if (document.cookie && document.cookie !== '') {\r\n+        const cookies = document.cookie.split(';');\r\n+        for (let i = 0; i < cookies.length; i++) {\r\n+            const cookie = cookies[i].trim();\r\n+            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n+                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n+                break;\r\n+            }\r\n+        }\r\n+    }\r\n+    return cookieValue;\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739869757061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,209 +1,145 @@\n-// Namespace pour notre application\r\n const ShopApp = {\r\n- \r\n-    // Gestionnaire d'initialisation\r\n-    init: function() {\r\n-        this.initEventListeners();\r\n+    // Configuration\r\n+    config: {\r\n+        selectors: {\r\n+            favoriteBtn: '.favorite-btn',\r\n+            cartBtn: '.add-to-cart-btn',\r\n+            toast: '#notification-toast',\r\n+            toastMessage: '.toast-message'\r\n+        },\r\n+        urls: {\r\n+            login: '/login/',\r\n+            cart: '/cart/',\r\n+            toggleFavorite: (id) => `/toggle-favorite/${id}/`,\r\n+            addToCart: (id) => `/cart/add/${id}/`\r\n+        },\r\n+        notificationDuration: 3000\r\n     },\r\n \r\n-    // Initialisation des écouteurs d'événements\r\n-    initEventListeners: function() {\r\n+    // Initialisation\r\n+    init() {\r\n         document.addEventListener('DOMContentLoaded', () => {\r\n             this.initFavoriteButtons();\r\n             this.initCartButtons();\r\n         });\r\n     },\r\n \r\n-    // Gestionnaire des favoris\r\n-    initFavoriteButtons: function() {\r\n-        document.querySelectorAll('.favorite-btn').forEach(button => {\r\n-            button.addEventListener('click', this.handleFavoriteClick.bind(this));\r\n-        });\r\n+    // Gestionnaires d'événements\r\n+    initFavoriteButtons() {\r\n+        document.querySelectorAll(this.config.selectors.favoriteBtn)\r\n+            .forEach(button => button.addEventListener('click', this.handleFavoriteClick.bind(this)));\r\n     },\r\n \r\n-    // Gestionnaire du panier\r\n-    initCartButtons: function() {\r\n-        document.querySelectorAll('.add-to-cart-btn').forEach(button => {\r\n-            button.addEventListener('click', (event) => {\r\n-                const productId = event.currentTarget.dataset.productId;\r\n-                this.addToCart(productId);\r\n-            });\r\n-        });\r\n+    initCartButtons() {\r\n+        document.querySelectorAll(this.config.selectors.cartBtn)\r\n+            .forEach(button => button.addEventListener('click', this.handleCartClick.bind(this)));\r\n     },\r\n \r\n-    // Méthodes utilitaires\r\n+    // Utilitaires\r\n     utils: {\r\n-        getCookie: function(name) {\r\n-            let cookieValue = null;\r\n-            if (document.cookie && document.cookie !== '') {\r\n-                const cookies = document.cookie.split(';');\r\n-                for (let i = 0; i < cookies.length; i++) {\r\n-                    const cookie = cookies[i].trim();\r\n-                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n-                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n-                        break;\r\n-                    }\r\n-                }\r\n-            }\r\n-            return cookieValue;\r\n+        getCookie(name) {\r\n+            const value = `; ${document.cookie}`;\r\n+            const parts = value.split(`; ${name}=`);\r\n+            if (parts.length === 2) return parts.pop().split(';').shift();\r\n         },\r\n \r\n-        showNotification: function(message, type = 'success') {\r\n-            const toast = document.getElementById('notification-toast');\r\n+        async fetchWithAuth(url, options = {}) {\r\n+            const defaultOptions = {\r\n+                headers: {\r\n+                    'X-CSRFToken': this.getCookie('csrftoken'),\r\n+                    'Content-Type': 'application/json'\r\n+                },\r\n+                credentials: 'same-origin'\r\n+            };\r\n+\r\n+            return fetch(url, { ...defaultOptions, ...options });\r\n+        },\r\n+\r\n+        showNotification(message, type = 'success') {\r\n+            const toast = document.querySelector(ShopApp.config.selectors.toast);\r\n             if (!toast) return;\r\n \r\n-            const messageElement = toast.querySelector('.toast-message');\r\n+            const messageElement = toast.querySelector(ShopApp.config.selectors.toastMessage);\r\n             toast.className = `toast-container ${type}`;\r\n             messageElement.textContent = message;\r\n             toast.style.display = 'block';\r\n \r\n             setTimeout(() => {\r\n                 toast.style.display = 'none';\r\n-            }, 3000);\r\n+            }, ShopApp.config.notificationDuration);\r\n         }\r\n     },\r\n \r\n-    // Gestion des favoris\r\n-    handleFavoriteClick: function(event) {\r\n+    // Gestionnaires d'actions\r\n+    async handleFavoriteClick(event) {\r\n         const button = event.currentTarget;\r\n-        const productId = button.dataset.productId;\r\n+        const { productId } = button.dataset;\r\n         const currentIsFavorite = button.dataset.isFavorite === 'true';\r\n \r\n         button.style.pointerEvents = 'none';\r\n \r\n-        fetch(`/toggle-favorite/${productId}/`, {\r\n-            method: 'POST',\r\n-            headers: {\r\n-                'X-CSRFToken': this.utils.getCookie('csrftoken'),\r\n-                'Content-Type': 'application/json',\r\n-            }\r\n-        })\r\n-        .then(response => response.json())\r\n-        .then(data => {\r\n+        try {\r\n+            const response = await this.utils.fetchWithAuth(\r\n+                this.config.urls.toggleFavorite(productId),\r\n+                { method: 'POST' }\r\n+            );\r\n+            const data = await response.json();\r\n+\r\n             if (data.status === 'success') {\r\n                 this.updateFavoriteButtons(productId, !currentIsFavorite);\r\n             }\r\n-        })\r\n-        .catch(error => {\r\n+        } catch (error) {\r\n             console.error('Error:', error);\r\n             this.utils.showNotification('Une erreur est survenue', 'error');\r\n-        })\r\n-        .finally(() => {\r\n+        } finally {\r\n             button.style.pointerEvents = 'auto';\r\n-        });\r\n+        }\r\n     },\r\n \r\n-    // Mise à jour des boutons favoris\r\n-    updateFavoriteButtons: function(productId, isFavorite) {\r\n-        document.querySelectorAll(`.favorite-btn[data-product-id=\"${productId}\"]`)\r\n-            .forEach(button => {\r\n-                const icon = button.querySelector('i');\r\n-                const text = button.querySelector('p');\r\n+    async handleCartClick(event) {\r\n+        const button = event.currentTarget;\r\n+        const { productId } = button.dataset;\r\n \r\n-                icon.classList.remove('fa-heart', 'fa-heart-o');\r\n-                icon.classList.add(isFavorite ? 'fa-heart' : 'fa-heart-o');\r\n-                text.textContent = isFavorite ? 'Retirer des favoris' : 'favoris';\r\n-                button.dataset.isFavorite = isFavorite.toString();\r\n-            });\r\n-    },\r\n+        button.disabled = true;\r\n \r\n-    // Gestion du panier\r\n-    addToCart: function(productId) {\r\n-        const button = document.querySelector(`.add-to-cart-btn[data-product-id=\"${productId}\"]`);\r\n-        if (!button) return;\r\n+        try {\r\n+            const response = await this.utils.fetchWithAuth(\r\n+                this.config.urls.addToCart(productId),\r\n+                { method: 'POST' }\r\n+            );\r\n \r\n-        button.disabled = true;\r\n-\r\n-        fetch(`/cart/add/${productId}/`, {\r\n-            method: 'POST',\r\n-            headers: {\r\n-                'X-CSRFToken': this.utils.getCookie('csrftoken'),\r\n-                'Content-Type': 'application/json'\r\n-            }\r\n-        })\r\n-        .then(response => {\r\n             if (response.ok) {\r\n                 this.utils.showNotification('Produit ajouté au panier avec succès');\r\n-                window.location.href = '/cart/';\r\n+                setTimeout(() => {\r\n+                    window.location.href = this.config.urls.cart;\r\n+                }, 1000);\r\n             } else {\r\n                 throw new Error('Erreur lors de l\\'ajout au panier');\r\n             }\r\n-        })\r\n-        .catch(error => {\r\n+        } catch (error) {\r\n             console.error('Error:', error);\r\n             this.utils.showNotification('Erreur lors de l\\'ajout au panier', 'error');\r\n-        })\r\n-        .finally(() => {\r\n+        } finally {\r\n             button.disabled = false;\r\n\\ No newline at end of file\n-        });\r\n+        }\r\n+    },\r\n+\r\n+    updateFavoriteButtons(productId, isFavorite) {\r\n+        document.querySelectorAll(`${this.config.selectors.favoriteBtn}[data-product-id=\"${productId}\"]`)\r\n+            .forEach(button => {\r\n+                const icon = button.querySelector('i');\r\n+                const text = button.querySelector('p');\r\n+\r\n+                icon.classList.remove('fa-heart', 'fa-heart-o');\r\n+                icon.classList.add(isFavorite ? 'fa-heart' : 'fa-heart-o');\r\n+                text.textContent = isFavorite ? 'Retirer des favoris' : 'favoris';\r\n+                button.dataset.isFavorite = isFavorite.toString();\r\n+            });\r\n     }\r\n };\r\n \r\n+// Fonctions utilitaires globales\r\n+const redirectToLogin = () => window.location.href = ShopApp.config.urls.login;\r\n+\r\n // Initialisation de l'application\r\n-ShopApp.init();\r\n-\r\n-function redirectToLogin() {\r\n-    window.location.href = '/login/';\r\n-}\r\n-\r\n-function addToCart(event, productId) {\r\n-    event.preventDefault();\r\n-    const button = event.currentTarget;\r\n-    button.disabled = true;\r\n-\r\n-    fetch(`/cart/add/${productId}/`, {\r\n-        method: 'POST',\r\n-        headers: {\r\n-            'X-CSRFToken': getCookie('csrftoken'),\r\n-            'Content-Type': 'application/json'\r\n-        },\r\n-        credentials: 'same-origin'\r\n-    })\r\n-    .then(response => {\r\n-        if (!response.ok) {\r\n-            throw new Error('Erreur réseau');\r\n-        }\r\n-        return response.json();\r\n-    })\r\n-    .then(data => {\r\n-        showNotification('Produit ajouté au panier avec succès', 'success');\r\n-        setTimeout(() => {\r\n-            window.location.reload();\r\n-        }, 1000);\r\n-    })\r\n-    .catch(error => {\r\n-        console.error('Erreur:', error);\r\n-        showNotification('Erreur lors de l\\'ajout au panier', 'error');\r\n-    })\r\n-    .finally(() => {\r\n-        button.disabled = false;\r\n-    });\r\n-}\r\n-\r\n-function showNotification(message, type = 'success') {\r\n-    const toast = document.getElementById('notification-toast');\r\n-    const messageElement = toast.querySelector('.toast-message');\r\n-    \r\n-    toast.className = `toast-container ${type}`;\r\n-    messageElement.textContent = message;\r\n-    toast.style.display = 'block';\r\n-    \r\n-    setTimeout(() => {\r\n-        toast.style.display = 'none';\r\n-    }, 3000);\r\n-}\r\n-\r\n-function getCookie(name) {\r\n-    let cookieValue = null;\r\n-    if (document.cookie && document.cookie !== '') {\r\n-        const cookies = document.cookie.split(';');\r\n-        for (let i = 0; i < cookies.length; i++) {\r\n-            const cookie = cookies[i].trim();\r\n-            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n-                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n-                break;\r\n-            }\r\n-        }\r\n-    }\r\n-    return cookieValue;\r\n-}\n+ShopApp.init();\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739868808398,
            "name": "Commit-0",
            "content": "// Namespace pour notre application\r\nconst ShopApp = {\r\n    // Gestionnaire d'initialisation\r\n    init: function() {\r\n        this.initEventListeners();\r\n    },\r\n\r\n    // Initialisation des écouteurs d'événements\r\n    initEventListeners: function() {\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n            this.initFavoriteButtons();\r\n            this.initCartButtons();\r\n        });\r\n    },\r\n\r\n    // Gestionnaire des favoris\r\n    initFavoriteButtons: function() {\r\n        document.querySelectorAll('.favorite-btn').forEach(button => {\r\n            button.addEventListener('click', this.handleFavoriteClick.bind(this));\r\n        });\r\n    },\r\n\r\n    // Gestionnaire du panier\r\n    initCartButtons: function() {\r\n        document.querySelectorAll('.add-to-cart-btn').forEach(button => {\r\n            button.addEventListener('click', (event) => {\r\n                const productId = event.currentTarget.dataset.productId;\r\n                this.addToCart(productId);\r\n            });\r\n        });\r\n    },\r\n\r\n    // Méthodes utilitaires\r\n    utils: {\r\n        getCookie: function(name) {\r\n            let cookieValue = null;\r\n            if (document.cookie && document.cookie !== '') {\r\n                const cookies = document.cookie.split(';');\r\n                for (let i = 0; i < cookies.length; i++) {\r\n                    const cookie = cookies[i].trim();\r\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return cookieValue;\r\n        },\r\n\r\n        showNotification: function(message, type = 'success') {\r\n            const toast = document.getElementById('notification-toast');\r\n            if (!toast) return;\r\n\r\n            const messageElement = toast.querySelector('.toast-message');\r\n            toast.className = `toast-container ${type}`;\r\n            messageElement.textContent = message;\r\n            toast.style.display = 'block';\r\n\r\n            setTimeout(() => {\r\n                toast.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n    },\r\n\r\n    // Gestion des favoris\r\n    handleFavoriteClick: function(event) {\r\n        const button = event.currentTarget;\r\n        const productId = button.dataset.productId;\r\n        const currentIsFavorite = button.dataset.isFavorite === 'true';\r\n\r\n        button.style.pointerEvents = 'none';\r\n\r\n        fetch(`/toggle-favorite/${productId}/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'X-CSRFToken': this.utils.getCookie('csrftoken'),\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.status === 'success') {\r\n                this.updateFavoriteButtons(productId, !currentIsFavorite);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n            this.utils.showNotification('Une erreur est survenue', 'error');\r\n        })\r\n        .finally(() => {\r\n            button.style.pointerEvents = 'auto';\r\n        });\r\n    },\r\n\r\n    // Mise à jour des boutons favoris\r\n    updateFavoriteButtons: function(productId, isFavorite) {\r\n        document.querySelectorAll(`.favorite-btn[data-product-id=\"${productId}\"]`)\r\n            .forEach(button => {\r\n                const icon = button.querySelector('i');\r\n                const text = button.querySelector('p');\r\n\r\n                icon.classList.remove('fa-heart', 'fa-heart-o');\r\n                icon.classList.add(isFavorite ? 'fa-heart' : 'fa-heart-o');\r\n                text.textContent = isFavorite ? 'Retirer des favoris' : 'favoris';\r\n                button.dataset.isFavorite = isFavorite.toString();\r\n            });\r\n    },\r\n\r\n    // Gestion du panier\r\n    addToCart: function(productId) {\r\n        const button = document.querySelector(`.add-to-cart-btn[data-product-id=\"${productId}\"]`);\r\n        if (!button) return;\r\n\r\n        button.disabled = true;\r\n\r\n        fetch(`/cart/add/${productId}/`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'X-CSRFToken': this.utils.getCookie('csrftoken'),\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(response => {\r\n            if (response.ok) {\r\n                this.utils.showNotification('Produit ajouté au panier avec succès');\r\n                window.location.href = '/cart/';\r\n            } else {\r\n                throw new Error('Erreur lors de l\\'ajout au panier');\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error:', error);\r\n            this.utils.showNotification('Erreur lors de l\\'ajout au panier', 'error');\r\n        })\r\n        .finally(() => {\r\n            button.disabled = false;\r\n        });\r\n    }\r\n};\r\n\r\n// Initialisation de l'application\r\nShopApp.init();"
        }
    ]
}